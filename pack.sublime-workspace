{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"wc",
				"wc_error_stop"
			],
			[
				"do",
				"document"
			],
			[
				"bac",
				"background-position\tproperty"
			],
			[
				"in",
				"integrity"
			],
			[
				"ch",
				"character"
			],
			[
				"en",
				"energys"
			],
			[
				"ila",
				"ilat_up"
			],
			[
				"left",
				"left_order"
			],
			[
				"ready",
				"ready_left"
			],
			[
				"get",
				"get_num"
			],
			[
				"line3",
				"line3_no"
			],
			[
				"alloc",
				"allocatable"
			],
			[
				"c",
				"character"
			],
			[
				"all",
				"alltn"
			],
			[
				"na",
				"name_last"
			],
			[
				"name",
				"name_this"
			],
			[
				"la",
				"lat_type"
			],
			[
				"che",
				"check_exist"
			],
			[
				"lattic",
				"lattice_up"
			],
			[
				"check",
				"check_contain"
			],
			[
				"err",
				"error1"
			],
			[
				"ten",
				"tensor"
			],
			[
				"G",
				"Gnames"
			],
			[
				"phy",
				"phynames"
			],
			[
				"up_",
				"up_hole"
			],
			[
				"write",
				"writemess"
			],
			[
				"ring",
				"ring_perm"
			],
			[
				"em",
				"empty_tag"
			],
			[
				"op",
				"optional"
			],
			[
				"term",
				"term_num"
			],
			[
				"ope",
				"operator"
			],
			[
				"an",
				"anti_ring"
			],
			[
				"su",
				"success"
			],
			[
				"allo",
				"allocatable"
			],
			[
				"tensor_sa",
				"tensor_save_tag"
			],
			[
				"ba",
				"balance_mode"
			],
			[
				"ab",
				"absorb_path"
			],
			[
				"lat",
				"lat_size"
			],
			[
				"tnt",
				"tn_tensor"
			],
			[
				"pa",
				"path_3l"
			],
			[
				"pat",
				"path_4l"
			],
			[
				"path",
				"path_3l"
			],
			[
				"ka",
				"kagome_square"
			],
			[
				"nb_",
				"nb_no"
			],
			[
				"set",
				"setName"
			],
			[
				"this",
				"this_ring_no"
			],
			[
				"nb",
				"nb_no2"
			],
			[
				"ri",
				"right_ind"
			],
			[
				"midd",
				"middle_name"
			],
			[
				"left_",
				"left_name"
			],
			[
				"rank",
				"rankV"
			],
			[
				"rand",
				"rand_ring"
			],
			[
				"cut",
				"cut_lattice"
			],
			[
				"sub",
				"subroutine"
			],
			[
				"sta",
				"stablize_ring"
			],
			[
				"part",
				"partA"
			],
			[
				"par",
				"partA"
			],
			[
				"d",
				"dnorm2"
			],
			[
				"b",
				"belong"
			],
			[
				"ori",
				"ori_err"
			],
			[
				"H",
				"H_part"
			],
			[
				"ex",
				"exist_env"
			],
			[
				"para",
				"para_list"
			],
			[
				"inn",
				"inner_update4_PESS"
			],
			[
				"ring_",
				"ring_update"
			],
			[
				"thi",
				"this_ring_no"
			],
			[
				"se",
				"select"
			],
			[
				"cal",
				"cal_more"
			],
			[
				"o",
				"ori_norm3"
			],
			[
				"or",
				"ori_norm2"
			],
			[
				"ori_",
				"ori_norm1"
			],
			[
				"ga",
				"gate2"
			],
			[
				"T_",
				"T_new"
			],
			[
				"ve",
				"velo_save"
			],
			[
				"grad",
				"grad_save"
			],
			[
				"velo",
				"velo_save"
			],
			[
				"int",
				"intent"
			],
			[
				"step",
				"step_length"
			],
			[
				"th",
				"this_err"
			],
			[
				"max",
				"max_char_length"
			],
			[
				"a",
				"allocatable"
			],
			[
				"wri",
				"writemess"
			],
			[
				"rin",
				"ring_io"
			],
			[
				"al",
				"allocatable"
			],
			[
				"co",
				"complex"
			],
			[
				"QR",
				"QRTensor"
			],
			[
				"env_",
				"env_temp"
			],
			[
				"update_r",
				"update_ring_kagome"
			],
			[
				"tenso",
				"tensor_cur"
			],
			[
				"tens",
				"tensor_cur"
			],
			[
				"mo",
				"modulo"
			],
			[
				"ge",
				"getrank"
			],
			[
				"db",
				"dblyr_heisen"
			],
			[
				"st",
				"step"
			],
			[
				"up",
				"update_ring2"
			],
			[
				"ti",
				"time2"
			],
			[
				"dim",
				"diminfo"
			],
			[
				"di",
				"diminfo"
			],
			[
				"A",
				"Aname2"
			],
			[
				"calc",
				"calc_heisen"
			],
			[
				"L",
				"Latring"
			],
			[
				"de",
				"delta_t"
			],
			[
				"sim",
				"simple_ten1"
			],
			[
				"energy_square",
				"energy_square6_toric"
			],
			[
				"con",
				"conphi"
			],
			[
				"nam",
				"name2"
			],
			[
				"D",
				"Dcut"
			],
			[
				"LQ",
				"LQTs"
			],
			[
				"t",
				"tensor"
			],
			[
				"Lq",
				"LQTen"
			],
			[
				"cu",
				"cut_tag_"
			],
			[
				"Qn",
				"QN_in"
			],
			[
				"log",
				"logical"
			],
			[
				"as",
				"assignmentTs"
			],
			[
				"inter",
				"interface"
			],
			[
				"prod",
				"prod_tss"
			],
			[
				"da",
				"datatype"
			],
			[
				"char",
				"character"
			],
			[
				"te",
				"tensors"
			],
			[
				"cyl",
				"cyl_cut"
			],
			[
				"sp",
				"split"
			],
			[
				"len",
				"length"
			],
			[
				"get_ws",
				"get_ws_sp"
			],
			[
				"bo",
				"bottom"
			],
			[
				"get_r",
				"get_range"
			],
			[
				"ra",
				"raw_pos"
			],
			[
				"line",
				"line_ori"
			],
			[
				"L1_",
				"L1_aux"
			]
		]
	},
	"buffers":
	[
		{
			"file": "source/mpi_info/source/mpi_info.f90",
			"settings":
			{
				"buffer_size": 2654,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/chaowang/Desktop/program/peps/source/su_evolve.f90",
			"settings":
			{
				"buffer_size": 51901,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/Users/chaowang/Desktop/program/peps/source/su_run.f90",
			"settings":
			{
				"buffer_size": 5986,
				"line_ending": "Unix"
			}
		},
		{
			"file": "doc.sh",
			"settings":
			{
				"buffer_size": 696,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "docs/ford.md",
			"settings":
			{
				"buffer_size": 2797,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/percentage/source/percentage.f90",
			"settings":
			{
				"buffer_size": 1878,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/cumulator/source/cumulator.f90",
			"settings":
			{
				"buffer_size": 8507,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/error/source/error.f90",
			"settings":
			{
				"buffer_size": 10042,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "Searching 93 files for \"writemess\"\n\n/Users/chaowang/Desktop/program/pack/source/tenwork/source/tn_tensor.f90:\n  249  \n  250  \tcall T%grp%get_info\n  251: \tcall writemess('The dim of tensor is :')\n  252  \tcall T%diminfo()\n  253: \tcall writemess('The program has been paused. Please press any key to continue')\n  254  \tread(*,*)\n  255  \n\n/Users/chaowang/Desktop/program/pack/source/timer/source/timer.f90:\n   87  \tcharacter(len=15)::item_name\n   88  \t\n   89: \tcall writemess('')\n   90: \tcall writemess('================================')\n   91  \titem_name='Timer'\n   92: \tcall writemess(item_name//'Total time(s)')\n   93  \tdo i=1, max_elem\n   94  \t\tif (state(i)>0) then\n   95  \t\t\titem_name=names(i)\n   96: \t\t\tcall writemess(item_name//str(cumu_time(i)))\n   97  \t\tend if\n   98  \tend do\n   99: \tcall writemess('================================')\n  100: \tcall writemess('')\n  101  \n  102  end subroutine\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Dimension.f90:\n  352  !\n  353  !**********************************************************\t\n  354: \tpublic::writemess\n  355: \tinterface writemess\n  356: \t\tmodule procedure writemess_dimension\n  357  \tend interface\n  358  \t\n  ...\n  368  \t\n  369  \tsubroutine Dimension_memory_report()\n  370: \t\tcall writemess('The memory used in Dimension are:')\n  371  \t\tcall WorkingMemory%print()\n  372: \t\tcall writemess(' ')\n  373  \tend subroutine\t\n  374  \tsubroutine Dimension_memory_length(length)\n  ...\n  377  \tend subroutine\t\n  378  \t\n  379: \tsubroutine writemess_dimension(Dimen,cpu_number)!overwrite writemess\n  380  \t\ttype(dimension),intent(in)::Dimen\n  381  \t\tinteger,optional,intent(in)::cpu_number\n  ...\n  387  \t\ttotoal=Dimen%LenDimData\n  388  \t\tif(totoal.eq.0)then\n  389: \t\t\tcall writemess('There is no data in the dimension',cpu_number)\n  390  \t\t\treturn\n  391  \t\tend if\n  ...\n  396  \t\t\tend do\n  397  \t\t\tw=w+Dimen%DimData(Dimen%LenDimData)+')'\n  398: \t\t\tcall writemess(w,cpu_number)\n  399  \t\telse\n  400  \t\t\tcall copydimension(dimenVec,Dimen)\n  ...\n  404  \t\t\tend do\n  405  \t\t\tw=w+dimenVec(size(dimenVec))+'),It is not original dimension'\n  406: \t\t\tcall writemess(w,cpu_number)\n  407  \t\t\tw='original dimension:('\n  408  \t\t\tdo i=1,Dimen%LenDimData-1\n  ...\n  410  \t\t\tend do\n  411  \t\t\tw=w+Dimen%DimData(Dimen%LenDimData)+')'\n  412: \t\t\tcall writemess(w,cpu_number)\n  413  \t\tend if\n  414  \t\tif(Dimen%nameflag.eq.1)then\n  ...\n  420  \t\t\tend do\n  421  \t\t\tw=w+'.'\n  422: \t\t\tcall writemess(w,cpu_number)\n  423  \t\tend if\n  424  \t\treturn\n  ...\n  977  \t\t\twrite(uni,*) \" \"\n  978  \t\telse\n  979: \t\t\tcall writemess(\"***   Dimension Data    ***\",-1)\n  980  \t\t\tif(Dimen%LenDimData.le.0)then\n  981: \t\t\t\tcall writemess( \"***   There is no data in Dimension    ***\",-1)\n  982  \t\t\t\treturn\n  983  \t\t\tend if\n  ...\n  987  \t\t\t\t\twords=words+(' ,'+(' '+Dimen%DimData(i)))\n  988  \t\t\t\tend do\n  989: \t\t\t\tcall writemess(words,-1)\n  990  \t\t\telse\n  991  \t\t\t\tcall copydimension(dimenVec,Dimen)\n  ...\n  994  \t\t\t\t\twords=words+(' ,'+(' '+dimenVec(i)))\n  995  \t\t\t\tend do\n  996: \t\t\t\tcall writemess(words,-1)\n  997: \t\t\t\tcall writemess(\"It is not original dimension \",-1)\n  998  \t\t\tend if\n  999: \t\t\tcall writemess( \"***   Dimension END   ***\",-1)\n 1000  \t\t\tif(Dimen%nameflag.eq.1)then\n 1001  \t\t\t\tallocate(w(Dimen%lenDimData))\n ....\n 1005  \t\t\t\t\twords=words+(' ,'+(' '+w(i)))\n 1006  \t\t\t\tend do\n 1007: \t\t\t\tcall writemess(\"index Name are\",-1)\n 1008: \t\t\t\tcall writemess(words,-1)\n 1009  \t\t\tend if\n 1010  \t\t\tif(Dimen%nameflag.eq.2)then\n ....\n 1145  \t\tend if\n 1146  \t\tif(nameflag.eq.2)then\n 1147: \t\t\t\tcall writemess(\"cannot read int name\",-1)\n 1148  \t\t\t\tcall error_stop()\n 1149  \t\tend if\n ....\n 1172  \t\tinteger,intent(in) :: DimData(:)\n 1173  \t\tif(size(DimData).ne.dimen%outlenDimData())then\n 1174: \t\t\tcall writemess(\"Can not reset the dimension in type(Dimension)\",-1)\n 1175  \t\t\tcall error_stop()\n 1176  \t\tend if\n ....\n 1252  \t\tif(Dimen%nameflag.eq.0)then\n 1253  \t\t\tif(dimen%lenDimData.eq.0)then\n 1254: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1255  \t\t\tend if\n 1256: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1257  \t\t\tcall error_stop()\n 1258  \t\tend if\n ....\n 1289  \t\tif(Dimen%nameflag.eq.0)then\n 1290  \t\t\tif(dimen%lenDimData.eq.0)then\n 1291: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1292  \t\t\tend if\n 1293: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1294  \t\t\tcall error_stop()\n 1295  \t\tend if\n ....\n 1316  \t\t\tend do\n 1317  \t\t\tif(check.eq.1)return\n 1318: \t\t\tcall writemess('Cannot find the name='+w+',dimension.f90',-1)\n 1319  \t\t\tcall Dprint(dimen)\n 1320  \t\t\tcall error_stop()\n ....\n 1333  \t\tif(Dimen%nameflag.eq.0)then\n 1334  \t\t\tif(dimen%lenDimData.eq.0)then\n 1335: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1336  \t\t\tend if\n 1337: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1338  \t\t\tcall error_stop()\n 1339  \t\tend if\n 1340  \t\tif(.not.if_original_dim(dimen))then\n 1341: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1342  \t\t\tcall error_stop()\n 1343  \t\tend if\n ....\n 1382  \t\tif(Dimen%nameflag.eq.0)then\n 1383  \t\t\tif(dimen%lenDimData.eq.0)then\n 1384: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1385  \t\t\tend if\n 1386: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1387  \t\t\tcall error_stop()\n 1388  \t\tend if\n 1389  \t\tif(.not.if_original_dim(dimen))then\n 1390: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1391  \t\t\tcall error_stop()\n 1392  \t\tend if\n ....\n 1426  \t\tif(Dimen%nameflag.eq.0)then\n 1427  \t\t\tif(dimen%lenDimData.eq.0)then\n 1428: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1429  \t\t\tend if\n 1430: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1431  \t\t\tcall error_stop()\n 1432  \t\tend if\n 1433  \t\tif(.not.if_original_dim(dimen))then\n 1434: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1435  \t\t\tcall error_stop()\n 1436  \t\tend if\n 1437  \t\tif(ith.gt.Dimen%lenDimData)then\n 1438: \t\t\tcall writemess(\"The index is larger than the size of the name\",-1)\n 1439  \t\t\twrite(*,*)ith,Dimen%lenDimData\n 1440  \t\t\tcall error_stop()\n ....\n 1444  \t\t\treturn\n 1445  \t\tend if\n 1446: \t\tcall writemess(\"ERROR of nameFlag\",-1)\n 1447  \t\tcall error_stop()\n 1448  \tend function\n ....\n 1462  \t\tinteger,intent(in)::ith\n 1463  \t\tif(Dimen%nameflag.ne.2)then\n 1464: \t\t\tcall writemess(\"There is no integer name in the dimension\",-1)\n 1465  \t\t\tcall error_stop()\n 1466  \t\tend if\n 1467  \t\tif(ith.gt.Dimen%LenDimData)then\n 1468: \t\t\tcall writemess(\"The index is larger than the size of the name\",-1)\n 1469  \t\t\twrite(*,*)ith,Dimen%LenDimData\n 1470  \t\t\tcall error_stop()\n 1471  \t\tend if\n 1472  \t\tif(.not.if_original_dim(dimen))then\n 1473: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1474  \t\t\tcall error_stop()\n 1475  \t\tend if\n ....\n 1482  \t\tinteger,intent(in)::ith\n 1483  \t\tif(Dimen%nameflag.ne.2)then\n 1484: \t\t\tcall writemess(\"There is no integer name in the dimension\",-1)\n 1485  \t\t\tcall error_stop()\n 1486  \t\tend if\n 1487  \t\tif(ith.gt.Dimen%LenDimData)then\n 1488: \t\t\tcall writemess(\"The index is larger than the size of the name\",-1)\n 1489  \t\t\twrite(*,*)ith,Dimen%LenDimData\n 1490  \t\t\tcall error_stop()\n 1491  \t\tend if\n 1492  \t\tif(.not.if_original_dim(dimen))then\n 1493: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1494  \t\t\tcall error_stop()\n 1495  \t\tend if\n ....\n 1586  \t\ttype(DimensionName)::nam\n 1587  \t\tif(Dimen%nameflag.ne.1)then\n 1588: \t\t\tcall writemess(\"There is no character name in the dimension,Nameorder2\",-1)\n 1589: \t\t\tcall writemess('nameflag='+Dimen%nameflag,-1)\n 1590  \t\t\tcall error_stop()\n 1591  \t\tend if\n 1592  \t\tif(.not.long_Name_logi(w))then\n 1593: \t\t\tcall writemess('input error, one should input name written as A'+indexsymbol+'B')\n 1594  \t\t\tcall error_stop\n 1595  \t\tend if\n 1596  \t\tif(.not.if_original_dim(dimen))then\n 1597: \t\t\tcall writemess(\"Nameorder2 is use in original dimension\",-1)\n 1598  \t\t\tcall error_stop()\n 1599  \t\tend if\n ....\n 1619  \t\tend if\n 1620  \t\tif(.not.long_Name_logi(w))then\n 1621: \t\t\tcall writemess('input error, one should input name written as A'+indexsymbol+'B')\n 1622  \t\t\tcall error_stop\n 1623  \t\tend if\n ....\n 1633  \t\t\tend if\n 1634  \t\tend do\n 1635: \t\tcall writemess('Can Not Find the name:'+w)\n 1636  \t\tcall Dprint(dimen)\n 1637  \t\tcall error_stop\n ....\n 1677  \t\t\tend if\n 1678  \t\tend do\n 1679: \t\tcall writemess('Can Not Find the name:')\n 1680  \t\tcall dimen%print()\n 1681  \t\treturn\n ....\n 1724  \t\t\tend if\n 1725  \t\tend do\n 1726: \t\tcall writemess('Can Not Find the name:')\n 1727  \t\tcall dimen%print()\n 1728  \t\treturn\n ....\n 1771  \t\t\tend if\n 1772  \t\tend do\n 1773: \t\tcall writemess('Can Not Find the name:')\n 1774  \t\tcall dimen%print()\n 1775  \t\treturn\n ....\n 2717  \t\tl2=dimen2%LenDimData\n 2718  \t\tif(l1.eq.0)then\n 2719: \t\t\tcall writemess(' There is no Data in the first dimension when dim1 + dim2')\n 2720  \t\t\tcall error_stop\n 2721  \t\tend if\n 2722  \t\tif(l2.eq.0)then\n 2723: \t\t\tcall writemess(' There is no Data in the second dimension when dim1 + dim2')\n 2724  \t\t\tcall error_stop\n 2725  \t\tend if\n ....\n 2813  \t\tl2=size(Dimenvec)\n 2814  \t\tif(l1.eq.0)then\n 2815: \t\t\tcall writemess(' There is no Data in the first dimension when dim1 + vec(:)')\n 2816  \t\t\tcall error_stop\n 2817  \t\tend if\n 2818  \t\tif(l2.eq.0)then\n 2819: \t\t\tcall writemess(' There is no Data in the array when dim1 + vec(:)')\n 2820  \t\t\tcall error_stop\n 2821  \t\tend if\n ....\n 2881  \t\t\tdo j=i+1,rank\n 2882  \t\t\t\tif(na.equ.dimen%getName(j))then\n 2883: \t\t\t\t\tcall writemess('There are two legs with a same name',-1)\n 2884: \t\t\t\t\tcall writemess('The name in the dimension can not be the same',-1)\n 2885: \t\t\t\t\tcall writemess('The names are',-1)\n 2886: \t\t\t\t\tcall writemess(na)\n 2887: \t\t\t\t\tcall writemess(dimen%getName(j))\n 2888  \t\t\t\t\tcall dimen%print()\n 2889  \t\t\t\t\topen(unit=1234,file='_ERROR_DIMENSION'+output_ProID+'.err',status='replace')\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/modify_in_TData.f90:\n  957  \t\tinteger,intent(inout)::Tdata(LenT)\n  958  \t\tlogical,intent(in)::value\n  959: \t\tcall writemess('ERROR type when setting, integer=logical ')\n  960  \t\tcall error_stop\n  961  \tend subroutine\n  ...\n  965  \t\tinteger,intent(inout)::Tdata(LenT)\n  966  \t\tcharacter(len=*),intent(in)::value\n  967: \t\tcall writemess('ERROR type when setting, integer=character ')\n  968  \t\tcall error_stop\n  969  \tend subroutine\n  ...\n 1013  \t\tinteger,intent(inout)::Tdata(LenT)\n 1014  \t\tlogical,intent(in)::value(LenV)\n 1015: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1016  \t\tcall error_stop\n 1017  \t\treturn\n ....\n 1022  \t\tinteger,intent(inout)::Tdata(LenT)\n 1023  \t\tcharacter(len=*),intent(in)::value(LenV)\n 1024: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1025  \t\tcall error_stop\n 1026  \t\treturn\n ....\n 1071  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1072  \t\tlogical,intent(in)::value\n 1073: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1074  \t\tcall error_stop\n 1075  \tend subroutine\n ....\n 1079  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1080  \t\tcharacter(len=*),intent(in)::value\n 1081: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1082  \t\tcall error_stop\n 1083  \tend subroutine\n ....\n 1127  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1128  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 1129: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1130  \t\tcall error_stop\n 1131  \t\treturn\n ....\n 1136  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1137  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 1138: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1139  \t\tcall error_stop\n 1140  \t\treturn\n ....\n 1185  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1186  \t\tlogical,intent(in)::value\n 1187: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1188  \t\tcall error_stop\n 1189  \tend subroutine\n ....\n 1193  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1194  \t\tcharacter(len=*),intent(in)::value\n 1195: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1196  \t\tcall error_stop\n 1197  \tend subroutine\n ....\n 1241  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1242  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 1243: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1244  \t\tcall error_stop\n 1245  \tend subroutine\n ....\n 1249  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1250  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 1251: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1252  \t\tcall error_stop\n 1253  \t\treturn\n ....\n 1298  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1299  \t\tlogical,intent(in)::value\n 1300: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1301  \t\tcall error_stop\n 1302  \tend subroutine\n ....\n 1306  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1307  \t\tcharacter(len=*),intent(in)::value\n 1308: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1309  \t\tcall error_stop\n 1310  \tend subroutine\n ....\n 1354  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1355  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1356: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1357  \t\tcall error_stop\n 1358  \tend subroutine\n ....\n 1362  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1363  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1364: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1365  \t\tcall error_stop\n 1366  \tend subroutine\n ....\n 1414  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1415  \t\tlogical,intent(in)::value\n 1416: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1417  \t\tcall error_stop\n 1418  \tend subroutine\n ....\n 1422  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1423  \t\tcharacter(len=*),intent(in)::value\n 1424: \t\tcall writemess('ERROR type when setting, real=character ')\n 1425  \t\tcall error_stop\n 1426  \tend subroutine\n ....\n 1470  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1471  \t\tlogical,intent(in)::value(LenV)\n 1472: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1473  \t\tcall error_stop\n 1474  \tend subroutine\n ....\n 1478  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1479  \t\tcharacter(len=*),intent(in)::value(LenV)\n 1480: \t\tcall writemess('ERROR type when setting, real=character ')\n 1481  \t\tcall error_stop\n 1482  \tend subroutine\n ....\n 1526  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1527  \t\tlogical,intent(in)::value\n 1528: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1529  \t\tcall error_stop\n 1530  \tend subroutine\n ....\n 1534  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1535  \t\tcharacter(len=*),intent(in)::value\n 1536: \t\tcall writemess('ERROR type when setting, real=character ')\n 1537  \t\tcall error_stop\n 1538  \tend subroutine\n ....\n 1582  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1583  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 1584: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1585  \t\tcall error_stop\n 1586  \tend subroutine\n ....\n 1590  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1591  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 1592: \t\tcall writemess('ERROR type when setting, real=character ')\n 1593  \t\tcall error_stop\n 1594  \tend subroutine\n ....\n 1638  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1639  \t\tlogical,intent(in)::value\n 1640: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1641  \t\tcall error_stop\n 1642  \tend subroutine\n ....\n 1646  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1647  \t\tcharacter(len=*),intent(in)::value\n 1648: \t\tcall writemess('ERROR type when setting, real=character ')\n 1649  \t\tcall error_stop\n 1650  \tend subroutine\n ....\n 1694  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1695  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 1696: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1697  \t\tcall error_stop\n 1698  \tend subroutine\n ....\n 1702  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1703  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 1704: \t\tcall writemess('ERROR type when setting, real=character ')\n 1705  \t\tcall error_stop\n 1706  \tend subroutine\n ....\n 1750  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1751  \t\tlogical,intent(in)::value\n 1752: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1753  \t\tcall error_stop\n 1754  \tend subroutine\n ....\n 1758  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1759  \t\tcharacter(len=*),intent(in)::value\n 1760: \t\tcall writemess('ERROR type when setting, real=character ')\n 1761  \t\tcall error_stop\n 1762  \tend subroutine\n ....\n 1806  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1807  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1808: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1809  \t\tcall error_stop\n 1810  \t\treturn\n ....\n 1815  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1816  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1817: \t\tcall writemess('ERROR type when setting, real=character ')\n 1818  \t\tcall error_stop\n 1819  \t\treturn\n ....\n 1867  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1868  \t\tlogical,intent(in)::value\n 1869: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1870  \t\tcall error_stop\n 1871  \tend subroutine\n ....\n 1875  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1876  \t\tcharacter(len=*),intent(in)::value\n 1877: \t\tcall writemess('ERROR type when setting, real=character ')\n 1878  \t\tcall error_stop\n 1879  \tend subroutine\n ....\n 1923  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1924  \t\tlogical,intent(in)::value(LenV)\n 1925: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1926  \t\tcall error_stop\n 1927  \tend subroutine\n ....\n 1931  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1932  \t\tcharacter(len=*),intent(in)::value(LenV)\n 1933: \t\tcall writemess('ERROR type when setting, real=character ')\n 1934  \t\tcall error_stop\n 1935  \tend subroutine\n ....\n 1979  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 1980  \t\tlogical,intent(in)::value\n 1981: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1982  \t\tcall error_stop\n 1983  \tend subroutine\n ....\n 1987  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 1988  \t\tcharacter(len=*),intent(in)::value\n 1989: \t\tcall writemess('ERROR type when setting, real=character ')\n 1990  \t\tcall error_stop\n 1991  \tend subroutine\n ....\n 2035  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2036  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 2037: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2038  \t\tcall error_stop\n 2039  \tend subroutine\n ....\n 2043  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2044  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 2045: \t\tcall writemess('ERROR type when setting, real=character ')\n 2046  \t\tcall error_stop\n 2047  \tend subroutine\n ....\n 2091  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2092  \t\tlogical,intent(in)::value\n 2093: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2094  \t\tcall error_stop\n 2095  \tend subroutine\n ....\n 2099  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2100  \t\tcharacter(len=*),intent(in)::value\n 2101: \t\tcall writemess('ERROR type when setting, real=character ')\n 2102  \t\tcall error_stop\n 2103  \tend subroutine\n ....\n 2147  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2148  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 2149: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2150  \t\tcall error_stop\n 2151  \tend subroutine\n ....\n 2155  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2156  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 2157: \t\tcall writemess('ERROR type when setting, real=character ')\n 2158  \t\tcall error_stop\n 2159  \tend subroutine\n ....\n 2203  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2204  \t\tlogical,intent(in)::value\n 2205: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2206  \t\tcall error_stop\n 2207  \tend subroutine\n ....\n 2211  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2212  \t\tcharacter(len=*),intent(in)::value\n 2213: \t\tcall writemess('ERROR type when setting, real=character ')\n 2214  \t\tcall error_stop\n 2215  \tend subroutine\n ....\n 2259  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2260  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2261: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2262  \t\tcall error_stop\n 2263  \t\treturn\n ....\n 2268  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2269  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2270: \t\tcall writemess('ERROR type when setting, real=character ')\n 2271  \t\tcall error_stop\n 2272  \t\treturn\n ....\n 2320  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2321  \t\tlogical,intent(in)::value\n 2322: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2323  \t\tcall error_stop\n 2324  \tend subroutine\n ....\n 2328  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2329  \t\tcharacter(len=*),intent(in)::value\n 2330: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2331  \t\tcall error_stop\n 2332  \tend subroutine\n ....\n 2376  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2377  \t\tlogical,intent(in)::value(LenV)\n 2378: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2379  \t\tcall error_stop\n 2380  \tend subroutine\n ....\n 2384  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2385  \t\tcharacter(len=*),intent(in)::value(LenV)\n 2386: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2387  \t\tcall error_stop\n 2388  \tend subroutine\n ....\n 2432  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2433  \t\tlogical,intent(in)::value\n 2434: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2435  \t\tcall error_stop\n 2436  \tend subroutine\n ....\n 2440  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2441  \t\tcharacter(len=*),intent(in)::value\n 2442: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2443  \t\tcall error_stop\n 2444  \tend subroutine\n ....\n 2488  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2489  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 2490: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2491  \t\tcall error_stop\n 2492  \tend subroutine\n ....\n 2496  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2497  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 2498: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2499  \t\tcall error_stop\n 2500  \tend subroutine\n ....\n 2544  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2545  \t\tlogical,intent(in)::value\n 2546: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2547  \t\tcall error_stop\n 2548  \tend subroutine\n ....\n 2552  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2553  \t\tcharacter(len=*),intent(in)::value\n 2554: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2555  \t\tcall error_stop\n 2556  \tend subroutine\n ....\n 2600  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2601  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 2602: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2603  \t\tcall error_stop\n 2604  \tend subroutine\n ....\n 2608  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2609  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 2610: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2611  \t\tcall error_stop\n 2612  \tend subroutine\n ....\n 2656  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2657  \t\tlogical,intent(in)::value\n 2658: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2659  \t\tcall error_stop\n 2660  \tend subroutine\n ....\n 2664  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2665  \t\tcharacter(len=*),intent(in)::value\n 2666: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2667  \t\tcall error_stop\n 2668  \tend subroutine\n ....\n 2712  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2713  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2714: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2715  \t\tcall error_stop\n 2716  \t\treturn\n ....\n 2721  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2722  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2723: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2724  \t\tcall error_stop\n 2725  \t\treturn\n ....\n 2773  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2774  \t\tlogical,intent(in)::value\n 2775: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2776  \t\tcall error_stop\n 2777  \tend subroutine\n ....\n 2781  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2782  \t\tcharacter(len=*),intent(in)::value\n 2783: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2784  \t\tcall error_stop\n 2785  \tend subroutine\n ....\n 2829  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2830  \t\tlogical,intent(in)::value(LenV)\n 2831: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2832  \t\tcall error_stop\n 2833  \tend subroutine\n ....\n 2837  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2838  \t\tcharacter(len=*),intent(in)::value(LenV)\n 2839: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2840  \t\tcall error_stop\n 2841  \tend subroutine\n ....\n 2885  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2886  \t\tlogical,intent(in)::value\n 2887: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2888  \t\tcall error_stop\n 2889  \tend subroutine\n ....\n 2893  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2894  \t\tcharacter(len=*),intent(in)::value\n 2895: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2896  \t\tcall error_stop\n 2897  \tend subroutine\n ....\n 2941  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2942  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 2943: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2944  \t\tcall error_stop\n 2945  \tend subroutine\n ....\n 2949  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2950  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 2951: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2952  \t\tcall error_stop\n 2953  \tend subroutine\n ....\n 2997  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2998  \t\tlogical,intent(in)::value\n 2999: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3000  \t\tcall error_stop\n 3001  \tend subroutine\n ....\n 3005  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 3006  \t\tcharacter(len=*),intent(in)::value\n 3007: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3008  \t\tcall error_stop\n 3009  \tend subroutine\n ....\n 3053  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 3054  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 3055: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3056  \t\tcall error_stop\n 3057  \tend subroutine\n ....\n 3061  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 3062  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 3063: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3064  \t\tcall error_stop\n 3065  \tend subroutine\n ....\n 3109  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3110  \t\tlogical,intent(in)::value\n 3111: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3112  \t\tcall error_stop\n 3113  \tend subroutine\n ....\n 3117  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3118  \t\tcharacter(len=*),intent(in)::value\n 3119: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3120  \t\tcall error_stop\n 3121  \tend subroutine\n ....\n 3165  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3166  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3167: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3168  \t\tcall error_stop\n 3169  \t\treturn\n ....\n 3174  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3175  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3176: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3177  \t\tcall error_stop\n 3178  \t\treturn\n ....\n 3186  \t\tlogical,intent(inout)::Tdata(LenT)\n 3187  \t\tinteger,intent(in)::value\n 3188: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3189  \t\tcall error_stop\n 3190  \tend subroutine\n ....\n 3194  \t\tlogical,intent(inout)::Tdata(LenT)\n 3195  \t\treal(kind=4),intent(in)::value\n 3196: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3197  \t\tcall error_stop\n 3198  \tend subroutine\n ....\n 3202  \t\tlogical,intent(inout)::Tdata(LenT)\n 3203  \t\treal(kind=8),intent(in)::value\n 3204: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3205  \t\tcall error_stop\n 3206  \tend subroutine\n ....\n 3210  \t\tlogical,intent(inout)::Tdata(LenT)\n 3211  \t\tcomplex(kind=4),intent(in)::value\n 3212: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3213  \t\tcall error_stop\n 3214  \tend subroutine\n ....\n 3218  \t\tlogical,intent(inout)::Tdata(LenT)\n 3219  \t\tcomplex(kind=8),intent(in)::value\n 3220: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3221  \t\tcall error_stop\n 3222  \tend subroutine\n ....\n 3234  \t\tlogical,intent(inout)::Tdata(LenT)\n 3235  \t\tcharacter(len=*),intent(in)::value\n 3236: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3237  \t\tcall error_stop\n 3238  \tend subroutine\n ....\n 3242  \t\tlogical,intent(inout)::Tdata(LenT)\n 3243  \t\tinteger,intent(in)::value(LenV)\n 3244: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3245  \t\tcall error_stop\n 3246  \tend subroutine\n ....\n 3250  \t\tlogical,intent(inout)::Tdata(LenT)\n 3251  \t\treal(kind=4),intent(in)::value(LenV)\n 3252: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3253  \t\tcall error_stop\n 3254  \tend subroutine\n ....\n 3258  \t\tlogical,intent(inout)::Tdata(LenT)\n 3259  \t\treal(kind=8),intent(in)::value(LenV)\n 3260: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3261  \t\tcall error_stop\n 3262  \tend subroutine\n ....\n 3266  \t\tlogical,intent(inout)::Tdata(LenT)\n 3267  \t\tcomplex(kind=4),intent(in)::value(LenV)\n 3268: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3269  \t\tcall error_stop\n 3270  \tend subroutine\n ....\n 3274  \t\tlogical,intent(inout)::Tdata(LenT)\n 3275  \t\tcomplex(kind=8),intent(in)::value(LenV)\n 3276: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3277  \t\tcall error_stop\n 3278  \tend subroutine\n ....\n 3290  \t\tlogical,intent(inout)::Tdata(LenT)\n 3291  \t\tcharacter(len=*),intent(in)::value(LenV)\n 3292: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3293  \t\tcall error_stop\n 3294  \tend subroutine\n ....\n 3298  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3299  \t\tinteger,intent(in)::value\n 3300: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3301  \t\tcall error_stop\n 3302  \tend subroutine\n ....\n 3306  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3307  \t\treal(kind=4),intent(in)::value\n 3308: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3309  \t\tcall error_stop\n 3310  \tend subroutine\n ....\n 3314  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3315  \t\treal(kind=8),intent(in)::value\n 3316: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3317  \t\tcall error_stop\n 3318  \tend subroutine\n ....\n 3322  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3323  \t\tcomplex(kind=4),intent(in)::value\n 3324: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3325  \t\tcall error_stop\n 3326  \tend subroutine\n ....\n 3330  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3331  \t\tcomplex(kind=8),intent(in)::value\n 3332: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3333  \t\tcall error_stop\n 3334  \tend subroutine\n ....\n 3346  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3347  \t\tcharacter(len=*),intent(in)::value\n 3348: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3349  \t\tcall error_stop\n 3350  \tend subroutine\n ....\n 3354  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3355  \t\tinteger,intent(in)::value(LDV1,LDV2)\n 3356: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3357  \t\tcall error_stop\n 3358  \tend subroutine\n ....\n 3362  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3363  \t\treal(kind=4),intent(in)::value(LDV1,LDV2)\n 3364: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3365  \t\tcall error_stop\n 3366  \tend subroutine\n ....\n 3370  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3371  \t\treal(kind=8),intent(in)::value(LDV1,LDV2)\n 3372: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3373  \t\tcall error_stop\n 3374  \tend subroutine\n ....\n 3378  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3379  \t\tcomplex(kind=4),intent(in)::value(LDV1,LDV2)\n 3380: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3381  \t\tcall error_stop\n 3382  \tend subroutine\n ....\n 3386  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3387  \t\tcomplex(kind=8),intent(in)::value(LDV1,LDV2)\n 3388: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3389  \t\tcall error_stop\n 3390  \tend subroutine\n ....\n 3402  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3403  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 3404: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3405  \t\tcall error_stop\n 3406  \tend subroutine\n ....\n 3410  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3411  \t\tinteger,intent(in)::value\n 3412: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3413  \t\tcall error_stop\n 3414  \tend subroutine\n ....\n 3418  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3419  \t\treal(kind=4),intent(in)::value\n 3420: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3421  \t\tcall error_stop\n 3422  \tend subroutine\n ....\n 3426  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3427  \t\treal(kind=8),intent(in)::value\n 3428: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3429  \t\tcall error_stop\n 3430  \tend subroutine\n ....\n 3434  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3435  \t\tcomplex(kind=4),intent(in)::value\n 3436: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3437  \t\tcall error_stop\n 3438  \tend subroutine\n ....\n 3442  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3443  \t\tcomplex(kind=8),intent(in)::value\n 3444: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3445  \t\tcall error_stop\n 3446  \tend subroutine\n ....\n 3458  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3459  \t\tcharacter(len=*),intent(in)::value\n 3460: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3461  \t\tcall error_stop\n 3462  \tend subroutine\n ....\n 3466  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3467  \t\tinteger,intent(in)::value(LDV1,LDV2,LDV3)\n 3468: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3469  \t\tcall error_stop\n 3470  \tend subroutine\n ....\n 3474  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3475  \t\treal(kind=4),intent(in)::value(LDV1,LDV2,LDV3)\n 3476: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3477  \t\tcall error_stop\n 3478  \tend subroutine\n ....\n 3482  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3483  \t\treal(kind=8),intent(in)::value(LDV1,LDV2,LDV3)\n 3484: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3485  \t\tcall error_stop\n 3486  \tend subroutine\n ....\n 3490  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3491  \t\tcomplex(kind=4),intent(in)::value(LDV1,LDV2,LDV3)\n 3492: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3493  \t\tcall error_stop\n 3494  \tend subroutine\n ....\n 3498  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3499  \t\tcomplex(kind=8),intent(in)::value(LDV1,LDV2,LDV3)\n 3500: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3501  \t\tcall error_stop\n 3502  \tend subroutine\n ....\n 3514  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3515  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 3516: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3517  \t\tcall error_stop\n 3518  \tend subroutine\n ....\n 3522  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3523  \t\tinteger,intent(in)::value\n 3524: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3525  \t\tcall error_stop\n 3526  \tend subroutine\n ....\n 3530  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3531  \t\treal(kind=4),intent(in)::value\n 3532: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3533  \t\tcall error_stop\n 3534  \tend subroutine\n ....\n 3538  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3539  \t\treal(kind=8),intent(in)::value\n 3540: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3541  \t\tcall error_stop\n 3542  \tend subroutine\n ....\n 3546  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3547  \t\tcomplex(kind=4),intent(in)::value\n 3548: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3549  \t\tcall error_stop\n 3550  \tend subroutine\n ....\n 3554  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3555  \t\tcomplex(kind=8),intent(in)::value\n 3556: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3557  \t\tcall error_stop\n 3558  \tend subroutine\n ....\n 3570  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3571  \t\tcharacter(len=*),intent(in)::value\n 3572: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3573  \t\tcall error_stop\n 3574  \tend subroutine\n ....\n 3578  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3579  \t\tinteger,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3580: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3581  \t\tcall error_stop\n 3582  \tend subroutine\n ....\n 3586  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3587  \t\treal(kind=4),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3588: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3589  \t\tcall error_stop\n 3590  \tend subroutine\n ....\n 3594  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3595  \t\treal(kind=8),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3596: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3597  \t\tcall error_stop\n 3598  \tend subroutine\n ....\n 3602  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3603  \t\tcomplex(kind=4),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3604: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3605  \t\tcall error_stop\n 3606  \tend subroutine\n ....\n 3610  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3611  \t\tcomplex(kind=8),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3612: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3613  \t\tcall error_stop\n 3614  \tend subroutine\n ....\n 3626  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3627  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3628: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3629  \t\tcall error_stop\n 3630  \t\treturn\n ....\n 4266  \t\tinteger,intent(inout)::A(LDA)\n 4267  \t\tlogical,intent(in)::B(LDB)\n 4268: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 4269  \t\tcall error_stop\n 4270  \tend subroutine\n ....\n 4274  \t\tinteger,intent(inout)::A(LDA)\n 4275  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4276: \t\tcall writemess('ERROR type when setting, integer=character ')\n 4277  \t\tcall error_stop\n 4278  \tend subroutine\n ....\n 4325  \t\treal(kind=4),intent(inout)::A(LDA)\n 4326  \t\tlogical,intent(in)::B(LDB)\n 4327: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4328  \t\tcall error_stop\n 4329  \tend subroutine\n ....\n 4333  \t\treal(kind=4),intent(inout)::A(LDA)\n 4334  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4335: \t\tcall writemess('ERROR type when setting, real=character ')\n 4336  \t\tcall error_stop\n 4337  \tend subroutine\n ....\n 4384  \t\treal(kind=8),intent(inout)::A(LDA)\n 4385  \t\tlogical,intent(in)::B(LDB)\n 4386: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4387  \t\tcall error_stop\n 4388  \tend subroutine\n ....\n 4392  \t\treal(kind=8),intent(inout)::A(LDA)\n 4393  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4394: \t\tcall writemess('ERROR type when setting, real=character ')\n 4395  \t\tcall error_stop\n 4396  \tend subroutine\n ....\n 4443  \t\tcomplex(kind=4),intent(inout)::A(LDA)\n 4444  \t\tlogical,intent(in)::B(LDB)\n 4445: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4446  \t\tcall error_stop\n 4447  \tend subroutine\n ....\n 4451  \t\tcomplex(kind=4),intent(inout)::A(LDA)\n 4452  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4453: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4454  \t\tcall error_stop\n 4455  \tend subroutine\n ....\n 4502  \t\tcomplex(kind=8),intent(inout)::A(LDA)\n 4503  \t\tlogical,intent(in)::B(LDB)\n 4504: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4505  \t\tcall error_stop\n 4506  \tend subroutine\n ....\n 4510  \t\tcomplex(kind=8),intent(inout)::A(LDA)\n 4511  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4512: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4513  \t\tcall error_stop\n 4514  \tend subroutine\n ....\n 4520  \t\tlogical,intent(inout)::A(LDA)\n 4521  \t\tinteger,intent(in)::B(LDB)\n 4522: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4523  \t\tcall error_stop\n 4524  \tend subroutine\n ....\n 4528  \t\tlogical,intent(inout)::A(LDA)\n 4529  \t\treal(kind=4),intent(in)::B(LDB)\n 4530: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4531  \t\tcall error_stop\n 4532  \tend subroutine\n ....\n 4536  \t\tlogical,intent(inout)::A(LDA)\n 4537  \t\treal(kind=8),intent(in)::B(LDB)\n 4538: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4539  \t\tcall error_stop\n 4540  \tend subroutine\n ....\n 4544  \t\tlogical,intent(inout)::A(LDA)\n 4545  \t\tcomplex(kind=4),intent(in)::B(LDB)\n 4546: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4547  \t\tcall error_stop\n 4548  \tend subroutine\n ....\n 4552  \t\tlogical,intent(inout)::A(LDA)\n 4553  \t\tcomplex(kind=8),intent(in)::B(LDB)\n 4554: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4555  \t\tcall error_stop\n 4556  \tend subroutine\n ....\n 4568  \t\tlogical,intent(inout)::A(LDA)\n 4569  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4570: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4571  \t\tcall error_stop\n 4572  \tend subroutine\n ....\n 4682  \t\tinteger,intent(inout)::A(LDA,LDA2)\n 4683  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4684: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 4685  \t\tcall error_stop\n 4686  \tend subroutine\n ....\n 4690  \t\tinteger,intent(inout)::A(LDA,LDA2)\n 4691  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4692: \t\tcall writemess('ERROR type when setting, integer=character ')\n 4693  \t\tcall error_stop\n 4694  \tend subroutine\n ....\n 4740  \t\treal(kind=4),intent(inout)::A(LDA,LDA2)\n 4741  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4742: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4743  \t\tcall error_stop\n 4744  \tend subroutine\n ....\n 4748  \t\treal(kind=4),intent(inout)::A(LDA,LDA2)\n 4749  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4750: \t\tcall writemess('ERROR type when setting, real=character ')\n 4751  \t\tcall error_stop\n 4752  \tend subroutine\n ....\n 4798  \t\treal(kind=8),intent(inout)::A(LDA,LDA2)\n 4799  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4800: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4801  \t\tcall error_stop\n 4802  \tend subroutine\n ....\n 4806  \t\treal(kind=8),intent(inout)::A(LDA,LDA2)\n 4807  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4808: \t\tcall writemess('ERROR type when setting, real=character ')\n 4809  \t\tcall error_stop\n 4810  \tend subroutine\n ....\n 4856  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2)\n 4857  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4858: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4859  \t\tcall error_stop\n 4860  \tend subroutine\n ....\n 4864  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2)\n 4865  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4866: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4867  \t\tcall error_stop\n 4868  \tend subroutine\n ....\n 4914  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2)\n 4915  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4916: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4917  \t\tcall error_stop\n 4918  \tend subroutine\n ....\n 4922  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2)\n 4923  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4924: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4925  \t\tcall error_stop\n 4926  \tend subroutine\n ....\n 4932  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4933  \t\tinteger,intent(in)::B(LDB,LDB2)\n 4934: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4935  \t\tcall error_stop\n 4936  \tend subroutine\n ....\n 4940  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4941  \t\treal*4,intent(in)::B(LDB,LDB2)\n 4942: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4943  \t\tcall error_stop\n 4944  \tend subroutine\n ....\n 4948  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4949  \t\treal*8,intent(in)::B(LDB,LDB2)\n 4950: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4951  \t\tcall error_stop\n 4952  \tend subroutine\n ....\n 4956  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4957  \t\tcomplex*8,intent(in)::B(LDB,LDB2)\n 4958: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4959  \t\tcall error_stop\n 4960  \tend subroutine\n ....\n 4964  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4965  \t\tcomplex*16,intent(in)::B(LDB,LDB2)\n 4966: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4967  \t\tcall error_stop\n 4968  \tend subroutine\n ....\n 4980  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4981  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4982: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4983  \t\tcall error_stop\n 4984  \tend subroutine\n ....\n 5114  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3)\n 5115  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5116: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 5117  \t\tcall error_stop\n 5118  \tend subroutine\n ....\n 5122  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3)\n 5123  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5124: \t\tcall writemess('ERROR type when setting, integer=character ')\n 5125  \t\tcall error_stop\n 5126  \tend subroutine\n ....\n 5172  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5173  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5174: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5175  \t\tcall error_stop\n 5176  \tend subroutine\n ....\n 5180  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5181  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5182: \t\tcall writemess('ERROR type when setting, real=character ')\n 5183  \t\tcall error_stop\n 5184  \tend subroutine\n ....\n 5230  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5231  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5232: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5233  \t\tcall error_stop\n 5234  \tend subroutine\n ....\n 5238  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5239  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5240: \t\tcall writemess('ERROR type when setting, real=character ')\n 5241  \t\tcall error_stop\n 5242  \tend subroutine\n ....\n 5288  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5289  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5290: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5291  \t\tcall error_stop\n 5292  \tend subroutine\n ....\n 5296  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5297  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5298: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5299  \t\tcall error_stop\n 5300  \tend subroutine\n ....\n 5346  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5347  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5348: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5349  \t\tcall error_stop\n 5350  \tend subroutine\n ....\n 5354  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5355  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5356: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5357  \t\tcall error_stop\n 5358  \tend subroutine\t\n ....\n 5364  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5365  \t\tinteger,intent(in)::B(LDB,LDB2,LDB3)\n 5366: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5367  \t\tcall error_stop\t\t\n 5368  \tend subroutine\n ....\n 5372  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5373  \t\treal(kind=4),intent(in)::B(LDB,LDB2,LDB3)\n 5374: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5375  \t\tcall error_stop\t\t\n 5376  \tend subroutine\n ....\n 5380  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5381  \t\treal(kind=8),intent(in)::B(LDB,LDB2,LDB3)\n 5382: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5383  \t\tcall error_stop\t\t\n 5384  \tend subroutine\n ....\n 5388  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5389  \t\tcomplex(kind=4),intent(in)::B(LDB,LDB2,LDB3)\n 5390: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5391  \t\tcall error_stop\t\t\n 5392  \tend subroutine\n ....\n 5396  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5397  \t\tcomplex(kind=8),intent(in)::B(LDB,LDB2,LDB3)\n 5398: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5399  \t\tcall error_stop\t\t\n 5400  \tend subroutine\n ....\n 5412  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5413  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5414: \t\tcall writemess('ERROR type when setting, logical=character ')\n 5415  \t\tcall error_stop\n 5416  \tend subroutine\n ....\n 5556  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5557  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5558: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 5559  \t\tcall error_stop\n 5560  \tend subroutine\n ....\n 5564  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5565  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5566: \t\tcall writemess('ERROR type when setting, integer=character ')\n 5567  \t\tcall error_stop\n 5568  \tend subroutine\n ....\n 5614  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5615  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5616: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5617  \t\tcall error_stop\n 5618  \tend subroutine\n ....\n 5622  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5623  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5624: \t\tcall writemess('ERROR type when setting, real=character ')\n 5625  \t\tcall error_stop\n 5626  \tend subroutine\n ....\n 5673  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5674  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5675: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5676  \t\tcall error_stop\n 5677  \tend subroutine\n ....\n 5681  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5682  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5683: \t\tcall writemess('ERROR type when setting, real=character ')\n 5684  \t\tcall error_stop\n 5685  \tend subroutine\n ....\n 5732  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5733  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5734: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5735  \t\tcall error_stop\n 5736  \tend subroutine\n ....\n 5740  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5741  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5742: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5743  \t\tcall error_stop\n 5744  \tend subroutine\n ....\n 5791  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5792  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5793: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5794  \t\tcall error_stop\n 5795  \tend subroutine\n ....\n 5799  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5800  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5801: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5802  \t\tcall error_stop\n 5803  \tend subroutine\n ....\n 5810  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5811  \t\tinteger,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5812: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5813  \t\tcall error_stop\n 5814  \tend subroutine\t\n ....\n 5818  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5819  \t\treal(kind=4),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5820: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5821  \t\tcall error_stop\n 5822  \tend subroutine\t\n ....\n 5826  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5827  \t\treal(kind=8),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5828: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5829  \t\tcall error_stop\n 5830  \tend subroutine\n ....\n 5834  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5835  \t\tcomplex(kind=4),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5836: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5837  \t\tcall error_stop\n 5838  \tend subroutine\n ....\n 5842  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5843  \t\tcomplex(kind=8),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5844: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5845  \t\tcall error_stop\n 5846  \tend subroutine\n ....\n 5858  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5859  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5860: \t\tcall writemess('ERROR type when setting, logical=character ')\n 5861  \t\tcall error_stop\n 5862  \tend subroutine\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/OtherFunction.f90:\n  160  \t\tinteger::minm,minn,classType\n  161  \t\tif(A%getRank().ne.2)then\n  162: \t\t\tcall writemess('resetMatrixDim only work on matrix (rank=2)')\n  163  \t\t\tcall error_stop\n  164  \t\tend if\n  ...\n  249  \t\tp2=>outTensor\n  250  \t\tif(associated(p1,p2))then\n  251: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,input Tensor and output Tensor can not be the same one',-1)\n  252  \t\t\tcall error_stop\n  253  \t\tend if\n  ...\n  258  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  259  \t\tif(.not.ALLgoonFlag)then\n  260: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,the is no date in one or some Tensors',-1)\n  261  \t\t\tcall error_stop\n  262  \t\tend if\n  ...\n  268  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  269  \t\tif(.not.ALLgoonFlag)then\n  270: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,the Data type in the Tensors are not the sames',-1)\n  271  \t\t\tcall error_stop\n  272  \t\tend if\n  ...\n  278  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  279  \t\tif(.not.ALLgoonFlag)then\n  280: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,the length od the Tensor is not the same',-1)\n  281  \t\t\tcall error_stop\n  282  \t\tend if\n  ...\n  348  \t\tp2=>outTensor\n  349  \t\tif(associated(p1,p2))then\n  350: \t\t\tcall writemess('ERROR in REDUCE_Tensor,input Tensor and output Tensor can not be the same one',-1)\n  351  \t\t\tcall error_stop\n  352  \t\tend if\n  ...\n  357  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  358  \t\tif(.not.ALLgoonFlag)then\n  359: \t\t\tcall writemess('ERROR in REDUCE_Tensor,the is no date in one or some Tensors',-1)\n  360  \t\t\tcall error_stop\n  361  \t\tend if\n  ...\n  367  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  368  \t\tif(.not.ALLgoonFlag)then\n  369: \t\t\tcall writemess('ERROR in REDUCE_Tensor,the Data type in the Tensors are not the sames',-1)\n  370  \t\t\tcall error_stop\n  371  \t\tend if\n  ...\n  377  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  378  \t\tif(.not.ALLgoonFlag)then\n  379: \t\t\tcall writemess('ERROR in REDUCE_Tensor,the length od the Tensor is not the same',-1)\n  380  \t\t\tcall error_stop\n  381  \t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/parameter.f90:\n   77  \tend type\n   78  \t\n   79: \tpublic::writemess\n   80: \tinterface writemess\n   81  \t\tmodule procedure writeoparametemess\n   82  \tend interface\n   ..\n  117  \t\ttype(Tensor),intent(in)::A,B\n  118  \t\tif(A%getType().ne.7)then\n  119: \t\t\tcall writemess(' ERROR in constructor of list,list(A,B), A should be a Tensor of character',-1)\n  120  \t\t\tcall error_stop\n  121  \t\tend if\n  122  \t\tif(A%getTotalData().ne.B%getTotalData())then\n  123: \t\t\tcall writemess(' ERROR in constructor of list,list(A,B)',-1)\n  124  \t\t\tcall error_stop\n  125  \t\tend if\n  ...\n  134  \t\t\n  135  \t\tif(size(A).ne.B%getTotalData())then\n  136: \t\t\tcall writemess(' ERROR in constructor of list,list(A,B)',-1)\n  137  \t\t\tcall error_stop\n  138  \t\tend if\n  ...\n  151  \t\t\tdo j=i+1,p%name%gettotalData()\n  152  \t\t\t\tif(w.equ.p%name%ai(j))then\n  153: \t\t\t\t\tcall writemess('There are two element in the List have the same names')\n  154: \t\t\t\t\tcall writemess('the ith='+i+',and ith='+j+' are the same')\n  155  \t\t\t\t\tcall p%print()\n  156  \t\t\t\t\tcall error_stop\n  ...\n  203  \t\ttype(Tensor),intent(in)::arrayTensor(:)\n  204  \t\tif(size(arrayTensor).ne.2)then\n  205: \t\t\tcall writemess('ERROR in (=) for type(List)',-1)\n  206  \t\t\tcall error_stop\n  207  \t\tend if\n  208  \t\tif(arrayTensor(1)%getType().ne.7)then\n  209: \t\t\tcall writemess('ERROR in (=) for type(List), the name should be character',-1)\n  210  \t\t\tcall error_stop\n  211  \t\tend if\n  212  \t\tpinout%length=arrayTensor(1)%getTotalData()\n  213  \t\tif(pinout%length.ne.arrayTensor(2)%getTotalData())then\n  214: \t\t\tcall writemess('ERROR in (=) for type(List), ERROR LENGTH',-1)\n  215  \t\t\tcall error_stop\n  216  \t\tend if\n  ...\n  286  \t\tinteger,intent(in)::ith\n  287  \t\tif(val%getTotalData().ne.1)then\n  288: \t\t\tcall writemess('ERROR in setvalue to a list')\n  289: \t\t\tcall writemess('input a Tensor, the length should be 1')\n  290  \t\t\tcall error_stop\n  291  \t\tend if\n  ...\n  302  \t\tith=p%name%which(namei)\n  303  \t\tif(ith.eq.0)then\n  304: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  305: \t\t\tcall writemess('The Name is'+(' '+namei))\n  306  \t\t\tcall error_stop\n  307  \t\tend if\n  ...\n  317  \t\tith=p%name%which(namei)\n  318  \t\tif(ith.eq.0)then\n  319: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  320: \t\t\tcall writemess('The Name is'+(' '+namei))\n  321  \t\t\tcall error_stop\n  322  \t\tend if\n  ...\n  332  \t\tith=p%name%which(namei)\n  333  \t\tif(ith.eq.0)then\n  334: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  335: \t\t\tcall writemess('The Name is'+(' '+namei))\n  336  \t\t\tcall error_stop\n  337  \t\tend if\n  ...\n  347  \t\tith=p%name%which(namei)\n  348  \t\tif(ith.eq.0)then\n  349: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  350: \t\t\tcall writemess('The Name is'+(' '+namei))\n  351  \t\t\tcall error_stop\n  352  \t\tend if\n  ...\n  362  \t\tith=p%name%which(namei)\n  363  \t\tif(ith.eq.0)then\n  364: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  365: \t\t\tcall writemess('The Name is'+(' '+namei))\n  366  \t\t\tcall error_stop\n  367  \t\tend if\n  ...\n  377  \t\tith=p%name%which(namei)\n  378  \t\tif(ith.eq.0)then\n  379: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  380: \t\t\tcall writemess('The Name is'+(' '+namei))\n  381  \t\t\tcall error_stop\n  382  \t\tend if\n  ...\n  392  \t\tith=p%name%which(namei)\n  393  \t\tif(ith.eq.0)then\n  394: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  395: \t\t\tcall writemess('The Name is'+(' '+namei))\n  396  \t\t\tcall error_stop\n  397  \t\tend if\n  ...\n  407  \t\tith=p%name%which(namei)\n  408  \t\tif(ith.eq.0)then\n  409: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  410: \t\t\tcall writemess('The Name is'+(' '+namei))\n  411  \t\t\tcall error_stop\n  412  \t\tend if\n  413  \t\tif(val%getTotalData().ne.1)then\n  414: \t\t\tcall writemess('ERROR in setvalue to a list',-1)\n  415: \t\t\tcall writemess('input a Tensor, the length should be 1',-1)\n  416  \t\t\tcall error_stop\n  417  \t\tend if\n  ...\n  428  \t\tend if\n  429  \t\tif(p%length.ne.size(val))then\n  430: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  431  \t\t\tcall error_stop\n  432  \t\tend if\n  ...\n  443  \t\tend if\n  444  \t\tif(p%length.ne.size(val))then\n  445: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  446  \t\t\tcall error_stop\n  447  \t\tend if\n  ...\n  458  \t\tend if\n  459  \t\tif(p%length.ne.size(val))then\n  460: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  461  \t\t\tcall error_stop\n  462  \t\tend if\n  ...\n  473  \t\tend if\n  474  \t\tif(p%length.ne.size(val))then\n  475: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  476  \t\t\tcall error_stop\n  477  \t\tend if\n  ...\n  488  \t\tend if\n  489  \t\tif(p%length.ne.size(val))then\n  490: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  491  \t\t\tcall error_stop\n  492  \t\tend if\n  ...\n  503  \t\tend if\n  504  \t\tif(p%length.ne.size(val))then\n  505: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  506  \t\t\tcall error_stop\n  507  \t\tend if\n  ...\n  518  \t\tend if\n  519  \t\tif(p%length.ne.size(val))then\n  520: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  521  \t\t\tcall error_stop\n  522  \t\tend if\n  ...\n  533  \t\tend if\n  534  \t\tif(p%length.ne.val%getTotalData())then\n  535: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  536  \t\t\tcall error_stop\n  537  \t\tend if\n  ...\n  544  \t\tcharacter(len=*),intent(in)::Allnamei(:)\n  545  \t\tif(p%length.eq.0)then\n  546: \t\t\tcall writemess('ERROR Name length in initial parameter,Do not allocate parameter yet',-1)\n  547  \t\t\tcall error_stop\n  548  \t\tend if\n  549  \t\tif(size(Allnamei).ne.p%length)then\n  550: \t\t\tcall writemess('ERROR Name length in initial parameter',-1)\n  551  \t\t\tcall error_stop\n  552  \t\tend if\n  ...\n  559  \t\tcharacter(len=*),intent(in)::Allnamei\n  560  \t\tif(ith.gt.p%length)then\n  561: \t\t\tcall writemess('ERROR Name length in initial parameter',-1)\n  562  \t\t\tcall error_stop\n  563  \t\tend if\n  564  \t\tif(ith.le.0)then\n  565: \t\t\tcall writemess('ERROR in setting Name integer list,ith<=0',-1)\n  566  \t\t\tcall error_stop\n  567  \t\tend if\n  ...\n  574  \t\tinteger::ith\n  575  \t\tif(.not.p%getFlag())then\n  576: \t\t\tcall writemess('The List is empty')\n  577  \t\t\tcall error_stop\n  578  \t\tend if\n  579  \t\tith=p%name%which(oldName)\n  580  \t\tif(ith.eq.0)then\n  581: \t\t\tcall writemess('Can not Find the name in the list')\n  582: \t\t\tcall writemess('name='+oldName)\n  583  \t\t\tcall error_stop\n  584  \t\tend if\n  ...\n  601  \t\tinteger::ith\n  602  \t\tif(.not.p%getFlag())then\n  603: \t\t\tcall writemess('The List is empty')\n  604  \t\t\tcall error_stop\n  605  \t\tend if\n  ...\n  620  \t\tinteger,intent(in)::ith\n  621  \t\tif(p%length.eq.0)then\n  622: \t\t\tcall writemess('The list is empty',-1)\n  623  \t\t\tcall error_stop\n  624  \t\tend if\n  ...\n  631  \t\tinteger::ith\n  632  \t\tif(p%length.eq.0)then\n  633: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  634: \t\t\tcall writemess('The Name is'+(' '+namei))\n  635: \t\t\tcall writemess('The list is empty')\n  636  \t\t\tcall error_stop\n  637  \t\tend if\n  638  \t\tith=p%name%which(namei)\n  639  \t\tif(ith.eq.0)then\n  640: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  641: \t\t\tcall writemess('The Name is'+(' '+namei))\n  642  \t\t\tcall error_stop\n  643  \t\tend if\n  ...\n  649  \t\tinteger,intent(in)::ith\n  650  \t\tif(p%length.eq.0)then\n  651: \t\t\tcall writemess('The list is empty')\n  652  \t\t\tcall error_stop\n  653  \t\tend if\n  ...\n  660  \t\tinteger::ith\n  661  \t\tif(p%length.eq.0)then\n  662: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  663: \t\t\tcall writemess('The Name is'+(' '+namei))\n  664: \t\t\tcall writemess('The list is empty')\n  665  \t\t\tcall error_stop\n  666  \t\tend if\n  667  \t\tith=p%name%which(namei)\n  668  \t\tif(ith.eq.0)then\n  669: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  670: \t\t\tcall writemess('The Name is'+(' '+namei))\n  671  \t\t\tcall error_stop\n  672  \t\tend if\n  ...\n  678  \t\tinteger,intent(in)::ith\n  679  \t\tif(p%length.eq.0)then\n  680: \t\t\tcall writemess('The list is empty')\n  681  \t\t\tcall error_stop\n  682  \t\tend if\n  ...\n  689  \t\tinteger::ith\n  690  \t\tif(p%length.eq.0)then\n  691: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  692: \t\t\tcall writemess('The Name is'+(' '+namei))\n  693: \t\t\tcall writemess('The list is empty')\n  694  \t\t\tcall error_stop\n  695  \t\tend if\n  696  \t\tith=p%name%which(namei)\n  697  \t\tif(ith.eq.0)then\n  698: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  699: \t\t\tcall writemess('The Name is'+(' '+namei))\n  700  \t\t\tcall error_stop\n  701  \t\tend if\n  ...\n  707  \t\tinteger,intent(in)::ith\n  708  \t\tif(p%length.eq.0)then\n  709: \t\t\tcall writemess('The list is empty')\n  710  \t\t\tcall error_stop\n  711  \t\tend if\n  ...\n  718  \t\tinteger::ith\n  719  \t\tif(p%length.eq.0)then\n  720: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  721: \t\t\tcall writemess('The Name is'+(' '+namei))\n  722: \t\t\tcall writemess('The list is empty')\n  723  \t\t\tcall error_stop\n  724  \t\tend if\n  725  \t\tith=p%name%which(namei)\n  726  \t\tif(ith.eq.0)then\n  727: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  728: \t\t\tcall writemess('The Name is'+(' '+namei))\n  729  \t\t\tcall error_stop\n  730  \t\tend if\n  ...\n  736  \t\tinteger,intent(in)::ith\n  737  \t\tif(p%length.eq.0)then\n  738: \t\t\tcall writemess('The list is empty')\n  739  \t\t\tcall error_stop\n  740  \t\tend if\n  ...\n  747  \t\tinteger::ith\n  748  \t\tif(p%length.eq.0)then\n  749: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  750: \t\t\tcall writemess('The Name is'+(' '+namei))\n  751: \t\t\tcall writemess('The list is empty')\n  752  \t\t\tcall error_stop\n  753  \t\tend if\n  754  \t\tith=p%name%which(namei)\n  755  \t\tif(ith.eq.0)then\n  756: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  757: \t\t\tcall writemess('The Name is'+(' '+namei))\n  758  \t\t\tcall error_stop\n  759  \t\tend if\n  ...\n  765  \t\tinteger,intent(in)::ith\n  766  \t\tif(p%length.eq.0)then\n  767: \t\t\tcall writemess('The list is empty')\n  768  \t\t\tcall error_stop\n  769  \t\tend if\n  ...\n  776  \t\tinteger::ith\n  777  \t\tif(p%length.eq.0)then\n  778: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  779: \t\t\tcall writemess('The Name is'+(' '+namei))\n  780: \t\t\tcall writemess('The list is empty')\n  781  \t\t\tcall error_stop\n  782  \t\tend if\n  783  \t\tith=p%name%which(namei)\n  784  \t\tif(ith.eq.0)then\n  785: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  786: \t\t\tcall writemess('The Name is'+(' '+namei))\n  787  \t\t\tcall error_stop\n  788  \t\tend if\n  ...\n  802  \t\tith=p%name%which(namei)\n  803  \t\tif(ith.eq.0)then\n  804: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  805: \t\t\tcall writemess('The Name is'+(' '+namei))\n  806  \t\t\tcall error_stop\n  807  \t\tend if\n  ...\n  814  \t\tinteger,intent(in)::ith\n  815  \t\tif(p%length.eq.0)then\n  816: \t\t\tcall writemess('The list is empty')\n  817  \t\t\tcall error_stop\n  818  \t\tend if\n  ...\n  825  \t\tinteger::ith\n  826  \t\tif(p%length.eq.0)then\n  827: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  828: \t\t\tcall writemess('The Name is'+(' '+namei))\n  829: \t\t\tcall writemess('The list is empty')\n  830  \t\t\tcall error_stop\n  831  \t\tend if\n  832  \t\tith=p%name%which(namei)\n  833  \t\tif(ith.eq.0)then\n  834: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  835: \t\t\tcall writemess('The Name is'+(' '+namei))\n  836  \t\t\tcall error_stop\n  837  \t\tend if\n  ...\n 1020  \t\t\tcase(1)\n 1021  \t\t\t\tdo i=1,p%length\n 1022: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%ii(i),cpuInfo )\n 1023  \t\t\t\tend do\n 1024  \t\t\tcase(2)\n 1025  \t\t\t\tdo i=1,p%length\n 1026: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%si(i),cpuInfo )\n 1027  \t\t\t\tend do\n 1028  \t\t\tcase(3)\n 1029  \t\t\t\tdo i=1,p%length\n 1030: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%di(i),cpuInfo )\n 1031  \t\t\t\tend do\n 1032  \t\t\tcase(4)\n 1033  \t\t\t\tdo i=1,p%length\n 1034: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%ci(i),cpuInfo )\n 1035  \t\t\t\tend do\n 1036  \t\t\tcase(5)\n 1037  \t\t\t\tdo i=1,p%length\n 1038: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%zi(i),cpuInfo )\n 1039  \t\t\t\tend do\n 1040  \t\t\tcase(6)\n 1041  \t\t\t\tdo i=1,p%length\n 1042: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%li(i),cpuInfo )\n 1043  \t\t\t\tend do\n 1044  \t\t\tcase(7)\n 1045  \t\t\t\tdo i=1,p%length\n 1046: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%ai(i),cpuInfo )\n 1047  \t\t\t\tend do\n 1048  \t\tend select\n ....\n 1255  \t\tcharacter(len=max_len_of_char_in_TData)::namei\n 1256  \t\tif(p1%length.ne.p2%length)then\n 1257: \t\t\tcall writemess('The paramters have diferent length')\n 1258  \t\t\treturn\n 1259  \t\tend if\n 1260  \t\tptype=p1%parameter%getType()\n 1261  \t\tif(ptype.ne.p2%parameter%getType())then\n 1262: \t\t\tcall writemess('The paramters have diferent data type')\n 1263  \t\t\treturn\n 1264  \t\tend if\n ....\n 1267  \t\t\tith=p2%index(namei)\n 1268  \t\t\tif(ith.eq.0)then\n 1269: \t\t\t\tcall writemess('Can not find'+(' '+namei)+'in the secend parameter')\n 1270  \t\t\telse\t\n 1271  \t\t\t\tselect case(ptype)\n 1272  \t\t\t\t\tcase(1)\n 1273  \t\t\t\t\t\tif(p1%ii(i).ne.p2%ii(ith))then\n 1274: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%ii(i)+'-->'+p2%ii(ith))\n 1275  \t\t\t\t\t\tend if\n 1276  \t\t\t\t\tcase(2)\n 1277  \t\t\t\t\t\tif(p1%si(i).ne.p2%si(ith))then\n 1278: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%si(i)+'-->'+p2%si(ith))\n 1279  \t\t\t\t\t\tend if\n 1280  \t\t\t\t\tcase(3)\n 1281  \t\t\t\t\t\tif(p1%di(i).ne.p2%di(ith))then\n 1282: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%di(i)+'-->'+p2%di(ith))\n 1283  \t\t\t\t\t\tend if\n 1284  \t\t\t\t\tcase(4)\n 1285  \t\t\t\t\t\tif(p1%ci(i).ne.p2%ci(ith))then\n 1286: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%ci(i)+'-->'+p2%ci(ith))\n 1287  \t\t\t\t\t\tend if\n 1288  \t\t\t\t\tcase(5)\n 1289  \t\t\t\t\t\tif(p1%zi(i).ne.p2%zi(ith))then\n 1290: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%zi(i)+'-->'+p2%zi(ith))\n 1291  \t\t\t\t\t\tend if\n 1292  \t\t\t\t\tcase(6)\n 1293  \t\t\t\t\t\tif(p1%li(i).neqv.p2%li(ith))then\n 1294: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%li(i)+'-->'+p2%li(ith))\n 1295  \t\t\t\t\t\tend if\n 1296  \t\t\t\t\tcase(7)\n 1297  \t\t\t\t\t\tif(p1%ai(i).nequ.p2%ai(ith))then\n 1298: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%ai(i)+'-->'+p2%ai(ith))\n 1299  \t\t\t\t\t\tend if\n 1300  \t\t\t\tend select\n ....\n 1310  \t\tClasstype=List1%parameter%getType()\n 1311  \t\tif(Classtype.ne.List2%parameter%getType())then\n 1312: \t\t\tcall writemess('Can not connect the List')\n 1313  \t\t\tcall error_stop\n 1314  \t\tend if\n ....\n 1330  \t\tsubLength=jth-ith+1\n 1331  \t\tif(subLength.le.0)then\n 1332: \t\t\tcall writemess('ERROR in subList, length<0,ith='+ith+',jth='+jth)\n 1333  \t\t\tcall error_stop\n 1334  \t\tend if\n ....\n 1346  \t\tith=L%name%which(namei)\n 1347  \t\tif(ith.eq.0)then\n 1348: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n 1349: \t\t\tcall writemess('The Name is'+(' '+namei))\n 1350  \t\t\tcall error_stop\n 1351  \t\tend if\n 1352  \t\tjth=L%name%which(namej)\n 1353  \t\tif(jth.eq.0)then\n 1354: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n 1355: \t\t\tcall writemess('The Name is'+(' '+namej))\n 1356  \t\t\tcall error_stop\n 1357  \t\tend if\n 1358  \t\tif(ith.gt.ith)then\n 1359: \t\t\tcall writemess('ERROR in subList, length<0,ith='+ith+',jth='+jth)\n 1360: \t\t\tcall writemess('namei='+namei+'namej='+namej)\n 1361: \t\t\tcall writemess('The data in list are')\n 1362: \t\t\tcall writemess(L)\n 1363  \t\t\tcall error_stop\n 1364  \t\tend if\n ....\n 1387  \t\tptype=p%parameter%getType()\n 1388  \t\tif(ptype.ne.inp%parameter%getType())then\n 1389: \t\t\tcall writemess('Can not update the list, the data type are not the same')\n 1390  \t\t\tcall error_stop\n 1391  \t\tend if\n ....\n 1397  \t\t\t\t\tcase(1)\n 1398  \t\t\t\t\t\tif(p%ii(i).ne.inp%ii(ith))then\n 1399: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%ii(i)+'-->'+inp%ii(ith))\n 1400  \t\t\t\t\t\tend if\n 1401  \t\t\t\t\t\tcall p%setValue(i,inp%ii(ith))\n 1402  \t\t\t\t\tcase(2)\n 1403  \t\t\t\t\t\tif(p%si(i).ne.inp%si(ith))then\n 1404: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%si(i)+'-->'+inp%si(ith))\n 1405  \t\t\t\t\t\tend if\n 1406  \t\t\t\t\t\tcall p%setValue(i,inp%si(ith))\n 1407  \t\t\t\t\tcase(3)\n 1408  \t\t\t\t\t\tif(p%di(i).ne.inp%di(ith))then\n 1409: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%di(i)+'-->'+inp%di(ith))\n 1410  \t\t\t\t\t\tend if\n 1411  \t\t\t\t\t\tcall p%setValue(i,inp%di(ith))\n 1412  \t\t\t\t\tcase(4)\n 1413  \t\t\t\t\t\tif(p%ci(i).ne.inp%ci(ith))then\n 1414: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%ci(i)+'-->'+inp%ci(ith))\n 1415  \t\t\t\t\t\tend if\n 1416  \t\t\t\t\t\tcall p%setValue(i,inp%ci(ith))\n 1417  \t\t\t\t\tcase(5)\n 1418  \t\t\t\t\t\tif(p%zi(i).ne.inp%zi(ith))then\n 1419: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%zi(i)+'-->'+inp%zi(ith))\n 1420  \t\t\t\t\t\tend if\n 1421  \t\t\t\t\t\tcall p%setValue(i,inp%zi(ith))\n 1422  \t\t\t\t\tcase(6)\n 1423  \t\t\t\t\t\tif(p%li(i).neqv.inp%li(ith))then\n 1424: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%li(i)+'-->'+inp%li(ith))\n 1425  \t\t\t\t\t\tend if\n 1426  \t\t\t\t\t\tcall p%setValue(i,inp%li(ith))\n 1427  \t\t\t\t\tcase(7)\n 1428  \t\t\t\t\t\tif(p%ai(i).nequ.inp%ai(ith))then\n 1429: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%ai(i)+'-->'+inp%ai(ith))\n 1430  \t\t\t\t\t\tend if\n 1431  \t\t\t\t\t\tcall p%setValue(i,inp%ai(ith))\n ....\n 1459  \t\t\t\tcounter=counter+1\n 1460  \t\t\t\tif(counter.gt.tempp%length)then\n 1461: \t\t\t\t\tcall writemess('ERROR in killData,parameter.f90')\n 1462  \t\t\t\t\tcall error_stop\n 1463  \t\t\t\tend if\n ....\n 1498  \t\t\t\tcounter=counter+1\n 1499  \t\t\t\tif(counter.gt.tempp%length)then\n 1500: \t\t\t\t\tcall writemess('ERROR in killData,parameter.f90')\n 1501  \t\t\t\t\tcall error_stop\n 1502  \t\t\t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/TData.f90:\n  194  \tend subroutine\n  195  \tsubroutine TData_memory_report()\n  196: \t\tcall writemess('The memory used in TData are:')\n  197  \t\tcall WorkingMemory%print()\n  198: \t\tcall writemess(' ')\n  199  \tend subroutine\t\n  200  \tsubroutine TData_memory_length(length)\n  ...\n  206  \t\tinteger,intent(inout)::inoutlen(:)\n  207  \t\tif(size(inoutlen).lt.7)then\n  208: \t\t\tcall writemess('ERROR in get length of the memory')\n  209  \t\t\tcall error_stop\n  210  \t\tend if\n  ...\n 3196  \t\t\t\tcall store_value_logi_i(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3197  \t\t\tcase default\n 3198: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3199  \t\t\t\tcall error_stop()\n 3200  \t\tend select\n ....\n 3220  \t\t\t\tcall store_value_logi_s(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3221  \t\t\tcase default\n 3222: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3223  \t\t\t\tcall error_stop()\n 3224  \t\tend select\n ....\n 3244  \t\t\t\tcall store_value_logi_d(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3245  \t\t\tcase default\n 3246: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3247  \t\t\t\tcall error_stop()\n 3248  \t\tend select\n ....\n 3268  \t\t\t\tcall store_value_logi_c(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3269  \t\t\tcase default\n 3270: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3271  \t\t\t\tcall error_stop()\n 3272  \t\tend select\n ....\n 3292  \t\t\t\tcall store_value_logi_z(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3293  \t\t\tcase default\n 3294: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3295  \t\t\t\tcall error_stop()\n 3296  \t\tend select\n ....\n 3318  \t\t\t\tcall store_value_char_l(T%adata,Tdimen,ia,newdata,Ndimen,ib)\n 3319  \t\t\tcase default\n 3320: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3321  \t\t\t\tcall error_stop()\n 3322  \t\tend select\n ....\n 3344  \t\t\t\tcall store_value_char_a(T%adata,Tdimen,ia,newdata,Ndimen,ib)\n 3345  \t\t\tcase default\n 3346: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3347  \t\t\t\tcall error_stop()\n 3348  \t\tend select\n ....\n 3370  \t\t\t\tcall modify_Some_TData_class1(T,Tdimen,ia,B%adata,Ndimen,ib)\n 3371  \t\t\tcase default\n 3372: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3373  \t\t\t\tcall error_stop()\n 3374  \t\tend select\n ....\n 3398  \t\t\t\tcall store_value2_char_i(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3399  \t\t\tcase default\n 3400: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3401  \t\t\t\tcall error_stop()\n 3402  \t\tend select\n ....\n 3424  \t\t\t\tcall store_value2_char_s(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3425  \t\t\tcase default\n 3426: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3427  \t\t\t\tcall error_stop()\n 3428  \t\tend select\n ....\n 3450  \t\t\t\tcall store_value2_char_d(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3451  \t\t\tcase default\n 3452: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3453  \t\t\t\tcall error_stop()\n 3454  \t\tend select\n ....\n 3476  \t\t\t\tcall store_value2_char_c(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3477  \t\t\tcase default\n 3478: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3479  \t\t\t\tcall error_stop()\n 3480  \t\tend select\n ....\n 3502  \t\t\t\tcall store_value2_char_z(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3503  \t\t\tcase default\n 3504: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3505  \t\t\t\tcall error_stop()\n 3506  \t\tend select\n ....\n 3528  \t\t\t\tcall store_value2_char_l(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3529  \t\t\tcase default\n 3530: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3531  \t\t\t\tcall error_stop()\n 3532  \t\tend select\n ....\n 3554  \t\t\t\tcall store_value2_char_a(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3555  \t\t\tcase default\n 3556: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3557  \t\t\t\tcall error_stop()\n 3558  \t\tend select\n ....\n 3578  \t\t\t\t\t\tcall store_value2_int_z(T%idata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3579  \t\t\t\t\tcase default\n 3580: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3581  \t\t\t\t\t\tcall error_stop()\n 3582  \t\t\t\tend select\n ....\n 3595  \t\t\t\t\t\tcall store_value2_real4_z(T%sdata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3596  \t\t\t\t\tcase default\n 3597: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3598  \t\t\t\t\t\tcall error_stop()\n 3599  \t\t\t\tend select\n ....\n 3612  \t\t\t\t\t\tcall store_value2_real8_z(T%ddata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3613  \t\t\t\t\tcase default\n 3614: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3615  \t\t\t\t\t\tcall error_stop()\n 3616  \t\t\t\tend select\n ....\n 3629  \t\t\t\t\t\tcall store_value2_com4_z(T%cdata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3630  \t\t\t\t\tcase default\n 3631: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3632  \t\t\t\t\t\tcall error_stop()\n 3633  \t\t\t\tend select\t\n ....\n 3647  \t\t\t\t\t\tcall store_value2_com8_z(T%zdata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3648  \t\t\t\t\tcase default\n 3649: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3650  \t\t\t\t\t\tcall error_stop()\n 3651  \t\t\t\tend select\t\n ....\n 3656  \t\t\t\t\t\tcall store_value2_logi_l(T%ldata,TD(1),TD(2),ia,ja,B%ldata,ND(1),ND(2),ib,jb)\n 3657  \t\t\t\t\tcase default\n 3658: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3659  \t\t\t\t\t\tcall error_stop()\n 3660  \t\t\t\tend select\t\n ....\n 3677  \t\t\t\t\t\tcall store_value2_char_a(T%adata,TD(1),TD(2),ia,ja,B%adata,ND(1),ND(2),ib,jb)\n 3678  \t\t\t\t\tcase default\n 3679: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3680  \t\t\t\t\t\tcall error_stop()\n 3681  \t\t\t\tend select\t\n 3682  \t\t\t\t\n 3683  \t\t\tcase default\n 3684: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3685  \t\t\t\tcall error_stop()\n 3686  \t\tend select\n ....\n 3714  \t\t\t\tcall store_value3_char_i(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3715  \t\t\tcase default\n 3716: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3717  \t\t\t\tcall error_stop()\n 3718  \t\tend select\n ....\n 3740  \t\t\t\tcall store_value3_char_s(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3741  \t\t\tcase default\n 3742: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3743  \t\t\t\tcall error_stop()\n 3744  \t\tend select\n ....\n 3766  \t\t\t\tcall store_value3_char_d(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3767  \t\t\tcase default\n 3768: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3769  \t\t\t\tcall error_stop()\n 3770  \t\tend select\n ....\n 3792  \t\t\t\tcall store_value3_char_c(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3793  \t\t\tcase default\n 3794: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3795  \t\t\t\tcall error_stop()\n 3796  \t\tend select\n ....\n 3818  \t\t\t\tcall store_value3_char_z(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3819  \t\t\tcase default\n 3820: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3821  \t\t\t\tcall error_stop()\n 3822  \t\tend select\n ....\n 3844  \t\t\t\tcall store_value3_char_l(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3845  \t\t\tcase default\n 3846: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3847  \t\t\t\tcall error_stop()\n 3848  \t\tend select\n ....\n 3870  \t\t\t\tcall store_value3_char_a(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3871  \t\t\tcase default\n 3872: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3873  \t\t\t\tcall error_stop()\n 3874  \t\tend select\n ....\n 3896  \t\t\t\tcall store_value4_char_i(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3897  \t\t\tcase default\n 3898: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3899  \t\t\t\tcall error_stop()\n 3900  \t\tend select\n ....\n 3922  \t\t\t\tcall store_value4_char_s(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3923  \t\t\tcase default\n 3924: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3925  \t\t\t\tcall error_stop()\n 3926  \t\tend select\n ....\n 3948  \t\t\t\tcall store_value4_char_d(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3949  \t\t\tcase default\n 3950: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3951  \t\t\t\tcall error_stop()\n 3952  \t\tend select\n ....\n 3974  \t\t\t\tcall store_value4_char_c(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3975  \t\t\tcase default\n 3976: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3977  \t\t\t\tcall error_stop()\n 3978  \t\tend select\n ....\n 4000  \t\t\t\tcall store_value4_char_z(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 4001  \t\t\tcase default\n 4002: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 4003  \t\t\t\tcall error_stop()\n 4004  \t\tend select\n ....\n 4026  \t\t\t\tcall store_value4_char_l(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 4027  \t\t\tcase default\n 4028: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 4029  \t\t\t\tcall error_stop()\n 4030  \t\tend select\n ....\n 4052  \t\t\t\tcall store_value4_char_a(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 4053  \t\t\tcase default\n 4054: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 4055  \t\t\t\tcall error_stop()\n 4056  \t\tend select\n ....\n 5146  \t\tlength=A%TotalData\n 5147  \t\tif(length.gt.Res%TotalData)then\n 5148: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5149  \t\t\tcall error_stop\n 5150  \t\tend if\n ....\n 5196  \t\tlength=A%TotalData\n 5197  \t\tif(length.gt.Res%TotalData)then\n 5198: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5199  \t\t\tcall error_stop\n 5200  \t\tend if\n ....\n 5246  \t\tlength=A%TotalData\n 5247  \t\tif(length.gt.Res%TotalData)then\n 5248: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5249  \t\t\tcall error_stop\n 5250  \t\tend if\n ....\n 5296  \t\tlength=A%TotalData\n 5297  \t\tif(length.gt.Res%TotalData)then\n 5298: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5299  \t\t\tcall error_stop\n 5300  \t\tend if\n ....\n 5346  \t\tlength=A%TotalData\n 5347  \t\tif(length.gt.Res%TotalData)then\n 5348: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5349  \t\t\tcall error_stop\n 5350  \t\tend if\n ....\n 6238  \t\t\tcase default\n 6239  \t\t\t\n 6240: \t\t\t\tcall writemess('ERROR in product_MM_dim1_par',-1)\n 6241  \t\t\t\tcall error_stop\n 6242  \t\tend select\n ....\n 6336  \t\t\tcase default\n 6337  \t\t\t\n 6338: \t\t\t\tcall writemess('ERROR in product_MM_dim1_par',-1)\n 6339  \t\t\t\tcall error_stop\n 6340  \t\tend select\n ....\n 7989  \t\trank=dimen%Getrank()\n 7990  \t\tif(inde.gt.rank) then\n 7991: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 7992: \t\t\tcall writemess(\"index>rank\",-1)\n 7993  \t\t\tcall error_stop()\n 7994  \t\tend if\n 7995  \t\tif(inde.le.0) then\n 7996: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 7997: \t\t\tcall writemess(\"index=\"+inde,-1)\n 7998  \t\t\tcall error_stop()\n 7999  \t\tend if\n ....\n 8027  \t\trank=dimen%Getrank()\n 8028  \t\tif(inde.gt.rank) then\n 8029: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 8030: \t\t\tcall writemess(\"index>rank\",-1)\n 8031  \t\t\tcall error_stop()\n 8032  \t\tend if\n 8033  \t\tif(inde.le.0) then\n 8034: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 8035: \t\t\tcall writemess(\"index=\"+inde,-1)\n 8036  \t\t\tcall error_stop()\n 8037  \t\tend if\n ....\n 8141  \t\t\t\tcall sortData(inoutData%zdata,outindices%idata,realpart,increase)\n 8142  \t\t\tcase default\n 8143: \t\t\t\tcall writemess('ERROR type in sort Tensor',-1)\n 8144  \t\t\t\tcall error_stop\n 8145  \t\tend \tselect\n ....\n 8161  \t\t\t\tcall sortData(inoutData%zdata,realpart,increase)\n 8162  \t\t\tcase default\n 8163: \t\t\t\tcall writemess('ERROR type in sort Tensor',-1)\n 8164  \t\t\t\tcall error_stop\n 8165  \t\tend \tselect\n ....\n 8173  \t\ttotalData=A%totalData\n 8174  \t\tif(totalData.eq.0)then\n 8175: \t\t\tcall writemess(\" There is no data in Tensor, when checking if there is element is NAN\",-1)\n 8176  \t\t\tcall error_stop\n 8177  \t\tend if\n ....\n 8214  \t\t\t\tend do\n 8215  \t\t\tcase default\n 8216: \t\t\t\tcall writemess(\" ERROR in isnan\",-1)\n 8217  \t\t\t\tcall error_stop\n 8218  \t\tend select\n ....\n 8226  \t\ttotalData=A%totalData\n 8227  \t\tif(totalData.eq.0)then\n 8228: \t\t\tcall writemess(\" There is no data in Tensor, when checking if there is element Overflow\",-1)\n 8229  \t\t\tcall error_stop\n 8230  \t\tend if\n ....\n 8269  \t\t\t\tend do\n 8270  \t\t\tcase default\n 8271: \t\t\t\tcall writemess(\" ERROR in isOverflow,Tensor is not number type\",-1)\n 8272  \t\t\t\tcall error_stop\n 8273  \t\tend select\n ....\n 8280  \t\ttotalData=A%totalData\n 8281  \t\tif(totalData.eq.0)then\n 8282: \t\t\tcall writemess(\" There is no data in Tensor, when checking if all the element is 0\",-1)\n 8283  \t\t\tcall error_stop\n 8284  \t\tend if\n ....\n 8323  \t\t\t\tend do\n 8324  \t\t\tcase default\n 8325: \t\t\t\tcall writemess(\" ERROR in isZeroTData,Tensor is not number type(integer, real or complex)\",-1)\n 8326  \t\t\t\tcall error_stop\n 8327  \t\tend select\n ....\n 9646  \t\tinteger,pointer,intent(inout)::p(:)\n 9647  \t\tif(T%totalData.eq.0)then\n 9648: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9649  \t\t\tcall error_stop\n 9650  \t\tend if\n 9651  \t\tif(T%classtype.ne.1)then\n 9652: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 9653  \t\t\tcall error_stop\n 9654  \t\tend if\n ....\n 9662  \t\tinteger::length\n 9663  \t\tif(T%totalData.eq.0)then\n 9664: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9665  \t\t\tcall error_stop\n 9666  \t\tend if\n 9667  \t\tif(T%classtype.ne.1)then\n 9668: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 9669  \t\t\tcall error_stop\n 9670  \t\tend if\n 9671  \t\tlength=i1i2(2)-i1i2(1)+1\n 9672  \t\tif(length.gt.T%TotalData)then\n 9673: \t\t\tcall writemess('ERROR in pointing integer, pointer lenght larger than totoaldata',-1)\n 9674  \t\t\tcall error_stop\n 9675  \t\tend if\n ....\n 9681  \t\treal*4,pointer,intent(inout)::p(:)\n 9682  \t\tif(T%totalData.eq.0)then\n 9683: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9684  \t\t\tcall error_stop\n 9685  \t\tend if\n 9686  \t\tif(T%classtype.ne.2)then\n 9687: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 9688  \t\t\tcall error_stop\n 9689  \t\tend if\n ....\n 9697  \t\tinteger::length\n 9698  \t\tif(T%totalData.eq.0)then\n 9699: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9700  \t\t\tcall error_stop\n 9701  \t\tend if\n 9702  \t\tif(T%classtype.ne.2)then\n 9703: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 9704  \t\t\tcall error_stop\n 9705  \t\tend if\n 9706  \t\tlength=i1i2(2)-i1i2(1)+1\n 9707  \t\tif(length.gt.T%TotalData)then\n 9708: \t\t\tcall writemess('ERROR in pointing real*4, pointer lenght larger than totoaldata',-1)\n 9709  \t\t\tcall error_stop\n 9710  \t\tend if\n ....\n 9716  \t\treal*8,pointer,intent(inout)::p(:)\n 9717  \t\tif(T%totalData.eq.0)then\n 9718: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9719  \t\t\tcall error_stop\n 9720  \t\tend if\n 9721  \t\tif(T%classtype.ne.3)then\n 9722: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 9723  \t\t\tcall error_stop\n 9724  \t\tend if\n ....\n 9732  \t\tinteger::length\n 9733  \t\tif(T%totalData.eq.0)then\n 9734: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9735  \t\t\tcall error_stop\n 9736  \t\tend if\n 9737  \t\tif(T%classtype.ne.3)then\n 9738: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 9739  \t\t\tcall error_stop\n 9740  \t\tend if\n 9741  \t\tlength=i1i2(2)-i1i2(1)+1\n 9742  \t\tif(length.gt.T%TotalData)then\n 9743: \t\t\tcall writemess('ERROR in pointing real*8, pointer lenght larger than totoaldata',-1)\n 9744  \t\t\tcall error_stop\n 9745  \t\tend if\n ....\n 9751  \t\tcomplex(kind=4),pointer,intent(inout)::p(:)\n 9752  \t\tif(T%totalData.eq.0)then\n 9753: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9754  \t\t\tcall error_stop\n 9755  \t\tend if\n 9756  \t\tif(T%classtype.ne.4)then\n 9757: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 9758  \t\t\tcall error_stop\n 9759  \t\tend if\n ....\n 9767  \t\tinteger::length\n 9768  \t\tif(T%totalData.eq.0)then\n 9769: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9770  \t\t\tcall error_stop\n 9771  \t\tend if\n 9772  \t\tif(T%classtype.ne.4)then\n 9773: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 9774  \t\t\tcall error_stop\n 9775  \t\tend if\n 9776  \t\tlength=i1i2(2)-i1i2(1)+1\n 9777  \t\tif(length.gt.T%TotalData)then\n 9778: \t\t\tcall writemess('ERROR in pointing complex(kind=4), pointer lenght larger than totoaldata',-1)\n 9779  \t\t\tcall error_stop\n 9780  \t\tend if\n ....\n 9786  \t\tcomplex(kind=8),pointer,intent(inout)::p(:)\n 9787  \t\tif(T%totalData.eq.0)then\n 9788: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9789  \t\t\tcall error_stop\n 9790  \t\tend if\n 9791  \t\tif(T%classtype.ne.5)then\n 9792: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 9793  \t\t\tcall error_stop\n 9794  \t\tend if\n ....\n 9802  \t\tinteger::length\n 9803  \t\tif(T%totalData.eq.0)then\n 9804: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9805  \t\t\tcall error_stop\n 9806  \t\tend if\n 9807  \t\tif(T%classtype.ne.5)then\n 9808: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 9809  \t\t\tcall error_stop\n 9810  \t\tend if\n 9811  \t\tlength=i1i2(2)-i1i2(1)+1\n 9812  \t\tif(length.gt.T%TotalData)then\n 9813: \t\t\tcall writemess('ERROR in pointing complex(kind=8), pointer lenght larger than totoaldata',-1)\n 9814  \t\t\tcall error_stop\n 9815  \t\tend if\n ....\n 9821  \t\tlogical,pointer,intent(inout)::p(:)\n 9822  \t\tif(T%totalData.eq.0)then\n 9823: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9824  \t\t\tcall error_stop\n 9825  \t\tend if\n 9826  \t\tif(T%classtype.ne.6)then\n 9827: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 9828  \t\t\tcall error_stop\n 9829  \t\tend if\n ....\n 9837  \t\tinteger::length\n 9838  \t\tif(T%totalData.eq.0)then\n 9839: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9840  \t\t\tcall error_stop\n 9841  \t\tend if\n 9842  \t\tif(T%classtype.ne.6)then\n 9843: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 9844  \t\t\tcall error_stop\n 9845  \t\tend if\n 9846  \t\tlength=i1i2(2)-i1i2(1)+1\n 9847  \t\tif(length.gt.T%TotalData)then\n 9848: \t\t\tcall writemess('ERROR in pointing logical, pointer lenght larger than totoaldata',-1)\n 9849  \t\t\tcall error_stop\n 9850  \t\tend if\n ....\n 9856  \t\tcharacter(len=max_len_of_char_in_TData),pointer,intent(inout)::p(:)\n 9857  \t\tif(T%totalData.eq.0)then\n 9858: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9859  \t\t\tcall error_stop\n 9860  \t\tend if\n 9861  \t\tif(T%classtype.ne.7)then\n 9862: \t\t\tcall writemess('The type of Tensor is not  character(len=*)',-1)\n 9863  \t\t\tcall error_stop\n 9864  \t\tend if\n ....\n 9872  \t\tcharacter(len=max_len_of_char_in_TData),pointer,intent(inout)::p(:)\n 9873  \t\tif(T%totalData.eq.0)then\n 9874: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9875  \t\t\tcall error_stop\n 9876  \t\tend if\n 9877  \t\tif(T%classtype.ne.7)then\n 9878: \t\t\tcall writemess('The type of Tensor is not  character(len=characterlen)',-1)\n 9879  \t\t\tcall error_stop\n 9880  \t\tend if\n 9881  \t\tlength=(i1i2(2)-i1i2(1)+1)\n 9882  \t\tif(length.gt.T%TotalData)then\n 9883: \t\t\tcall writemess('ERROR in pointing character(len=characterlen), pointer lenght larger than totoaldata',-1)\n 9884  \t\t\tcall error_stop\n 9885  \t\tend if\n ....\n 12299  \t\t\t\t\t\t\t\t\t\t\tinTData%totalData,MPI_double_precision,MPI_MAX,mpi_comm,ierr)\n 12300  \t\t\tcase default\n 12301: \t\t\t\tcall writemess('ERROR in MAX Tensor')\n 12302  \t\t\t\tcall error_stop\n 12303  \t\tend select\n .....\n 12329  \t\t\t\t\t\t\t\t\t\t\tinTData%totalData,MPI_double_precision,MPI_MIN,mpi_comm,ierr)\n 12330  \t\t\tcase default\n 12331: \t\t\t\tcall writemess('ERROR in MAX Tensor')\n 12332  \t\t\t\tcall error_stop\n 12333  \t\tend select\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tensor.f90:\n 1622  \t\tmodule procedure real8_le_T\n 1623  \tend interface\n 1624: \tpublic::writemess\n 1625: \tinterface writemess\n 1626: \t\tmodule procedure writemess_Tensor\n 1627: \t\tmodule procedure writemess_Tensor_form\n 1628  \tend interface\n 1629  \t\n ....\n 1779  \tpublic::out_and_set_seed!!set a random seed for the program,and then output the seed,seed=out_and_set_seed(),use to rebuild result\n 1780  \tpublic::set_writing_type!set_writing_type(chara,typ),chara=integer,real or some else,typ='(F25.8)','(I0)' or some else\n 1781: \tpublic::set_output_log_address!set the log file ,when use writemess\n 1782: \tpublic::set_output_log_unit!set the unit of log file ,when use writemess\n 1783: \tpublic::set_output_cpu!set the output cpu,when using writemess,by default , the output cpu is cpu0\n 1784  \tpublic::set_max_len_of_cha!define the max len of character when doing operation such as +\n 1785  \t\n ....\n 1898  \t\tTensorlength(1)=Tensorlength(1)+Workingdimension1%outlenDimData()+&\n 1899  \t\t\tWorkingdimension2%outlenDimData()+Workingdimension3%outlenDimData()\n 1900: \t\tcall writemess('The length of the memory used in Dimension, Tensor and TData are')\n 1901: \t\tcall writemess('integer         :'+Tensorlength(1))\n 1902: \t\tcall writemess('real(kind=4)    :'+Tensorlength(2))\n 1903: \t\tcall writemess('real(kind=8)    :'+Tensorlength(3))\n 1904: \t\tcall writemess('complex(kind=4) :'+Tensorlength(4))\n 1905: \t\tcall writemess('complex(kind=8) :'+Tensorlength(5))\n 1906: \t\tcall writemess('logical         :'+Tensorlength(6))\n 1907: \t\tcall writemess('character       :'+Tensorlength(7))\n 1908  \t\t\treturn\n 1909  \tend subroutine\t\n 1910  \tsubroutine Tensor_memory_report()\n 1911: \t\tcall writemess('The memory used in Tensor are:')\n 1912  \t\tcall WorkingMemory%print()\n 1913: \t\tcall writemess(' ')\n 1914: \t\tcall writemess('The length of the working Tensor are'+(WorkingTensor1%getTotalData()+&\n 1915  \t\t\tWorkingTensor2%getTotalData()))\n 1916: \t\tcall writemess('The length of the working Dimension are'+(Workingdimension1%outlenDimData()+&\n 1917  \t\t\tWorkingdimension2%outlenDimData()+Workingdimension3%outlenDimData()))\n 1918  \tend subroutine\t\n ....\n 1966  \t\tinteger::length\n 1967  \t\tif(getflag(T))then\n 1968: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 1969  \t\t\tcall error_stop\n 1970  \t\tend if\n ....\n 1987  \t\tinteger::length\n 1988  \t\tif(getflag(T))then\n 1989: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 1990  \t\t\tcall error_stop\n 1991  \t\tend if\n ....\n 2007  \t\tinteger::length\n 2008  \t\tif(getflag(T))then\n 2009: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2010  \t\t\tcall error_stop\n 2011  \t\tend if\n ....\n 2027  \t\tinteger::length\n 2028  \t\tif(getflag(T))then\n 2029: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2030  \t\t\tcall error_stop\n 2031  \t\tend if\n ....\n 2049  \t\tinteger::length\n 2050  \t\tif(getflag(T))then\n 2051: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2052  \t\t\tcall error_stop\n 2053  \t\tend if\n ....\n 2069  \t\tinteger::length\n 2070  \t\tif(getflag(T))then\n 2071: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2072  \t\t\tcall error_stop\n 2073  \t\tend if\n ....\n 2088  \t\tinteger::length\n 2089  \t\tif(getflag(T))then\n 2090: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2091  \t\t\tcall error_stop\n 2092  \t\tend if\n ....\n 2108  \t\tinteger::length\n 2109  \t\tif(getflag(T))then\n 2110: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2111  \t\t\tcall error_stop\n 2112  \t\tend if\n ....\n 2127  \t\tinteger::length\n 2128  \t\tif(getflag(T))then\n 2129: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2130  \t\t\tcall error_stop\n 2131  \t\tend if\n ....\n 2152  \t\tlength=dimen%size()\n 2153  \t\tif(length.le.0) then\n 2154: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2155  \t\t\tcall dimen%print()\n 2156  \t\t\tcall error_stop()\n ....\n 2170  \t\tlength=product(dimen)\n 2171  \t\tif(length.le.0) then\n 2172: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2173  \t\t\twrite(*,*)dimen\n 2174  \t\t\tcall error_stop()\n ....\n 2220  \t\tlength=product(dimen)\n 2221  \t\tif(length.le.0) then\n 2222: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2223  \t\t\twrite(*,*)dimen\n 2224  \t\t\tcall error_stop()\n ....\n 2251  \t\tlength=dimen%size()\n 2252  \t\tif(length.le.0) then\n 2253: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2254  \t\t\tcall dimen%print()\n 2255  \t\t\tcall error_stop()\n ....\n 2268  \t\tlength=product(dimen)\n 2269  \t\tif(length.le.0) then\n 2270: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2271  \t\t\twrite(*,*)dimen\n 2272  \t\t\tcall error_stop()\n ....\n 2790  \t\t\tcall assignment_real4_Tdata_value(val,T%TData)\n 2791  \t\telse if(.not.T%getFlag())then\n 2792: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2793: \t\t\tcall writemess(\"The Tensor is a empty Tensor\",-1)\n 2794  \t\t\tcall error_stop()\n 2795  \t\telse\n 2796: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2797  \t\t\tcall T%print()\n 2798  \t\t\tcall error_stop()\n ....\n 2806  \t\t\tcall assignment_real8_Tdata_value(val,T%TData)\n 2807  \t\telse if(.not.T%getFlag())then\n 2808: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2809: \t\t\tcall writemess(\"The Tensor is a empty Tensor\",-1)\n 2810  \t\t\tcall error_stop()\n 2811  \t\telse\n 2812: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2813  \t\t\tcall T%print()\n 2814  \t\t\tcall error_stop()\n ....\n 2822  \t\t\tcall assignment_com4_Tdata_value(val,T%TData)\n 2823  \t\telse\n 2824: \t\t\tcall writemess(\"ERROR in assignment for Tensor to complex\",-1)\n 2825  \t\t\tcall error_stop()\n 2826  \t\tend if\n ....\n 3480  \t\tinteger::length\n 3481  \t\tif(.not.Vec%getFlag())then\n 3482: \t\t\tcall writemess(\"There is no data in input element, setValue(element)\",-1)\n 3483  \t\t\tcall error_stop()\n 3484  \t\tend if\t\n ....\n 3595  \t\tinteger::ia(2)\n 3596  \t\tif(ia(1).gt.ia(2))then\n 3597: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3598: \t\t\tcall writemess('ERROR:ia(1)>ia(2)'+',ia(1)='+ia(1)+',ia(2)='+ia(2),-1)\n 3599  \t\t\tcall error_stop\n 3600  \t\tend if\n 3601  \t\tif(ia(1).le.0)then\n 3602: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3603: \t\t\tcall writemess('ERROR:ia(1)<0'+',ia(1)='+ia(1))\n 3604  \t\t\tcall error_stop\n 3605  \t\tend if\n 3606  \t\tif(ia(2).gt.A%getToTalData())then\n 3607: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3608: \t\t\tcall writemess('ERROR:ia(2)>len of Tensor Data'+',ia(2)='+ia(2)+',TotalData='+A%getToTalData(),-1)\n 3609  \t\t\tcall error_stop\n 3610  \t\tend if\n ....\n 3614  \t\tinteger::ia(2),lenA\n 3615  \t\tif(ia(1).gt.ia(2))then\n 3616: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3617: \t\t\tcall writemess('ERROR:ia(1)>ia(2)'+',ia(1)='+ia(1)+',ia(2)='+ia(2),-1)\n 3618  \t\t\tcall error_stop\n 3619  \t\tend if\n 3620  \t\tif(ia(1).le.0)then\n 3621: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3622: \t\t\tcall writemess('ERROR:ia(1)<0'+',ia(1)='+ia(1),-1)\n 3623  \t\t\tcall error_stop\n 3624  \t\tend if\n 3625  \t\tif(ia(2).gt.lenA)then\n 3626: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3627: \t\t\tcall writemess('ERROR:ia(2)>len of lenA Data'+',ia(2)='+ia(2)+',TotalData='+lenA,-1)\n 3628  \t\t\tcall error_stop\n 3629  \t\tend if\n ....\n 3633  \t\tinteger::ia(2),ib(2)\n 3634  \t\tif((ia(2)-ia(1)).ne.(ib(2)-ib(1)))then\n 3635: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3636: \t\t\tcall writemess('ERROR: index do not match,ia(2)-ia(1)!=ib(2)-ib(1)',-1)\n 3637: \t\t\tcall writemess('ia(1)='+ia(1),-1)\n 3638: \t\t\tcall writemess('ia(2)='+ia(2),-1)\n 3639: \t\t\tcall writemess('ib(1)='+ib(1),-1)\n 3640: \t\t\tcall writemess('ib(2)='+ib(2),-1)\n 3641  \t\t\tcall error_stop\n 3642  \t\tend if\n ....\n 3649  \t\tn=ja(2)-ja(1)+1\n 3650  \t\tif((m*n).ne.total)then\n 3651: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3652: \t\t\tcall writemess('ERROR: index do not match,(ia(2)-ia(1))*(ja(2)-ja(1))!=total',-1)\n 3653: \t\t\tcall writemess('ia(1)='+ia(1),-1)\n 3654: \t\t\tcall writemess('ia(2)='+ia(2),-1)\n 3655: \t\t\tcall writemess('ja(1)='+ja(1),-1)\n 3656: \t\t\tcall writemess('ja(2)='+ja(2),-1)\n 3657: \t\t\tcall writemess('total='+total,-1)\n 3658  \t\t\tcall error_stop\n 3659  \t\tend if\n ....\n 3665  \t\tm=ia(2)-ia(1)\n 3666  \t\tif(m.ne.total)then\n 3667: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3668: \t\t\tcall writemess('ERROR: index do not match,(ia(2)-ia(1))!=total',-1)\n 3669: \t\t\tcall writemess('ia(1)='+ia(1),-1)\n 3670: \t\t\tcall writemess('ia(2)='+ia(2),-1)\n 3671: \t\t\tcall writemess('total='+total,-1)\n 3672  \t\t\tcall error_stop\n 3673  \t\tend if\n ....\n 3775  \t\tinteger::Bdim(2),Adim(2)\n 3776  \t\tif(A%getRank().ne.2)then\n 3777: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3778: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3779  \t\t\tcall error_stop\n 3780  \t\tend if\n ....\n 3797  \t\tinteger::Bdim(2),Adim(2)\n 3798  \t\tif(A%getRank().ne.2)then\n 3799: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3800: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3801  \t\t\tcall error_stop\n 3802  \t\tend if\n ....\n 3819  \t\tinteger::Bdim(2),Adim(2)\n 3820  \t\tif(A%getRank().ne.2)then\n 3821: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3822: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3823  \t\t\tcall error_stop\n 3824  \t\tend if\n ....\n 3841  \t\tinteger::Bdim(2),Adim(2)\n 3842  \t\tif(A%getRank().ne.2)then\n 3843: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3844: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3845  \t\t\tcall error_stop\n 3846  \t\tend if\n ....\n 3863  \t\tinteger::Bdim(2),Adim(2)\n 3864  \t\tif(A%getRank().ne.2)then\n 3865: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3866: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3867  \t\t\tcall error_stop\n 3868  \t\tend if\n ....\n 3885  \t\tinteger::Bdim(2),Adim(2)\n 3886  \t\tif(A%getRank().ne.2)then\n 3887: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3888: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3889  \t\t\tcall error_stop\n 3890  \t\tend if\n ....\n 3907  \t\tinteger::Bdim(2),Adim(2)\n 3908  \t\tif(A%getRank().ne.2)then\n 3909: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3910: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3911  \t\t\tcall error_stop\n 3912  \t\tend if\n ....\n 3929  \t\tinteger::Bdim(2),Adim(2)\n 3930  \t\tif(A%getRank().ne.2)then\n 3931: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3932: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3933  \t\t\tcall error_stop\n 3934  \t\tend if\n 3935  \t\tif(B%getRank().ne.2)then\n 3936: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3937: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3938  \t\t\tcall error_stop\n 3939  \t\tend if\n ....\n 3956  \t\tinteger::Bdim(2),Adim(2),ib(2),jb(2),total\n 3957  \t\tif(A%getRank().ne.2)then\n 3958: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3959: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3960  \t\t\tcall error_stop\n 3961  \t\tend if\n ....\n 5005  !**************************************************************************************************************\n 5006  \n 5007: \tsubroutine writemess_Tensor(mess,cpu_number)!overwrite writemess\n 5008  \t\ttype(Tensor),intent(in)::mess\n 5009  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 5018  \t\tw=''\n 5019  \t\tif(.not.mess%getFlag())then\n 5020: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5021  \t\t\treturn\n 5022  \t\tend if\n 5023  \t\ttotoal=mess%getTotalData()\n 5024  \t\tif(totoal.eq.0)then\n 5025: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5026  \t\t\treturn\n 5027  \t\tend if\n ....\n 5031  \t\t\t\tselect case(rank)\n 5032  \t\t\t\t\tcase(1)\n 5033: \t\t\t\t\t\tcall writemess(mess%ii(),cpu_number)\n 5034  \t\t\t\t\tcase(2)\n 5035  \t\t\t\t\t\tcall mess%pointer(idata2)\n 5036  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5037: \t\t\t\t\t\t\tcall writemess(idata2(i,:),cpu_number)\n 5038  \t\t\t\t\t\tend do\n 5039  \t\t\t\t\tcase(3)\n 5040  \t\t\t\t\t\tcall mess%pointer(idata3)\n 5041  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5042: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5043  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5044: \t\t\t\t\t\t\t\tcall writemess(idata3(i,:,j),cpu_number)\n 5045  \t\t\t\t\t\t\tend do\n 5046  \t\t\t\t\t\tend do\n ....\n 5049  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5050  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5051: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5052  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5053: \t\t\t\t\t\t\t\t\tcall writemess(idata4(i,:,j,k),cpu_number)\n 5054  \t\t\t\t\t\t\t\tend do\n 5055  \t\t\t\t\t\t\tend do\n 5056  \t\t\t\t\t\tend do\n 5057  \t\t\t\t\tcase default\n 5058: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5059: \t\t\t\t\t\tcall writemess(mess%ii(),cpu_number)\n 5060: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5061  \t\t\t\t\tend select\n 5062  \t\t\tcase(2)\n 5063  \t\t\t\tselect case(rank)\n 5064  \t\t\t\t\tcase(1)\n 5065: \t\t\t\t\t\tcall writemess(mess%si(),cpu_number)\n 5066  \t\t\t\t\tcase(2)\n 5067  \t\t\t\t\t\tcall mess%pointer(sdata2)\n 5068  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5069: \t\t\t\t\t\t\tcall writemess(sdata2(i,:),cpu_number)\n 5070  \t\t\t\t\t\tend do\n 5071  \t\t\t\t\tcase(3)\n 5072  \t\t\t\t\t\tcall mess%pointer(sdata3)\n 5073  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5074: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5075  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5076: \t\t\t\t\t\t\t\tcall writemess(sdata3(i,:,j),cpu_number)\n 5077  \t\t\t\t\t\t\tend do\n 5078  \t\t\t\t\t\tend do\n ....\n 5081  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5082  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5083: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5084  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5085: \t\t\t\t\t\t\t\t\tcall writemess(sdata4(i,:,j,k),cpu_number)\n 5086  \t\t\t\t\t\t\t\tend do\n 5087  \t\t\t\t\t\t\tend do\n 5088  \t\t\t\t\t\tend do\n 5089  \t\t\t\t\tcase default\n 5090: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5091: \t\t\t\t\t\tcall writemess(mess%si(),cpu_number)\n 5092: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5093  \t\t\t\t\tend select\n 5094  \t\t\tcase(3)\n 5095  \t\t\t\tselect case(rank)\n 5096  \t\t\t\t\tcase(1)\n 5097: \t\t\t\t\t\tcall writemess(mess%di(),cpu_number)\n 5098  \t\t\t\t\tcase(2)\n 5099  \t\t\t\t\t\tcall mess%pointer(ddata2)\n 5100  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5101: \t\t\t\t\t\t\tcall writemess(ddata2(i,:),cpu_number)\n 5102  \t\t\t\t\t\tend do\n 5103  \t\t\t\t\tcase(3)\n 5104  \t\t\t\t\t\tcall mess%pointer(ddata3)\n 5105  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5106: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5107  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5108: \t\t\t\t\t\t\t\tcall writemess(ddata3(i,:,j),cpu_number)\n 5109  \t\t\t\t\t\t\tend do\n 5110  \t\t\t\t\t\tend do\n ....\n 5113  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5114  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5115: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5116  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5117: \t\t\t\t\t\t\t\t\tcall writemess(ddata4(i,:,j,k),cpu_number)\n 5118  \t\t\t\t\t\t\t\tend do\n 5119  \t\t\t\t\t\t\tend do\n 5120  \t\t\t\t\t\tend do\n 5121  \t\t\t\t\tcase default\n 5122: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5123: \t\t\t\t\t\tcall writemess(mess%di(),cpu_number)\n 5124: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5125  \t\t\t\t\tend select\n 5126  \t\t\tcase(4)\n 5127  \t\t\t\tselect case(rank)\n 5128  \t\t\t\t\tcase(1)\n 5129: \t\t\t\t\t\tcall writemess(mess%ci(),cpu_number)\n 5130  \t\t\t\t\tcase(2)\n 5131  \t\t\t\t\t\tcall mess%pointer(cdata2)\n 5132  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5133: \t\t\t\t\t\t\tcall writemess(cdata2(i,:),cpu_number)\n 5134  \t\t\t\t\t\tend do\n 5135  \t\t\t\t\tcase(3)\n 5136  \t\t\t\t\t\tcall mess%pointer(cdata3)\n 5137  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5138: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5139  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5140: \t\t\t\t\t\t\t\tcall writemess(cdata3(i,:,j),cpu_number)\n 5141  \t\t\t\t\t\t\tend do\n 5142  \t\t\t\t\t\tend do\n ....\n 5145  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5146  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5147: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5148  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5149: \t\t\t\t\t\t\t\t\tcall writemess(cdata4(i,:,j,k),cpu_number)\n 5150  \t\t\t\t\t\t\t\tend do\n 5151  \t\t\t\t\t\t\tend do\n 5152  \t\t\t\t\t\tend do\n 5153  \t\t\t\t\tcase default\n 5154: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5155: \t\t\t\t\t\tcall writemess(mess%ci(),cpu_number)\n 5156: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5157  \t\t\t\t\tend select\n 5158  \t\t\tcase(5)\n 5159  \t\t\t\tselect case(rank)\n 5160  \t\t\t\t\tcase(1)\n 5161: \t\t\t\t\t\tcall writemess(mess%zi(),cpu_number)\n 5162  \t\t\t\t\tcase(2)\n 5163  \t\t\t\t\t\tcall mess%pointer(zdata2)\n 5164  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5165: \t\t\t\t\t\t\tcall writemess(zdata2(i,:),cpu_number)\n 5166  \t\t\t\t\t\tend do\n 5167  \t\t\t\t\tcase(3)\n 5168  \t\t\t\t\t\tcall mess%pointer(zdata3)\n 5169  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5170: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5171  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5172: \t\t\t\t\t\t\t\tcall writemess(zdata3(i,:,j),cpu_number)\n 5173  \t\t\t\t\t\t\tend do\n 5174  \t\t\t\t\t\tend do\n ....\n 5177  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5178  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5179: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5180  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5181: \t\t\t\t\t\t\t\t\tcall writemess(zdata4(i,:,j,k),cpu_number)\n 5182  \t\t\t\t\t\t\t\tend do\n 5183  \t\t\t\t\t\t\tend do\n 5184  \t\t\t\t\t\tend do\n 5185  \t\t\t\t\tcase default\n 5186: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5187: \t\t\t\t\t\tcall writemess(mess%zi(),cpu_number)\n 5188: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5189  \t\t\t\t\tend select\n 5190  \t\t\tcase(6)\n 5191  \t\t\t\tselect case(rank)\n 5192  \t\t\t\t\tcase(1)\n 5193: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5194  \t\t\t\t\tcase(2)\n 5195  \t\t\t\t\t\tcall mess%pointer(ldata2)\n 5196  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5197: \t\t\t\t\t\t\tcall writemess(ldata2(i,:),cpu_number)\n 5198  \t\t\t\t\t\tend do\n 5199  \t\t\t\t\tcase(3)\n 5200  \t\t\t\t\t\tcall mess%pointer(ldata3)\n 5201  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5202: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5203  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5204: \t\t\t\t\t\t\t\tcall writemess(ldata3(i,:,j),cpu_number)\n 5205  \t\t\t\t\t\t\tend do\n 5206  \t\t\t\t\t\tend do\n ....\n 5209  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5210  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5211: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5212  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5213: \t\t\t\t\t\t\t\t\tcall writemess(ldata4(i,:,j,k),cpu_number)\n 5214  \t\t\t\t\t\t\t\tend do\n 5215  \t\t\t\t\t\t\tend do\n 5216  \t\t\t\t\t\tend do\n 5217  \t\t\t\t\tcase default\n 5218: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5219: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5220: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5221  \t\t\t\t\tend select\n 5222  \t\t\tcase(7)\n ....\n 5225  \t\t\t\tend do\n 5226  \t\t\t\tw=w+mess%ai(totoal)\n 5227: \t\t\t\tcall writemess(w,cpu_number)\n 5228  \t\tend select\n 5229  \t\treturn\n 5230  \tend subroutine\n 5231  \n 5232: \tsubroutine writemess_Tensor_form(mess,form,cpu_number)!overwrite writemess\n 5233  \t\ttype(Tensor),intent(in)::mess\n 5234  \t\tcharacter(len=*),intent(in)::form\n ....\n 5244  \t\tw=''\n 5245  \t\tif(.not.mess%getFlag())then\n 5246: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5247  \t\t\treturn\n 5248  \t\tend if\n 5249  \t\ttotoal=mess%getTotalData()\n 5250  \t\tif(totoal.eq.0)then\n 5251: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5252  \t\t\treturn\n 5253  \t\tend if\n ....\n 5257  \t\t\t\tselect case(rank)\n 5258  \t\t\t\t\tcase(1)\n 5259: \t\t\t\t\t\tcall writemess(mess%ii(),form,cpu_number)\n 5260  \t\t\t\t\tcase(2)\n 5261  \t\t\t\t\t\tcall mess%pointer(idata2)\n 5262  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5263: \t\t\t\t\t\t\tcall writemess(idata2(i,:),form,cpu_number)\n 5264  \t\t\t\t\t\tend do\n 5265  \t\t\t\t\tcase(3)\n 5266  \t\t\t\t\t\tcall mess%pointer(idata3)\n 5267  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5268: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5269  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5270: \t\t\t\t\t\t\t\tcall writemess(idata3(i,:,j),form,cpu_number)\n 5271  \t\t\t\t\t\t\tend do\n 5272  \t\t\t\t\t\tend do\n ....\n 5275  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5276  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5277: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5278  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5279: \t\t\t\t\t\t\t\t\tcall writemess(idata4(i,:,j,k),form,cpu_number)\n 5280  \t\t\t\t\t\t\t\tend do\n 5281  \t\t\t\t\t\t\tend do\n 5282  \t\t\t\t\t\tend do\n 5283  \t\t\t\t\tcase default\n 5284: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5285: \t\t\t\t\t\tcall writemess(mess%ii(),form,cpu_number)\n 5286: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5287  \t\t\t\t\tend select\n 5288  \t\t\tcase(2)\n 5289  \t\t\t\tselect case(rank)\n 5290  \t\t\t\t\tcase(1)\n 5291: \t\t\t\t\t\tcall writemess(mess%si(),form,cpu_number)\n 5292  \t\t\t\t\tcase(2)\n 5293  \t\t\t\t\t\tcall mess%pointer(sdata2)\n 5294  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5295: \t\t\t\t\t\t\tcall writemess(sdata2(i,:),form,cpu_number)\n 5296  \t\t\t\t\t\tend do\n 5297  \t\t\t\t\tcase(3)\n 5298  \t\t\t\t\t\tcall mess%pointer(sdata3)\n 5299  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5300: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5301  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5302: \t\t\t\t\t\t\t\tcall writemess(sdata3(i,:,j),form,cpu_number)\n 5303  \t\t\t\t\t\t\tend do\n 5304  \t\t\t\t\t\tend do\n ....\n 5307  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5308  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5309: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5310  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5311: \t\t\t\t\t\t\t\t\tcall writemess(sdata4(i,:,j,k),form,cpu_number)\n 5312  \t\t\t\t\t\t\t\tend do\n 5313  \t\t\t\t\t\t\tend do\n 5314  \t\t\t\t\t\tend do\n 5315  \t\t\t\t\tcase default\n 5316: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5317: \t\t\t\t\t\tcall writemess(mess%si(),form,cpu_number)\n 5318: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5319  \t\t\t\t\tend select\n 5320  \t\t\tcase(3)\n 5321  \t\t\t\tselect case(rank)\n 5322  \t\t\t\t\tcase(1)\n 5323: \t\t\t\t\t\tcall writemess(mess%di(),form,cpu_number)\n 5324  \t\t\t\t\tcase(2)\n 5325  \t\t\t\t\t\tcall mess%pointer(ddata2)\n 5326  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5327: \t\t\t\t\t\t\tcall writemess(ddata2(i,:),form,cpu_number)\n 5328  \t\t\t\t\t\tend do\n 5329  \t\t\t\t\tcase(3)\n 5330  \t\t\t\t\t\tcall mess%pointer(ddata3)\n 5331  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5332: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5333  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5334: \t\t\t\t\t\t\t\tcall writemess(ddata3(i,:,j),form,cpu_number)\n 5335  \t\t\t\t\t\t\tend do\n 5336  \t\t\t\t\t\tend do\n ....\n 5339  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5340  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5341: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5342  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5343: \t\t\t\t\t\t\t\t\tcall writemess(ddata4(i,:,j,k),form,cpu_number)\n 5344  \t\t\t\t\t\t\t\tend do\n 5345  \t\t\t\t\t\t\tend do\n 5346  \t\t\t\t\t\tend do\n 5347  \t\t\t\t\tcase default\n 5348: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5349: \t\t\t\t\t\tcall writemess(mess%di(),form,cpu_number)\n 5350: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5351  \t\t\t\t\tend select\n 5352  \t\t\tcase(4)\n 5353  \t\t\t\tselect case(rank)\n 5354  \t\t\t\t\tcase(1)\n 5355: \t\t\t\t\t\tcall writemess(mess%ci(),form,cpu_number)\n 5356  \t\t\t\t\tcase(2)\n 5357  \t\t\t\t\t\tcall mess%pointer(cdata2)\n 5358  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5359: \t\t\t\t\t\t\tcall writemess(cdata2(i,:),form,cpu_number)\n 5360  \t\t\t\t\t\tend do\n 5361  \t\t\t\t\tcase(3)\n 5362  \t\t\t\t\t\tcall mess%pointer(cdata3)\n 5363  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5364: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5365  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5366: \t\t\t\t\t\t\t\tcall writemess(cdata3(i,:,j),form,cpu_number)\n 5367  \t\t\t\t\t\t\tend do\n 5368  \t\t\t\t\t\tend do\n ....\n 5371  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5372  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5373: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5374  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5375: \t\t\t\t\t\t\t\t\tcall writemess(cdata4(i,:,j,k),form,cpu_number)\n 5376  \t\t\t\t\t\t\t\tend do\n 5377  \t\t\t\t\t\t\tend do\n 5378  \t\t\t\t\t\tend do\n 5379  \t\t\t\t\tcase default\n 5380: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5381: \t\t\t\t\t\tcall writemess(mess%ci(),form,cpu_number)\n 5382: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5383  \t\t\t\t\tend select\n 5384  \t\t\tcase(5)\n 5385  \t\t\t\tselect case(rank)\n 5386  \t\t\t\t\tcase(1)\n 5387: \t\t\t\t\t\tcall writemess(mess%zi(),form,cpu_number)\n 5388  \t\t\t\t\tcase(2)\n 5389  \t\t\t\t\t\tcall mess%pointer(zdata2)\n 5390  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5391: \t\t\t\t\t\t\tcall writemess(zdata2(i,:),form,cpu_number)\n 5392  \t\t\t\t\t\tend do\n 5393  \t\t\t\t\tcase(3)\n 5394  \t\t\t\t\t\tcall mess%pointer(zdata3)\n 5395  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5396: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5397  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5398: \t\t\t\t\t\t\t\tcall writemess(zdata3(i,:,j),form,cpu_number)\n 5399  \t\t\t\t\t\t\tend do\n 5400  \t\t\t\t\t\tend do\n ....\n 5403  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5404  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5405: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5406  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5407: \t\t\t\t\t\t\t\t\tcall writemess(zdata4(i,:,j,k),form,cpu_number)\n 5408  \t\t\t\t\t\t\t\tend do\n 5409  \t\t\t\t\t\t\tend do\n 5410  \t\t\t\t\t\tend do\n 5411  \t\t\t\t\tcase default\n 5412: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5413: \t\t\t\t\t\tcall writemess(mess%zi(),form,cpu_number)\n 5414: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5415  \t\t\t\t\tend select\n 5416  \t\t\tcase(6)\n 5417  \t\t\t\tselect case(rank)\n 5418  \t\t\t\t\tcase(1)\n 5419: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5420  \t\t\t\t\tcase(2)\n 5421  \t\t\t\t\t\tcall mess%pointer(ldata2)\n 5422  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5423: \t\t\t\t\t\t\tcall writemess(ldata2(i,:),cpu_number)\n 5424  \t\t\t\t\t\tend do\n 5425  \t\t\t\t\tcase(3)\n 5426  \t\t\t\t\t\tcall mess%pointer(ldata3)\n 5427  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5428: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5429  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5430: \t\t\t\t\t\t\t\tcall writemess(ldata3(i,:,j),cpu_number)\n 5431  \t\t\t\t\t\t\tend do\n 5432  \t\t\t\t\t\tend do\n ....\n 5435  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5436  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5437: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5438  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5439: \t\t\t\t\t\t\t\t\tcall writemess(ldata4(i,:,j,k),cpu_number)\n 5440  \t\t\t\t\t\t\t\tend do\n 5441  \t\t\t\t\t\t\tend do\n 5442  \t\t\t\t\t\tend do\n 5443  \t\t\t\t\tcase default\n 5444: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5445: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5446: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5447  \t\t\t\t\tend select\n 5448  \t\t\tcase(7)\n ....\n 5451  \t\t\t\tend do\n 5452  \t\t\t\tw=w+mess%ai(totoal)\n 5453: \t\t\t\tcall writemess(w,cpu_number)\n 5454  \t\tend select\n 5455  \t\treturn\n ....\n 5666  \t\tread(uni,*)notused\n 5667  \t\tif(notused.ne.'readable')then\n 5668: \t\t\tcall writemess(\"error in reading\",-1)\n 5669  \t\t\tcall error_stop()\n 5670  \t\tend if\n ....\n 5739  \t\tlogical,pointer::ldata(:,:),lldata(:)\n 5740  \t\tif(T%getRank().gt.2)then\n 5741: \t\t\tcall writemess('ERROR in reading data, only allow for rank<=2 Tensor',-1)\n 5742  \t\t\tcall error_stop\n 5743  \t\tend if\n ....\n 5758  \t\t\t\t\tnullify(dddata)\n 5759  \t\t\t\tcase(4)\n 5760: \t\t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5761: \t\t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5762: \t\t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5763: \t\t\t\t\tcall writemess('for example:A and B are real*4 Tensor.',-1)\n 5764: \t\t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5765: \t\t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5766: \t\t\t\t\tcall writemess(' C=cmplex(A,B).',-1)\n 5767  \t\t\t\t\tcall error_stop\n 5768  \t\t\t\tcase(5)\n 5769: \t\t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5770: \t\t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5771: \t\t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5772: \t\t\t\t\tcall writemess('for example:A and B are real*8 Tensor.',-1)\n 5773: \t\t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5774: \t\t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5775: \t\t\t\t\tcall writemess(' C=dcmplex(A,B).',-1)\n 5776  \t\t\t\t\tcall error_stop\n 5777  \t\t\t\tcase(6)\n ....\n 5809  \t\t\t\tnullify(ddata)\n 5810  \t\t\tcase(4)\n 5811: \t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5812: \t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5813: \t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5814: \t\t\t\tcall writemess('for example:A and B are real*4 Tensor.',-1)\n 5815: \t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5816: \t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5817: \t\t\t\tcall writemess(' C=cmplex(A,B).',-1)\n 5818  \t\t\t\tcall error_stop\n 5819  \t\t\tcase(5)\n 5820: \t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5821: \t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5822: \t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5823: \t\t\t\tcall writemess('for example:A and B are real*8 Tensor.',-1)\n 5824: \t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5825: \t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5826: \t\t\t\tcall writemess(' C=dcmplex(A,B).',-1)\n 5827  \t\t\t\tcall error_stop\n 5828  \t\t\tcase(6)\n ....\n 6228  \t\tCHARACTER(len=*),optional,intent(in)::words\n 6229  \t\tCHARACTER(len=20)::classTypeChar\n 6230: \t\tcall writemess(\"==================\",-1)\n 6231: \t\tcall writemess(\"------------------\",-1)\n 6232: \t\tcall writemess(words)\n 6233  \t\tif(getflag(T)) then!if1\n 6234: \t\t\tcall writemess(\"*** START ***\",-1)\n 6235  \t\t\tclassTypeChar=getclassType(T)\n 6236  \t\t\tif(ifDynamic(T))then\n 6237: \t\t\t\tcall writemess('Dynamic class Tensor,data type is '+(' '+classTypeChar),-1)\n 6238  \t\t\telse\n 6239: \t\t\t\tcall writemess('static class Tensor,data type is '+(' '+classTypeChar),-1)\n 6240  \t\t\tend if\n 6241: \t\t\tcall writemess(\"The rank of the Tensor is\",-1)\n 6242: \t\t\tcall writemess(''+T%rank)\n 6243: \t\t\tcall writemess(\"The number of  data of the Tensor is\",-1)\n 6244: \t\t\tcall writemess(''+getTotalData(T),-1)\n 6245  \t\t\tcall T%TenDim%print()\n 6246: \t\t\tcall writemess( \"***end***\",-1)\n 6247: \t\t\tcall writemess(\"\",-1)\n 6248  \t\telse!if1\n 6249: \t\t\tcall writemess(\"There is no data\",-1)\n 6250  \t\tend if!if1\n 6251  \t\treturn\n ....\n 6297  \t\tinteger,intent(in) :: inde\n 6298  \t\tif(.not.T%getFlag())then\n 6299: \t\t\tcall writemess('There is no data in the Tensor, when getting the ith dimension. ith='+inde,-1)\n 6300  \t\t\tcall error_stop()\n 6301  \t\tend if\n ....\n 6308  \t\tinteger :: inde\n 6309  \t\tif(.not.T%getFlag())then\n 6310: \t\t\tcall writemess('There is no data in the Tensor, when getting the dimension whose name is :'+w,-1)\n 6311  \t\t\tcall error_stop()\n 6312  \t\tend if\n ....\n 6322  \t\tclass(Tensor),intent(in) :: T\n 6323  \t\tif(.not.T%getFlag())then\n 6324: \t\t\tcall writemess('There is no data in the Tensor, when getting type(dimension)',-1)\n 6325  \t\t\tcall error_stop()\n 6326  \t\tend if\n ....\n 6332  \t\tclass(Tensor),intent(in) :: T\n 6333  \t\tif(.not.T%getFlag())then\n 6334: \t\t\tcall writemess('There is no data in the Tensor, when getting dimension',-1)\n 6335  \t\t\tcall error_stop()\n 6336  \t\tend if\n ....\n 6343  \t\tinteger,intent(in)::inde\n 6344  \t\tif(.not.T%getFlag())then\n 6345: \t\t\tcall writemess('There is no data in the Tensor, when getting sub type(dimension)',-1)\n 6346  \t\t\tcall error_stop()\n 6347  \t\tend if\n ....\n 6353  \t\tinteger,intent(in)::inde(2)\n 6354  \t\tif(.not.T%getFlag())then\n 6355: \t\t\tcall writemess('There is no data in the Tensor, when getting sub type(dimension)',-1)\n 6356  \t\t\tcall error_stop()\n 6357  \t\tend if\n ....\n 6364  \t\tinteger::inde\n 6365  \t\tif(.not.T%getFlag())then\n 6366: \t\t\tcall writemess('There is no data in the Tensor, when getting type(dimension)',-1)\n 6367  \t\t\tcall error_stop()\n 6368  \t\tend if\n ....\n 6668  \t\tif(T%rank.eq.1)then\n 6669  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6670: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6671  \t\t\t\tcall error_stop()\n 6672  \t\t\tend if\n ....\n 6676  \t\tif(T%rank.eq.2)then\n 6677  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6678: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6679  \t\t\t\tcall error_stop()\n 6680  \t\t\tend if\n ....\n 6684  \t\tif(T%rank.eq.3)then\n 6685  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6686: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6687  \t\t\t\tcall error_stop()\n 6688  \t\t\tend if\n ....\n 6692  \t\tif(T%rank.eq.4)then\n 6693  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6694: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6695  \t\t\t\tcall error_stop()\n 6696  \t\t\tend if\n ....\n 6700  \t\tinde=addressToIndes(T,Tdim)\n 6701  \t\tif(inde.gt.getTotalData(T))Then\n 6702: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6703  \t\t\tcall error_stop()\n 6704  \t\tend if\n ....\n 6716  \t\tif(T%rank.eq.1)then\n 6717  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6718: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6719  \t\t\t\tcall error_stop()\n 6720  \t\t\tend if\n ....\n 6724  \t\tif(T%rank.eq.2)then\n 6725  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6726: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6727  \t\t\t\tcall error_stop()\n 6728  \t\t\tend if\n ....\n 6732  \t\tif(T%rank.eq.3)then\n 6733  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6734: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6735  \t\t\t\tcall error_stop()\n 6736  \t\t\tend if\n ....\n 6740  \t\tif(T%rank.eq.4)then\n 6741  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6742: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6743  \t\t\t\tcall error_stop()\n 6744  \t\t\tend if\n ....\n 6748  \t\tinde=addressToIndes(T,Tdim)\n 6749  \t\tif(inde.gt.getTotalData(T))Then\n 6750: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6751  \t\t\tcall error_stop()\n 6752  \t\tend if\n ....\n 6764  \t\tif(T%rank.eq.1)then\n 6765  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6766: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6767  \t\t\t\tcall error_stop()\n 6768  \t\t\tend if\n ....\n 6772  \t\tif(T%rank.eq.2)then\n 6773  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6774: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6775  \t\t\t\tcall error_stop()\n 6776  \t\t\tend if\n ....\n 6780  \t\tif(T%rank.eq.3)then\n 6781  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6782: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6783  \t\t\t\tcall error_stop()\n 6784  \t\t\tend if\n ....\n 6788  \t\tif(T%rank.eq.4)then\n 6789  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6790: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6791  \t\t\t\tcall error_stop()\n 6792  \t\t\tend if\n ....\n 6796  \t\tinde=addressToIndes(T,Tdim)\n 6797  \t\tif(inde.gt.getTotalData(T))Then\n 6798: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6799  \t\t\tcall error_stop()\n 6800  \t\tend if\n ....\n 6813  \t\tif(T%rank.eq.1)then\n 6814  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6815: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6816  \t\t\t\tcall error_stop()\n 6817  \t\t\tend if\n ....\n 6821  \t\tif(T%rank.eq.2)then\n 6822  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6823: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6824  \t\t\t\tcall error_stop()\n 6825  \t\t\tend if\n ....\n 6829  \t\tif(T%rank.eq.3)then\n 6830  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6831: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6832  \t\t\t\tcall error_stop()\n 6833  \t\t\tend if\n ....\n 6837  \t\tif(T%rank.eq.4)then\n 6838  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6839: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6840  \t\t\t\tcall error_stop()\n 6841  \t\t\tend if\n ....\n 6845  \t\tinde=addressToIndes(T,Tdim)\n 6846  \t\tif(inde.gt.getTotalData(T))Then\n 6847: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6848  \t\t\tcall error_stop()\n 6849  \t\tend if\n ....\n 6861  \t\tif(T%rank.eq.1)then\n 6862  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6863: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6864: \t\t\t\tcall writemess(\"you have input:\"+Tdim(1))\n 6865  \t\t\t\tcall error_stop()\n 6866  \t\t\tend if\n ....\n 6870  \t\tif(T%rank.eq.2)then\n 6871  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6872: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6873: \t\t\t\tcall writemess(\"you have input:(\"+Tdim(1)+\",\"+Tdim(2)+\")\")\n 6874: \t\t\t\tcall writemess(\"dimension of T is input:(\"+(T.dim.1)+\",\"+(T.dim.2)+\")\")\n 6875  \t\t\t\tcall error_stop()\n 6876  \t\t\tend if\n ....\n 6880  \t\tif(T%rank.eq.3)then\n 6881  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6882: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6883  \t\t\t\tcall error_stop()\n 6884  \t\t\tend if\n ....\n 6888  \t\tif(T%rank.eq.4)then\n 6889  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6890: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6891  \t\t\t\tcall error_stop()\n 6892  \t\t\tend if\n ....\n 6896  \t\tinde=addressToIndes(T,Tdim)\n 6897  \t\tif(inde.gt.getTotalData(T))Then\n 6898: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6899  \t\t\tcall error_stop()\n 6900  \t\tend if\n ....\n 6912  \t\tif(T%rank.eq.1)then\n 6913  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6914: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6915  \t\t\t\tcall error_stop()\n 6916  \t\t\tend if\n ....\n 6920  \t\tif(T%rank.eq.2)then\n 6921  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6922: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6923  \t\t\t\tcall error_stop()\n 6924  \t\t\tend if\n ....\n 6928  \t\tif(T%rank.eq.3)then\n 6929  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6930: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6931  \t\t\t\tcall error_stop()\n 6932  \t\t\tend if\n ....\n 6936  \t\tif(T%rank.eq.4)then\n 6937  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6938: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6939  \t\t\t\tcall error_stop()\n 6940  \t\t\tend if\n ....\n 6944  \t\tinde=addressToIndes(T,Tdim)\n 6945  \t\tif(inde.gt.getTotalData(T))Then\n 6946: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6947  \t\t\tcall error_stop()\n 6948  \t\tend if\n ....\n 6961  \t\tif(T%rank.eq.1)then\n 6962  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6963: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6964  \t\t\t\tcall error_stop()\n 6965  \t\t\tend if\n ....\n 6969  \t\tif(T%rank.eq.2)then\n 6970  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6971: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6972  \t\t\t\tcall error_stop()\n 6973  \t\t\tend if\n ....\n 6977  \t\tif(T%rank.eq.3)then\n 6978  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6979: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6980  \t\t\t\tcall error_stop()\n 6981  \t\t\tend if\n ....\n 6985  \t\tif(T%rank.eq.4)then\n 6986  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6987: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6988  \t\t\t\tcall error_stop()\n 6989  \t\t\tend if\n ....\n 6993  \t\tinde=addressToIndes(T,Tdim)\n 6994  \t\tif(inde.gt.getTotalData(T))Then\n 6995: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6996  \t\t\tcall error_stop()\n 6997  \t\tend if\n ....\n 7018  \t\t\t\tElement=T%ai(Tdim)\n 7019  \t\t\tcase default\n 7020: \t\t\t\tcall writemess(\"ERROR in TElement\",-1)\n 7021  \t\t\t\tcall error_stop()\n 7022  \t\tend select\n ....\n 7042  \t\t\t\tElement=T%ai(Tdim)\n 7043  \t\t\tcase default\n 7044: \t\t\t\tcall writemess(\"ERROR in TElement\",-1)\n 7045  \t\t\t\tcall error_stop()\n 7046  \t\tend select\n ....\n 7640  \t\tlens=getTotalData(s)\n 7641  \t\tif(s%getRank().ne.1)then\n 7642: \t\t\tcall writemess('ERROR in eye(T), input T should be a vector(rank=1)')\n 7643  \t\t\tcall s%diminfo()\n 7644  \t\t\tcall error_stop\n ....\n 7663  \t\trank=T%getRank()\n 7664  \t\tif(rank.ne.2)then\n 7665: \t\t\tcall writemess(\"ERROR in set eye in Tensor,input should be a matrix\",-1)\n 7666  \t\t\tcall error_stop()\n 7667  \t\tend if\n ....\n 7845  \t\tif(Ten%rank.eq.1) then\n 7846  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 7847: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7848  \t\t\t\tcall error_stop()\n 7849  \t\t\tend if\n ....\n 7855  \t\tif(Ten%rank.eq.2) then\n 7856  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 7857: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7858  \t\t\t\tcall error_stop()\n 7859  \t\t\tend if\n ....\n 7865  \t\tif(Ten%rank.eq.3) then\n 7866  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 7867: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7868  \t\t\t\tcall error_stop()\n 7869  \t\t\tend if\n ....\n 7876  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 7877  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 7878: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7879  \t\t\t\tcall error_stop()\n 7880  \t\t\tend if\n ....\n 7886  \t\taddre=addressToIndes(Ten,dimen)\n 7887  \t\tif(addre.gt.getTotalData(Ten))Then\n 7888: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7889  \t\t\tcall error_stop()\n 7890  \t\tend if\n ....\n 7901  \t\tif(Ten%rank.eq.1) then\n 7902  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 7903: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7904  \t\t\t\tcall error_stop()\n 7905  \t\t\tend if\n ....\n 7911  \t\tif(Ten%rank.eq.2) then\n 7912  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 7913: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7914  \t\t\t\tcall error_stop()\n 7915  \t\t\tend if\n ....\n 7921  \t\tif(Ten%rank.eq.3) then\n 7922  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 7923: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7924  \t\t\t\tcall error_stop()\n 7925  \t\t\tend if\n ....\n 7932  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 7933  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 7934: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7935  \t\t\t\tcall error_stop()\n 7936  \t\t\tend if\n ....\n 7942  \t\taddre=addressToIndes(Ten,dimen)\n 7943  \t\tif(addre.gt.getTotalData(Ten))Then\n 7944: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7945  \t\t\tcall error_stop()\n 7946  \t\tend if\n ....\n 7957  \t\tif(Ten%rank.eq.1) then\n 7958  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 7959: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7960  \t\t\t\tcall error_stop()\n 7961  \t\t\tend if\n ....\n 7967  \t\tif(Ten%rank.eq.2) then\n 7968  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 7969: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7970  \t\t\t\tcall error_stop()\n 7971  \t\t\tend if\n ....\n 7977  \t\tif(Ten%rank.eq.3) then\n 7978  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 7979: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7980  \t\t\t\tcall error_stop()\n 7981  \t\t\tend if\n ....\n 7988  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 7989  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 7990: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7991  \t\t\t\tcall error_stop()\n 7992  \t\t\tend if\n ....\n 7998  \t\taddre=addressToIndes(Ten,dimen)\n 7999  \t\tif(addre.gt.getTotalData(Ten))Then\n 8000: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8001  \t\t\tcall error_stop()\n 8002  \t\tend if\n ....\n 8013  \t\tif(Ten%rank.eq.1) then\n 8014  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8015: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8016  \t\t\t\tcall error_stop()\n 8017  \t\t\tend if\n ....\n 8023  \t\tif(Ten%rank.eq.2) then\n 8024  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8025: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8026  \t\t\t\tcall error_stop()\n 8027  \t\t\tend if\n ....\n 8033  \t\tif(Ten%rank.eq.3) then\n 8034  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8035: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8036  \t\t\t\tcall error_stop()\n 8037  \t\t\tend if\n ....\n 8044  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8045  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8046: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8047  \t\t\t\tcall error_stop()\n 8048  \t\t\tend if\n ....\n 8054  \t\taddre=addressToIndes(Ten,dimen)\n 8055  \t\tif(addre.gt.getTotalData(Ten))Then\n 8056: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8057  \t\t\tcall error_stop()\n 8058  \t\tend if\n ....\n 8069  \t\tif(Ten%rank.eq.1) then\n 8070  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8071: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8072  \t\t\t\tcall error_stop()\n 8073  \t\t\tend if\n ....\n 8079  \t\tif(Ten%rank.eq.2) then\n 8080  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8081: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8082  \t\t\t\tcall error_stop()\n 8083  \t\t\tend if\n ....\n 8089  \t\tif(Ten%rank.eq.3) then\n 8090  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8091: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8092  \t\t\t\tcall error_stop()\n 8093  \t\t\tend if\n ....\n 8100  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8101  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8102: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8103  \t\t\t\tcall error_stop()\n 8104  \t\t\tend if\n ....\n 8110  \t\taddre=addressToIndes(Ten,dimen)\n 8111  \t\tif(addre.gt.getTotalData(Ten))Then\n 8112: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8113  \t\t\tcall error_stop()\n 8114  \t\tend if\n ....\n 8125  \t\tif(Ten%rank.eq.1) then\n 8126  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8127: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8128  \t\t\t\tcall error_stop()\n 8129  \t\t\tend if\n ....\n 8135  \t\tif(Ten%rank.eq.2) then\n 8136  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8137: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8138  \t\t\t\tcall error_stop()\n 8139  \t\t\tend if\n ....\n 8145  \t\tif(Ten%rank.eq.3) then\n 8146  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8147: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8148  \t\t\t\tcall error_stop()\n 8149  \t\t\tend if\n ....\n 8156  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8157  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8158: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8159  \t\t\t\tcall error_stop()\n 8160  \t\t\tend if\n ....\n 8166  \t\taddre=addressToIndes(Ten,dimen)\n 8167  \t\tif(addre.gt.getTotalData(Ten))Then\n 8168: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8169  \t\t\tcall error_stop()\n 8170  \t\tend if\n ....\n 8181  \t\tif(Ten%rank.eq.1) then\n 8182  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8183: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8184  \t\t\t\tcall error_stop()\n 8185  \t\t\tend if\n ....\n 8191  \t\tif(Ten%rank.eq.2) then\n 8192  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8193: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8194  \t\t\t\tcall error_stop()\n 8195  \t\t\tend if\n ....\n 8201  \t\tif(Ten%rank.eq.3) then\n 8202  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8203: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8204  \t\t\t\tcall error_stop()\n 8205  \t\t\tend if\n ....\n 8212  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8213  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8214: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8215  \t\t\t\tcall error_stop()\n 8216  \t\t\tend if\n ....\n 8222  \t\taddre=addressToIndes(Ten,dimen)\n 8223  \t\tif(addre.gt.getTotalData(Ten))Then\n 8224: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8225  \t\t\tcall error_stop()\n 8226  \t\tend if\n ....\n 8236  \t\ttype(Tensor),intent(in)::val\n 8237  \t\tif(val%getTotalData().ne.1)then\n 8238: \t\t\tcall writemess(\"Do no finished this case, in modifyTen_val_Tensor\",-1)\n 8239  \t\t\tcall error_stop()\n 8240  \t\tend if\n 8241  \t\tif(.not.val%getFlag())then\n 8242: \t\t\tcall writemess(\"There is no data in input element, setValue(element)\",-1)\n 8243  \t\t\tcall error_stop()\n 8244  \t\tend if\t\n ....\n 8259  \t\t\t\tcall modifyTen_val_class_a(Ten,dimen,val%ai(1))\n 8260  \t\t\tcase default\n 8261: \t\t\t\tcall writemess(\"ERROR in modifyTen_val_Tensor\",-1)\n 8262  \t\t\t\tcall error_stop()\n 8263  \t\tend select\n ....\n 8370  \t\tclass(Tensor),intent(in)::val\n 8371  \t\tif(val%getTotalData().ne.1)then\n 8372: \t\t\tcall writemess(\"Do no finished this case, in modifyTen_val_Tensor\",-1)\n 8373  \t\t\tcall error_stop()\n 8374  \t\tend if\n ....\n 8389  \t\t\t\tcall modifyTen_val_class(Ten,(/dimen/),val%ai(1))\n 8390  \t\t\tcase default\n 8391: \t\t\t\tcall writemess(\"ERROR in modifyTen_val_Tensor\",-1)\n 8392  \t\t\t\tcall error_stop()\n 8393  \t\tend select\n ....\n 8429  \t\tinteger::classtype\n 8430  \t\tif((.not.T1%getflag()).or.(.not.T2%getflag()))then\n 8431: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8432  \t\t\tcall error_stop()\n 8433  \t\tend if\n ....\n 8435  \t\tdim2=T2%TenDim\n 8436  \t\tif(T1%getTotalData().ne.T2%getTotalData()) then\n 8437: \t\t\tcall writemess(\"The totalData of T1 and T2 are not the same,(+)\",-1)\n 8438: \t\t\tcall writemess(T1%getTotalData()+','+T2%getTotalData(),-1)\n 8439: \t\t\tcall writemess(\"The program will stop\",-1)\n 8440  \t\t\tcall error_stop()\n 8441  \t\tend if\n ....\n 8451  \t\tinteger::classtype\n 8452  \t\tif(.not.T1%getflag())then\n 8453: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8454  \t\t\tcall error_stop()\n 8455  \t\tend if\n ....\n 8465  \t\tinteger::classtype\n 8466  \t\tif(.not.T1%getflag())then\n 8467: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8468  \t\t\tcall error_stop()\n 8469  \t\tend if\n ....\n 8479  \t\tinteger::classtype\n 8480  \t\tif(.not.T1%getflag())then\n 8481: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8482  \t\t\tcall error_stop()\n 8483  \t\tend if\n ....\n 8493  \t\tinteger::classtype\n 8494  \t\tif(.not.T1%getflag())then\n 8495: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8496  \t\t\tcall error_stop()\n 8497  \t\tend if\n ....\n 8507  \t\tinteger::classtype\n 8508  \t\tif(.not.T1%getflag())then\n 8509: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8510  \t\t\tcall error_stop()\n 8511  \t\tend if\n ....\n 8521  \t\tinteger::classtype\n 8522  \t\tif(.not.T1%getflag())then\n 8523: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8524  \t\t\tcall error_stop()\n 8525  \t\tend if\n ....\n 8535  \t\tinteger::classtype\n 8536  \t\tif(.not.T1%getflag())then\n 8537: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8538  \t\t\tcall error_stop()\n 8539  \t\tend if\n ....\n 8549  \t\tinteger::classtype\n 8550  \t\tif(.not.T1%getflag())then\n 8551: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8552  \t\t\tcall error_stop()\n 8553  \t\tend if\n ....\n 8563  \t\tinteger::classtype\n 8564  \t\tif(.not.T1%getflag())then\n 8565: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8566  \t\t\tcall error_stop()\n 8567  \t\tend if\n ....\n 8577  \t\tinteger::classtype\n 8578  \t\tif(.not.T1%getflag())then\n 8579: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8580  \t\t\tcall error_stop()\n 8581  \t\tend if\n ....\n 8591  \t\tinteger::classtype\n 8592  \t\tif(.not.T1%getflag())then\n 8593: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8594  \t\t\tcall error_stop()\n 8595  \t\tend if\n ....\n 8605  \t\tinteger::classtype\n 8606  \t\tif(.not.T1%getflag())then\n 8607: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8608  \t\t\tcall error_stop()\n 8609  \t\tend if\n ....\n 8618  \t\tinteger::classtype\n 8619  \t\tif((.not.T1%getflag()).or.(.not.T2%getflag()))then\n 8620: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8621  \t\t\tcall error_stop()\n 8622  \t\tend if\n ....\n 8624  \t\tdim2=T2%TenDim\n 8625  \t\tif(.not.(dim1.equ.dim2)) then\n 8626: \t\t\tcall writemess(\"The dimension of T1 and T2 are not the same,in (-)\")\n 8627: \t\t\tcall writemess(\"The program will stop\")\n 8628  \t\t\tcall error_stop()\n 8629  \t\tend if\n ....\n 8639  \t\tinteger::classtype\n 8640  \t\tif(.not.T1%getflag())then\n 8641: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\")\n 8642  \t\t\tcall error_stop()\n 8643  \t\tend if\n ....\n 8653  \t\tinteger::classtype\n 8654  \t\tif(.not.T1%getflag())then\n 8655: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\")\n 8656  \t\t\tcall error_stop()\n 8657  \t\tend if\n ....\n 8667  \t\tinteger::classtype\n 8668  \t\tif(.not.T1%getflag())then\n 8669: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\")\n 8670  \t\t\tcall error_stop()\n 8671  \t\tend if\n ....\n 8681  \t\tinteger::classtype\n 8682  \t\tif(.not.T1%getflag())then\n 8683: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8684  \t\t\tcall error_stop()\n 8685  \t\tend if\n ....\n 8695  \t\tinteger::classtype\n 8696  \t\tif(.not.T1%getflag())then\n 8697: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8698  \t\t\tcall error_stop()\n 8699  \t\tend if\n ....\n 8709  \t\tinteger::classtype\n 8710  \t\tif(.not.T1%getflag())then\n 8711: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8712  \t\t\tcall error_stop()\n 8713  \t\tend if\n ....\n 8723  \t\tinteger::classtype\n 8724  \t\tif(.not.T1%getflag())then\n 8725: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8726  \t\t\tcall error_stop()\n 8727  \t\tend if\n ....\n 8737  \t\tinteger::classtype\n 8738  \t\tif(.not.T1%getflag())then\n 8739: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8740  \t\t\tcall error_stop()\n 8741  \t\tend if\n ....\n 8751  \t\tinteger::classtype\n 8752  \t\tif(.not.T1%getflag())then\n 8753: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8754  \t\t\tcall error_stop()\n 8755  \t\tend if\n ....\n 8765  \t\tinteger::classtype\n 8766  \t\tif(.not.T1%getflag())then\n 8767: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8768  \t\t\tcall error_stop()\n 8769  \t\tend if\n ....\n 8780  \t\tinteger::classtype\n 8781  \t\tif(.not.T1%getflag())then\n 8782: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8783  \t\t\tcall error_stop()\n 8784  \t\tend if\n ....\n 8793  \t\tinteger::classtype\n 8794  \t\tif(.not.T1%getflag())then\n 8795: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8796  \t\t\tcall error_stop()\n 8797  \t\tend if\n ....\n 8806  \t\tinteger::classtype\n 8807  \t\tif(.not.T1%getflag())then\n 8808: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8809  \t\t\tcall error_stop()\n 8810  \t\tend if\n ....\n 8819  \t\tinteger::classtype\n 8820  \t\tif(.not.T1%getflag())then\n 8821: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8822  \t\t\tcall error_stop()\n 8823  \t\tend if\n ....\n 8832  \t\tinteger::classtype\n 8833  \t\tif(.not.T1%getflag())then\n 8834: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8835  \t\t\tcall error_stop()\n 8836  \t\tend if\n ....\n 8846  \t\tinteger::classtype\n 8847  \t\tif(.not.T1%getflag())then\n 8848: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8849  \t\t\tcall error_stop()\n 8850  \t\tend if\n ....\n 8859  \t\tinteger::classtype\n 8860  \t\tif(.not.T1%getflag())then\n 8861: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8862  \t\t\tcall error_stop()\n 8863  \t\tend if\n ....\n 8872  \t\tinteger::classtype\n 8873  \t\tif(.not.T1%getflag())then\n 8874: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8875  \t\t\tcall error_stop()\n 8876  \t\tend if\n ....\n 8885  \t\tinteger::classtype\n 8886  \t\tif(.not.T1%getflag())then\n 8887: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8888  \t\t\tcall error_stop()\n 8889  \t\tend if\n ....\n 8898  \t\tinteger::classtype\n 8899  \t\tif(.not.T1%getflag())then\n 8900: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8901  \t\t\tcall error_stop()\n 8902  \t\tend if\n ....\n 8914  \t\tinteger::classtype\n 8915  \t\tif(T%getTotalData().ne.1)then\n 8916: \t\t\tcall writemess(\"ERROR in T1/T2, T2 should be lengh=1\",-1)\n 8917  \t\t\tcall error_stop()\n 8918  \t\tend if\n ....\n 8927  \t\tinteger::classtype,Aclasstype\n 8928  \t\tif(T%getTotalData().ne.1)then\n 8929: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8930  \t\t\tcall error_stop()\n 8931  \t\tend if\n ....\n 8941  \t\tinteger::classtype,Aclasstype\n 8942  \t\tif(T%getTotalData().ne.1)then\n 8943: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8944  \t\t\tcall error_stop()\n 8945  \t\tend if\n ....\n 8955  \t\tinteger::classtype,Aclasstype\n 8956  \t\tif(T%getTotalData().ne.1)then\n 8957: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8958  \t\t\tcall error_stop()\n 8959  \t\tend if\n ....\n 8969  \t\tinteger::classtype,Aclasstype\n 8970  \t\tif(T%getTotalData().ne.1)then\n 8971: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8972  \t\t\tcall error_stop()\n 8973  \t\tend if\n ....\n 8983  \t\tinteger::classtype,Aclasstype\n 8984  \t\tif(T%getTotalData().ne.1)then\n 8985: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8986  \t\t\tcall error_stop()\n 8987  \t\tend if\n ....\n 8997  \t\tinteger::classtype\n 8998  \t\tif(.not.T1%getflag())then\n 8999: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9000  \t\t\tcall error_stop()\n 9001  \t\tend if\n ....\n 9010  \t\tinteger::classtype\n 9011  \t\tif(.not.T1%getflag())then\n 9012: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9013  \t\t\tcall error_stop()\n 9014  \t\tend if\n ....\n 9023  \t\tinteger::classtype\n 9024  \t\tif(.not.T1%getflag())then\n 9025: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9026  \t\t\tcall error_stop()\n 9027  \t\tend if\n ....\n 9036  \t\tinteger::classtype\n 9037  \t\tif(.not.T1%getflag())then\n 9038: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9039  \t\t\tcall error_stop()\n 9040  \t\tend if\n ....\n 9049  \t\tinteger::classtype\n 9050  \t\tif(.not.T1%getflag())then\n 9051: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9052  \t\t\tcall error_stop()\n 9053  \t\tend if\n ....\n 9137  \t\t\t\t\t\telse \n 9138  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9139: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9140  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9141  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9143  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9144  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9145: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9146  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9147  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9166  \t\t\t\t\t\t\telse\n 9167  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9168: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9169  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9170  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9172  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9173  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9174: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9175  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9176  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9189  \t\t\t\t\t\t\tend if\n 9190  \t\t\t\t\telse\n 9191: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9192  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9193  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9198  \t\t\t\tT2n=T2.dim.1\n 9199  \t\t\t\tif(T1m.ne.T2n) then\n 9200: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9201  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9202  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9214  \t\t\t\tT2n=D2.i.2\n 9215  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9216: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9217  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9218  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9234  \t\t\t\tT1n=D1.i.2\n 9235  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 9236: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 9237  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9238  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9256  \t\t\t\tend if\n 9257  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 9258: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 9259  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9260  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9309  \t\tT2p=>T2\n 9310  \t\tif(associated(Resp,T1p).or.associated(Resp,T2p))then\n 9311: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 9312: \t\t\tcall writemess('error in call T%ProductTensorRoutine(Res,T1,T2,alpha,beta)')\n 9313: \t\t\tcall writemess('Res and T1, or Res and T2, can not be a same variable')\n 9314  \t\t\tcall error_stop\n 9315  \t\tend if\n ....\n 9391  \t\t\t\t\t\telse \n 9392  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9393: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9394  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9395  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9397  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9398  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9399: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9400  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9401  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9426  \t\t\t\t\t\t\telse\n 9427  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9428: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9429  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9430  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9432  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9433  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9434: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9435  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9436  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9452  \t\t\t\t\t\t\tend if\n 9453  \t\t\t\t\telse\n 9454: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9455  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9456  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9461  \t\t\t\tT2n=T2.dim.1\n 9462  \t\t\t\tif(T1m.ne.T2n) then\n 9463: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9464  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9465  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9480  \t\t\t\tT2n=D2.i.2\n 9481  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9482: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9483  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9484  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9503  \t\t\t\tT1n=D1.i.2\n 9504  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 9505: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 9506  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9507  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9528  \t\t\t\tend if\n 9529  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 9530: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 9531  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9532  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9582  \t\tT2p=>T2\n 9583  \t\tif(associated(Resp,T1p).or.associated(Resp,T2p))then\n 9584: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 9585: \t\t\tcall writemess('error in call T%ProductTensorRoutine(Res,T1,T2,alpha,beta)')\n 9586: \t\t\tcall writemess('Res and T1, or Res and T2, can not be a same variable')\n 9587  \t\t\tcall error_stop\n 9588  \t\tend if\n ....\n 9648  \t\t\t\t\t\telse \n 9649  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9650: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9651  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9652  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9654  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9655  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9656: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9657  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9658  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9677  \t\t\t\t\t\t\telse\n 9678  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9679: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9680  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9681  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9683  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9684  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9685: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9686  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9687  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9700  \t\t\t\t\t\t\tend if\n 9701  \t\t\t\t\telse\n 9702: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9703  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9704  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9709  \t\t\t\tT2n=T2.dim.1\n 9710  \t\t\t\tif(T1m.ne.T2n) then\n 9711: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9712  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9713  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9725  \t\t\t\tT2n=D2.i.2\n 9726  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9727: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9728  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9729  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9745  \t\t\t\tT1n=D1.i.2\n 9746  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 9747: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 9748  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9749  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9767  \t\t\t\tend if\n 9768  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 9769: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 9770  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9771  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9822  \t\tT2p=>T2\n 9823  \t\tif(associated(Resp,T1p).or.associated(Resp,T2p))then\n 9824: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 9825: \t\t\tcall writemess('error in call T%ProductTensorRoutine(Res,T1,T2,alpha,beta)')\n 9826: \t\t\tcall writemess('Res and T1, or Res and T2, can not be a same variable')\n 9827  \t\t\tcall error_stop\n 9828  \t\tend if\n ....\n 9904  \t\t\t\t\t\telse \n 9905  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9906: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9907  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9908  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9910  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9911  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9912: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9913  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9914  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9939  \t\t\t\t\t\t\telse\n 9940  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9941: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9942  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9943  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9945  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9946  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9947: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9948  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9949  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9965  \t\t\t\t\t\t\tend if\n 9966  \t\t\t\t\telse\n 9967: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9968  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9969  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9974  \t\t\t\tT2n=T2.dim.1\n 9975  \t\t\t\tif(T1m.ne.T2n) then\n 9976: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9977  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9978  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9993  \t\t\t\tT2n=D2.i.2\n 9994  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9995: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9996  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9997  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 10016  \t\t\t\tT1n=D1.i.2\n 10017  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 10018: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 10019  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 10020  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n .....\n 10041  \t\t\t\tend if\n 10042  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 10043: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 10044  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 10045  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n .....\n 10136  \t\ttype(Tensor),intent(in)::this1,this2\n 10137  \t\tif(this1%gettype().gt.3)then\n 10138: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10139  \t\t\tcall error_stop()\n 10140  \t\tend if\n 10141  \t\tif(this2%getType().gt.3)then\n 10142: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10143  \t\t\tcall error_stop()\n 10144  \t\tend if\n 10145  \t\tif(this1%gettotalData().ne.this2%gettotalData())then\n 10146: \t\t\tcall writemess(\"error in cmplx,totaldata\",-1)\n 10147  \t\t\tcall error_stop()\n 10148  \t\tend if\n .....\n 10154  \t\ttype(Tensor),intent(in)::this1,this2\n 10155  \t\tif(this1%gettype().gt.3)then\n 10156: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10157  \t\t\tcall error_stop()\n 10158  \t\tend if\n 10159  \t\tif(this2%getType().gt.3)then\n 10160: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10161  \t\t\tcall error_stop()\n 10162  \t\tend if\n 10163  \t\tif(this1%gettotalData().ne.this2%gettotalData())then\n 10164: \t\t\tcall writemess(\"error in cmplx,totaldata\",-1)\n 10165  \t\t\tcall error_stop()\n 10166  \t\tend if\n .....\n 10175  \t\t\t\tcall  charTdata(charTensor%TData,this%TData)\n 10176  \t\telse\n 10177: \t\t\tcall writemess(\"ERROR in charTensor\",-1)\n 10178  \t\t\tstop\n 10179  \t\tend if\n .....\n 10229  \t\t\t\tTmaxElement=dcmplxmaxElement(T)\n 10230  \t\t\tcase default\n 10231: \t\t\t\tcall writemess(\"ERROR in type of input Tensor,(max)\",-1)\n 10232  \t\t\t\tcall error_stop()\n 10233  \t\tend select\n .....\n 10274  \t\t\t\tTminElement=dcmplxminElement(T)\n 10275  \t\t\tcase default\n 10276: \t\t\t\tcall writemess(\"ERROR in type of input Tensor,(min)\",-1)\n 10277  \t\t\t\tcall error_stop()\n 10278  \t\tend select\n .....\n 10401  \t\t\t\tTmaxminElement=d\n 10402  \t\t\tcase default\n 10403: \t\t\t\tcall writemess(\"ERROR in type of input Tensor,(maxmin)\",-1)\n 10404  \t\t\t\tcall error_stop()\n 10405  \t\tend select\n .....\n 10473  \t\tinteger,intent(in)::dimen(:)\n 10474  \t\tif(product(dimen).ne.Ten%getTotaldata()) then\n 10475: \t\t\tcall writemess(\"ERROR in resetdim1\",-1)\n 10476: \t\t\tcall writemess(product(dimen)+','+Ten%getTotaldata(),-1)\n 10477  \t\t\tcall Ten%diminfo(\"\")\n 10478: \t\t\tcall writemess(\"stop\",-1)\n 10479  \t\t\tcall error_stop()\n 10480  \t\tend if\n .....\n 10487  \t\ttype(dimension),intent(in)::dimen\n 10488  \t\tif(dimen%size().ne.Ten%getTotaldata()) then\n 10489: \t\t\tcall writemess(\"ERROR in resetdim2\",-1)\n 10490: \t\t\tcall writemess(dimen%size()+','+Ten%getTotaldata(),-1)\n 10491  \t\t\tcall Ten%diminfo(\"\")\n 10492: \t\t\tcall writemess(\"stop\",-1)\n 10493  \t\t\tcall error_stop()\n 10494  \t\tend if\n .....\n 10747  \t\ttype(Dimension)::dimen\t\t\n 10748  \t\tif(.not.T%getflag())then\n 10749: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10750  \t\t\tcall error_stop()\n 10751  \t\tend if\n .....\n 10776  \t\ttype(Dimension)::dimen\t\t\n 10777  \t\tif(.not.T%getflag())then\n 10778: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10779  \t\t\tcall error_stop()\n 10780  \t\tend if\n .....\n 10805  \t\ttype(Dimension)::dimen\t\t\n 10806  \t\tif(.not.T%getflag())then\n 10807: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10808  \t\t\tcall error_stop()\n 10809  \t\tend if\n .....\n 10839  \t\ttype(Dimension)::dimen\t\t\n 10840  \t\tif(.not.T%getflag())then\n 10841: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10842  \t\t\tcall error_stop()\n 10843  \t\tend if\n .....\n 10864  \t\t\t\tend do\n 10865  \t\t\tcase default\n 10866: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 10867  \t\t\t\tcall error_Stop()\n 10868  \t\tend select\n .....\n 10893  \t\ttype(Dimension)::dimen\t\t\n 10894  \t\tif(.not.T%getflag())then\n 10895: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10896  \t\t\tcall error_stop()\n 10897  \t\tend if\n 10898  \t\tif(.not.if_original_dim(T%Tendim))then\n 10899: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 10900  \t\t\tcall error_stop()\n 10901  \t\tend if\n .....\n 10926  \t\ttype(Tensor),intent(in)::Tenorder\n 10927  \t\tif(.not.T%getflag())then\n 10928: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 10929  \t\t\tcall error_stop()\n 10930  \t\tend if\n 10931  \t\tif(.not.if_original_dim(T%Tendim))then\n 10932: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 10933  \t\t\tcall error_stop()\n 10934  \t\tend if\n .....\n 10939  \t\t\t\tcall permutation_name_routine(T,Tenorder%ai())\n 10940  \t\t\tcase default\n 10941: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 10942  \t\t\t\tcall error_Stop()\t\n 10943  \t\tend select\n .....\n 10954  \t\trank=getRank(T)\n 10955  \t\tif(inde.gt.rank) then\n 10956: \t\t\tcall writemess(\"ERROR in function permutefo\",-1)\n 10957: \t\t\tcall writemess(inde+','+rank,-1)\n 10958  \t\t\tcall error_stop()\n 10959  \t\tend if\n 10960  \t\tif(inde.le.0) then\n 10961: \t\t\tcall writemess(\"ERROR in function permutefo\",-1)\n 10962: \t\t\tcall writemess(\"index=\"+inde,-1)\n 10963  \t\t\tcall error_stop()\n 10964  \t\tend if\n .....\n 10985  \t\tinteger,intent(in)::inde\n 10986  \t\tif(.not.T%getflag())then\n 10987: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 10988  \t\t\tcall error_stop()\n 10989  \t\tend if\n .....\n 11000  \t\t\tinde=T%TenDim%FindOrder(indechar)\n 11001  \t\t\tif(inde.gt.rank) then\n 11002: \t\t\t\tcall writemess(\"ERROR in function permutefo\",-1)\n 11003: \t\t\t\tcall writemess(inde+','+rank,-1)\n 11004  \t\t\t\tcall error_stop()\n 11005  \t\t\tend if\n 11006  \t\t\tif(inde.le.0) then\n 11007: \t\t\t\tcall writemess(\"ERROR in function permutefo_name,Can not find the name\",-1)\n 11008: \t\t\t\tcall writemess(\"stop\",-1)\n 11009  \t\t\t\tcall error_stop()\n 11010  \t\t\tend if\n 11011  \t\t\tif(.not.if_original_dim(T%Tendim))then\n 11012: \t\t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11013  \t\t\t\tcall error_stop()\n 11014  \t\t\tend if\n .....\n 11042  \t\tcharacter(len=*),intent(in)::indechar\n 11043  \t\tif(.not.T%getflag())then\n 11044: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 11045  \t\t\tcall error_stop()\n 11046  \t\tend if\n 11047  \t\tif(.not.if_original_dim(T%Tendim))then\n 11048: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11049  \t\t\tcall error_stop()\n 11050  \t\tend if\n .....\n 11076  \t\tinteger::vec(size(vec_))\n 11077  \t\tif(.not.T%getflag())then\n 11078: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 11079  \t\t\tcall error_stop()\n 11080  \t\tend if\n .....\n 11098  \t\tinteger,pointer::vec(:)\n 11099  \t\tif(.not.T%getflag())then\n 11100: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 11101  \t\t\tcall error_stop()\n 11102  \t\tend if\n .....\n 11122  \t\tinteger,pointer::vec(:)\n 11123  \t\tif(.not.T%getflag())then\n 11124: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11125  \t\t\tcall error_stop()\n 11126  \t\tend if\n 11127  \t\tif(.not.if_original_dim(T%Tendim))then\n 11128: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11129  \t\t\tcall error_stop()\n 11130  \t\tend if\n .....\n 11152  \t\tinteger,pointer::indeint(:)\n 11153  \t\tif(.not.T%getflag())then\n 11154: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11155  \t\t\tcall error_stop()\n 11156  \t\tend if\n 11157  \t\tif(.not.if_original_dim(T%Tendim))then\n 11158: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11159  \t\t\tcall error_stop()\n 11160  \t\tend if\n .....\n 11172  \t\t\t\tpermutefo=permutefo_vec_name(T,indechar)\n 11173  \t\t\tcase default\n 11174: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11175  \t\t\t\tcall error_Stop()\t\n 11176  \t\tend select\n .....\n 11184  \t\tinteger,pointer::vec(:)\n 11185  \t\tif(.not.T%getflag())then\n 11186: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11187  \t\t\tcall error_stop()\n 11188  \t\tend if\n 11189  \t\tif(.not.if_original_dim(T%Tendim))then\n 11190: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11191  \t\t\tcall error_stop()\n 11192  \t\tend if\n .....\n 11213  \t\tinteger,pointer::indeint(:)\n 11214  \t\tif(.not.T%getflag())then\n 11215: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11216  \t\t\tcall error_stop()\n 11217  \t\tend if\n 11218  \t\tif(.not.if_original_dim(T%Tendim))then\n 11219: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11220  \t\t\tcall error_stop()\n 11221  \t\tend if\n .....\n 11233  \t\t\t\tcall permutefo_vec_name_routine(T,indechar)\n 11234  \t\t\tcase default\n 11235: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11236  \t\t\t\tcall error_Stop()\t\n 11237  \t\tend select\n .....\n 11247  \t\tinteger::rank\n 11248  \t\tif(.not.T%getflag())then\n 11249: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback)\",-1)\n 11250  \t\t\tcall error_stop()\n 11251  \t\tend if\n 11252  \t\trank=getRank(T)\n 11253  \t\tif(inde.gt.rank) then\n 11254: \t\t\tcall writemess(\"ERROR in function permuteback\",-1)\n 11255: \t\t\tcall writemess(\"stop\",-1)\n 11256  \t\t\tcall error_stop()\n 11257  \t\tend if\n 11258  \t\tif(inde.le.0) then\n 11259: \t\t\tcall writemess(\"ERROR in function permuteback,Can not find the name\",-1)\n 11260: \t\t\tcall writemess(\"index\"+'='+inde,-1)\n 11261  \t\t\tcall error_stop()\n 11262  \t\tend if\n .....\n 11283  \t\tinteger,intent(in)::inde\n 11284  \t\tif(.not.T%getflag())then\n 11285: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback_vec)\",-1)\n 11286  \t\t\tcall error_stop()\n 11287  \t\tend if\n .....\n 11295  \t\tcharacter(len=len_of_Name)::indexname\n 11296  \t\tif(.not.T%getflag())then\n 11297: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback_vec)\",-1)\n 11298  \t\t\tcall error_stop()\n 11299  \t\tend if\n 11300  \t\tif(.not.if_original_dim(T%Tendim))then\n 11301: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11302  \t\t\tcall error_stop()\n 11303  \t\tend if\n .....\n 11324  \t\tinteger::rank\n 11325  \t\tif(.not.T%getflag())then\n 11326: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback_name)\",-1)\n 11327  \t\t\tcall error_stop()\n 11328  \t\tend if\n 11329  \t\tif(long_Name_logi(indechar))then\n 11330  \t\t\tif(.not.if_original_dim(T%Tendim))then\n 11331: \t\t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11332  \t\t\t\tcall error_stop()\n 11333  \t\t\tend if\n .....\n 11335  \t\t\tinde=T%TenDim%FindOrder(indechar)\n 11336  \t\t\tif(inde.gt.rank) then\n 11337: \t\t\t\tcall writemess(\"ERROR in function permuteback_name\",-1)\n 11338: \t\t\t\tcall writemess(\"stop\",-1)\n 11339  \t\t\t\tcall error_stop()\n 11340  \t\t\tend if\n 11341  \t\t\tif(inde.le.0) then\n 11342: \t\t\t\tcall writemess(\"ERROR in function permuteback_name,Can not find the name\",-1)\n 11343: \t\t\t\tcall writemess(\"stop\",-1)\n 11344  \t\t\t\tcall error_stop()\n 11345  \t\t\tend if\n .....\n 11454  \t\t\t\tpermutefo=permuteback_vec_name(T,indechar)\n 11455  \t\t\tcase default\n 11456: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11457  \t\t\t\tcall error_Stop()\t\n 11458  \t\tend select\n .....\n 11544  \t\t\t\tcall permuteback_vec_name_routine(T,indechar)\n 11545  \t\t\tcase default\n 11546: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11547  \t\t\t\tcall error_Stop()\t\n 11548  \t\tend select\n .....\n 11747  \t\tinteger::leni1,leni2,rank1,rank2\n 11748  \t\tif(.not.T1_%getFlag())then\n 11749: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11750  \t\t\tcall error_stop()\n 11751  \t\tend if\n 11752  \t\tif(.not.T2_%getFlag())then\n 11753: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11754  \t\t\tcall error_stop()\n 11755  \t\tend if\n .....\n 11781  \t\tinteger,intent(in) :: i1,i2\n 11782  \t\tif(.not.T1_%getFlag())then\n 11783: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11784  \t\t\tcall error_stop()\n 11785  \t\tend if\n 11786  \t\tif(.not.T2_%getFlag())then\n 11787: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11788  \t\t\tcall error_stop()\n 11789  \t\tend if\n .....\n 11804  \t\tinteger::leni1,leni2,rank1,rank2\n 11805  \t\tif(.not.T1_%getFlag())then\n 11806: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11807  \t\t\tcall error_stop()\n 11808  \t\tend if\n 11809  \t\tif(.not.T2_%getFlag())then\n 11810: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11811  \t\t\tcall error_stop()\n 11812  \t\tend if\n .....\n 11840  \t\tcharacter(len=*),intent(in)::name1,name2\n 11841  \t\tif(.not.T1_%getFlag())then\n 11842: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11843  \t\t\tcall error_stop()\n 11844  \t\tend if\n 11845  \t\tif(.not.T2_%getFlag())then\n 11846: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11847  \t\t\tcall error_stop()\n 11848  \t\tend if\n .....\n 11872  \t\t\t\t\tk=k+1\n 11873  \t\t\t\t\tif(k.gt.sizeSameName)then\n 11874: \t\t\t\t\t\tcall writemess('ERROR in finding the same name, maybe something wrong in the tensorname',-1)\n 11875: \t\t\t\t\t\tcall writemess('You can diminfo to see if the tensor names are right')\n 11876: \t\t\t\t\t\tcall writemess('It is not allow to have two or more same name in one tensor')\n 11877  \t\t\t\t\t\tcall error_stop()\n 11878  \t\t\t\t\tend if\n .....\n 11891  \t\tinteger::lenofname,rank1,rank2\n 11892  \t\tif(.not.T1_%getFlag())then\n 11893: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11894  \t\t\tcall error_stop()\n 11895  \t\tend if\n 11896  \t\tif(.not.T2_%getFlag())then\n 11897: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11898  \t\t\tcall error_stop()\n 11899  \t\tend if\n .....\n 11930  \t\tinteger::leni1,leni2,rank1,rank2\n 11931  \t\tif(.not.T1_%getFlag())then\n 11932: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11933  \t\t\tcall error_stop()\n 11934  \t\tend if\n 11935  \t\tif(.not.T2_%getFlag())then\n 11936: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11937  \t\t\tcall error_stop()\n 11938  \t\tend if\n .....\n 11960  \t\tinteger :: i1,i2\n 11961  \t\tif(.not.T1_%getFlag())then\n 11962: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11963  \t\t\tcall error_stop()\n 11964  \t\tend if\n 11965  \t\tif(.not.T2_%getFlag())then\n 11966: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11967  \t\t\tcall error_stop()\n 11968  \t\tend if\n .....\n 11986  \t\tinteger::leni1,leni2,rank1,rank2\n 11987  \t\tif(.not.T1_%getFlag())then\n 11988: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11989  \t\t\tcall error_stop()\n 11990  \t\tend if\n 11991  \t\tif(.not.T2_%getFlag())then\n 11992: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11993  \t\t\tcall error_stop()\n 11994  \t\tend if\n .....\n 12022  \t\tinteger,intent(in)::i1\n 12023  \t\tif(.not.T1_%getFlag())then\n 12024: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12025  \t\t\tcall error_stop()\n 12026  \t\tend if\n 12027  \t\tif(.not.T2_%getFlag())then\n 12028: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12029  \t\t\tcall error_stop()\n 12030  \t\tend if\n .....\n 12044  \t\tinteger::leni1,leni2,rank1,rank2\n 12045  \t\tif(.not.T1_%getFlag())then\n 12046: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12047  \t\t\tcall error_stop()\n 12048  \t\tend if\n 12049  \t\tif(.not.T2_%getFlag())then\n 12050: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12051  \t\t\tcall error_stop()\n 12052  \t\tend if\n .....\n 12073  \t\tinteger :: i2\n 12074  \t\tif(.not.T1_%getFlag())then\n 12075: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12076  \t\t\tcall error_stop()\n 12077  \t\tend if\n 12078  \t\tif(.not.T2_%getFlag())then\n 12079: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12080  \t\t\tcall error_stop()\n 12081  \t\tend if\n .....\n 12098  \t\tinteger::leni1,leni2,rank1,rank2\n 12099  \t\tif(.not.T1_%getFlag())then\n 12100: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12101  \t\t\tcall error_stop()\n 12102  \t\tend if\n 12103  \t\tif(.not.T2_%getFlag())then\n 12104: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12105  \t\t\tcall error_stop()\n 12106  \t\tend if\n .....\n 12134  \t\tinteger,intent(in)::i2\n 12135  \t\tif(.not.T1_%getFlag())then\n 12136: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12137  \t\t\tcall error_stop()\n 12138  \t\tend if\n 12139  \t\tif(.not.T2_%getFlag())then\n 12140: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12141  \t\t\tcall error_stop()\n 12142  \t\tend if\n .....\n 12156  \t\tinteger::leni1,leni2,rank1,rank2\n 12157  \t\tif(.not.T1_%getFlag())then\n 12158: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12159  \t\t\tcall error_stop()\n 12160  \t\tend if\n 12161  \t\tif(.not.T2_%getFlag())then\n 12162: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12163  \t\t\tcall error_stop()\n 12164  \t\tend if\n .....\n 12185  \t\tinteger :: i1\n 12186  \t\tif(.not.T1_%getFlag())then\n 12187: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12188  \t\t\tcall error_stop()\n 12189  \t\tend if\n 12190  \t\tif(.not.T2_%getFlag())then\n 12191: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12192  \t\t\tcall error_stop()\n 12193  \t\tend if\n .....\n 12210  \t\tinteger::leni1,leni2,i1(size(i1_)),i2(size(i2_))\n 12211  \t\tif(.not.T1_%getFlag())then\n 12212: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12213  \t\t\tcall error_stop()\n 12214  \t\tend if\n 12215  \t\tif(.not.T2_%getFlag())then\n 12216: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12217  \t\t\tcall error_stop()\n 12218  \t\tend if\n .....\n 12287  \t\tclass(Tensor),pointer::pT,pT1,pT2\n 12288  \t\tif(.not.T1%getFlag())then\n 12289: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12290  \t\t\tcall error_stop()\n 12291  \t\tend if\n 12292  \t\tif(.not.T2%getFlag())then\n 12293: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12294  \t\t\tcall error_stop()\n 12295  \t\tend if\n 12296  \t\tif(.not.(if_original_dim(T1%TenDim).and.if_original_dim(T2%TenDim))) then\n 12297: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12298: \t\t\tcall writemess(\"stop\",-1)\n 12299  \t\t\tcall error_stop()\n 12300  \t\tend if\n .....\n 12303  \t\tpT2=>T2\n 12304  \t\tif(associated(pT,pT1).or.associated(pT,pT2).or.associated(pT1,pT2))then\n 12305: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12306: \t\t\tcall writemess('error in call T%contract(A,[names],B,[names])')\n 12307: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12308  \t\t\tcall error_stop\n 12309  \t\tend if\n .....\n 12340  \t\tclass(Tensor),pointer::pT,pT2\n 12341  \t\tif(.not.T%getFlag())then\n 12342: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12343  \t\t\tcall error_stop()\n 12344  \t\tend if\n 12345  \t\tif(.not.T2%getFlag())then\n 12346: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12347  \t\t\tcall error_stop()\n 12348  \t\tend if\n .....\n 12355  \t\tpT2=>T2\n 12356  \t\tif(associated(pT,pT2))then\n 12357: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12358: \t\t\tcall writemess('error in call T%contract([names],B,[names])')\n 12359: \t\t\tcall writemess('T and B can not be a same variable')\n 12360  \t\t\tcall error_stop\n 12361  \t\tend if\n .....\n 12390  \t\tclass(Tensor),pointer::pT,pT1\n 12391  \t\tif(.not.T1%getFlag())then\n 12392: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12393  \t\t\tcall error_stop()\n 12394  \t\tend if\n 12395  \t\tif(.not.T%getFlag())then\n 12396: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12397  \t\t\tcall error_stop()\n 12398  \t\tend if\n .....\n 12405  \t\tpT1=>T1\n 12406  \t\tif(associated(pT,pT1))then\n 12407: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12408: \t\t\tcall writemess('error in call T%contract(A,[names],[names])')\n 12409: \t\t\tcall writemess('T and A can not be a same variable')\n 12410  \t\t\tcall error_stop\n 12411  \t\tend if\n .....\n 12437  \t\tclass(Tensor),pointer::pT,pT1,pT2\n 12438  \t\tif(.not.T1%getFlag())then\n 12439: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12440  \t\t\tcall error_stop()\n 12441  \t\tend if\n 12442  \t\tif(.not.T2%getFlag())then\n 12443: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12444  \t\t\tcall error_stop()\n 12445  \t\tend if\n 12446  \t\tif(.not.(if_original_dim(T1%TenDim).and.if_original_dim(T2%TenDim))) then\n 12447: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12448: \t\t\tcall writemess(\"stop\",-1)\n 12449  \t\t\tcall error_stop()\n 12450  \t\tend if\n .....\n 12453  \t\tpT2=>T2\n 12454  \t\tif(associated(pT,pT1).or.associated(pT,pT2).or.associated(pT1,pT2))then\n 12455: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12456: \t\t\tcall writemess('error in call T%contract(A,name1,B,name2)')\n 12457: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12458  \t\t\tcall error_stop\n 12459  \t\tend if\n .....\n 12472  \t\tclass(Tensor),pointer::pT,pT2\n 12473  \t\tif(.not.T%getFlag())then\n 12474: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12475  \t\t\tcall error_stop()\n 12476  \t\tend if\n 12477  \t\tif(.not.T2%getFlag())then\n 12478: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12479  \t\t\tcall error_stop()\n 12480  \t\tend if\n 12481  \t\tif(.not.(if_original_dim(T2%TenDim))) then\n 12482: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12483: \t\t\tcall writemess(\"stop\",-1)\n 12484  \t\t\tcall error_stop()\n 12485  \t\tend if\n .....\n 12487  \t\tpT2=>T2\n 12488  \t\tif(associated(pT,pT2))then\n 12489: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12490: \t\t\tcall writemess('error in call T%contract(name1,B,name2)')\n 12491: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12492  \t\t\tcall error_stop\n 12493  \t\tend if\n .....\n 12505  \t\tclass(Tensor),pointer::pT,pT1\n 12506  \t\tif(.not.T1%getFlag())then\n 12507: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12508  \t\t\tcall error_stop()\n 12509  \t\tend if\n 12510  \t\tif(.not.T%getFlag())then\n 12511: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12512  \t\t\tcall error_stop()\n 12513  \t\tend if\n 12514  \t\tif(.not.(if_original_dim(T1%TenDim))) then\n 12515: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12516: \t\t\tcall writemess(\"stop\",-1)\n 12517  \t\t\tcall error_stop()\n 12518  \t\tend if\n .....\n 12520  \t\tpT1=>T1\n 12521  \t\tif(associated(pT,pT1))then\n 12522: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12523: \t\t\tcall writemess('error in call T%contract(A,name1,name2)')\n 12524: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12525  \t\t\tcall error_stop\n 12526  \t\tend if\n .....\n 12545  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12546  \t\tif(.not.T%getFlag())then\n 12547: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12548  \t\t\tcall error_stop()\n 12549  \t\tend if\n 12550  \t\tif(.not.(if_original_dim(T%TenDim))) then\n 12551: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12552: \t\t\tcall writemess(\"stop\",-1)\n 12553  \t\t\tcall error_stop()\n 12554  \t\tend if\n .....\n 12563  \t\tdim1=pT%dim(1)\n 12564  \t\tif(dim1.ne.pT%dim(2))then\n 12565: \t\t\tcall writemess(' ERROR in contract(name1,name2), dimension')\n 12566  \t\t\tcall error_stop\n 12567  \t\tend if\n .....\n 12619  \t\t\t\tend do\n 12620  \t\t\tcase default\n 12621: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12622  \t\t\t\tcall error_stop\n 12623  \t\tend select\n .....\n 12636  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12637  \t\tif(.not.T%getFlag())then\n 12638: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12639  \t\t\tcall error_stop()\n 12640  \t\tend if\n .....\n 12649  \t\tdim1=pT%dim(1)\n 12650  \t\tif(dim1.ne.pT%dim(2))then\n 12651: \t\t\tcall writemess(' ERROR in contract(ith1,ith2), dimension')\n 12652  \t\t\tcall error_stop\n 12653  \t\tend if\n .....\n 12705  \t\t\t\tend do\n 12706  \t\t\tcase default\n 12707: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12708  \t\t\t\tcall error_stop\n 12709  \t\tend select\n .....\n 12722  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12723  \t\tif(.not.Tin%getFlag())then\n 12724: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12725  \t\t\tcall error_stop()\n 12726  \t\tend if\n .....\n 12735  \t\tdim1=pT%dim(1)\n 12736  \t\tif(dim1.ne.pT%dim(2))then\n 12737: \t\t\tcall writemess(' ERROR in contract(ith1,ith2), dimension')\n 12738  \t\t\tcall error_stop\n 12739  \t\tend if\n .....\n 12791  \t\t\t\tend do\n 12792  \t\t\tcase default\n 12793: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12794  \t\t\t\tcall error_stop\n 12795  \t\tend select\n .....\n 12809  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12810  \t\tif(.not.Tin%getFlag())then\n 12811: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12812  \t\t\tcall error_stop()\n 12813  \t\tend if\n 12814  \t\tif(.not.(if_original_dim(Tin%TenDim))) then\n 12815: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12816: \t\t\tcall writemess(\"stop\",-1)\n 12817  \t\t\tcall error_stop()\n 12818  \t\tend if\n .....\n 12827  \t\tdim1=pT%dim(1)\n 12828  \t\tif(dim1.ne.pT%dim(2))then\n 12829: \t\t\tcall writemess(' ERROR in contract(ith1,ith2), dimension')\n 12830  \t\t\tcall error_stop\n 12831  \t\tend if\n .....\n 12883  \t\t\t\tend do\n 12884  \t\t\tcase default\n 12885: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12886  \t\t\t\tcall error_stop\n 12887  \t\tend select\n .....\n 13008  \t\ttype(dimension)::newdim\n 13009  \t\tif(A%getRank().le.1)then\n 13010: \t\t\tcall writemess('ERROR in subTensor, the rank should be larger than or equal to 2')\n 13011  \t\t\tcall error_stop\n 13012  \t\tend if\n .....\n 13051  \t\ttype(dimension)::newdim\n 13052  \t\tif(A%getRank().le.1)then\n 13053: \t\t\tcall writemess('ERROR in subTensor, the rank should be larger than or equal to 2')\n 13054  \t\t\tcall error_stop\n 13055  \t\tend if\n .....\n 13058  \t\tnewDim2=legith(2)-legith(1)+1\n 13059  \t\tif(newDim2.le.0)then\n 13060: \t\t\tcall writemess('ERROR in subTensor, legith=('+legith(1)+','+legith(2)+')')\n 13061  \t\t\tcall error_stop\n 13062  \t\tend if\n 13063  \t\tif(newDim2.gt.T%dim(rank))then\n 13064: \t\t\tcall writemess('ERROR in subTensor, legith=('+legith(1)+','+legith(2)+')')\n 13065: \t\t\tcall writemess('New dimension is larger than original one, dimen='+T%dim(rank))\n 13066  \t\t\tcall error_stop\n 13067  \t\tend if\n .....\n 13115  \t\tend if\n 13116  \t\tif(D.gt.newD)then\n 13117: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13118: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13119  \t\t\tcall error_stop\n 13120  \t\tend if\n 13121  \t\tif(.not.T%getFlag())then\n 13122: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13123  \t\t\tcall error_stop\n 13124  \t\tend if\n 13125  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13126: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13127  \t\t\tcall error_stop\n 13128  \t\tend if\n .....\n 13159  \t\tend if\n 13160  \t\tif(D.gt.newD)then\n 13161: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13162: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13163  \t\t\tcall error_stop\n 13164  \t\tend if\n 13165  \t\tif(.not.T%getFlag())then\n 13166: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13167  \t\t\tcall error_stop\n 13168  \t\tend if\n 13169  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13170: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13171  \t\t\tcall error_stop\n 13172  \t\tend if\n .....\n 13214  \t\trank=inoutT%getRank()\n 13215  \t\tif(D.gt.newD)then\n 13216: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13217: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13218  \t\t\tcall error_stop\n 13219  \t\tend if\n 13220  \t\tif(.not.inoutT%getFlag())then\n 13221: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13222  \t\t\tcall error_stop\n 13223  \t\tend if\n 13224  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13225: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13226  \t\t\tcall error_stop\n 13227  \t\tend if\n .....\n 13260  \t\trank=inoutT%getRank()\n 13261  \t\tif(D.gt.newD)then\n 13262: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13263: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13264  \t\t\tcall error_stop\n 13265  \t\tend if\n 13266  \t\tif(.not.inoutT%getFlag())then\n 13267: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13268  \t\t\tcall error_stop\n 13269  \t\tend if\n 13270  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13271: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13272  \t\t\tcall error_stop\n 13273  \t\tend if\n .....\n 13315  \t\tend if\n 13316  \t\tif(D.gt.newD)then\n 13317: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13318: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13319  \t\t\tcall error_stop\n 13320  \t\tend if\n 13321  \t\tif(.not.T%getFlag())then\n 13322: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13323  \t\t\tcall error_stop\n 13324  \t\tend if\n 13325  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13326: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13327  \t\t\tcall error_stop\n 13328  \t\tend if\n .....\n 13358  \t\tend if\n 13359  \t\tif(D.gt.newD)then\n 13360: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13361: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13362  \t\t\tcall error_stop\n 13363  \t\tend if\n 13364  \t\tif(.not.T%getFlag())then\n 13365: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13366  \t\t\tcall error_stop\n 13367  \t\tend if\n 13368  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13369: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13370  \t\t\tcall error_stop\n 13371  \t\tend if\n .....\n 13413  \t\t\n 13414  \t\tif(D.gt.newD)then\n 13415: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13416: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13417  \t\t\tcall error_stop\n 13418  \t\tend if\n 13419  \t\tif(.not.inoutT%getFlag())then\n 13420: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13421  \t\t\tcall error_stop\n 13422  \t\tend if\n 13423  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13424: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13425  \t\t\tcall error_stop\n 13426  \t\tend if\n .....\n 13459  \t\t\n 13460  \t\tif(D.gt.newD)then\n 13461: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13462: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13463  \t\t\tcall error_stop\n 13464  \t\tend if\n 13465  \t\tif(.not.inoutT%getFlag())then\n 13466: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13467  \t\t\tcall error_stop\n 13468  \t\tend if\n 13469  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13470: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13471  \t\t\tcall error_stop\n 13472  \t\tend if\n .....\n 13513  \t\tend if\n 13514  \t\tif(D.gt.newD)then\n 13515: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13516: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13517  \t\t\tcall error_stop\n 13518  \t\tend if\n 13519  \t\tif(.not.T%getFlag())then\n 13520: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13521  \t\t\tcall error_stop\n 13522  \t\tend if\n 13523  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13524: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13525  \t\t\tcall error_stop\n 13526  \t\tend if\n .....\n 13556  \t\tend if\n 13557  \t\tif(D.gt.newD)then\n 13558: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13559: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13560  \t\t\tcall error_stop\n 13561  \t\tend if\n 13562  \t\tif(.not.T%getFlag())then\n 13563: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13564  \t\t\tcall error_stop\n 13565  \t\tend if\n 13566  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13567: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13568  \t\t\tcall error_stop\n 13569  \t\tend if\n .....\n 13610  \t\trank=T%getRank()\n 13611  \t\tif(D.gt.newD)then\n 13612: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13613: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13614  \t\t\tcall error_stop\n 13615  \t\tend if\n 13616  \t\tif(.not.inoutT%getFlag())then\n 13617: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13618  \t\t\tcall error_stop\n 13619  \t\tend if\n 13620  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13621: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13622  \t\t\tcall error_stop\n 13623  \t\tend if\n .....\n 13655  \t\trank=T%getRank()\n 13656  \t\tif(D.gt.newD)then\n 13657: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13658: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13659  \t\t\tcall error_stop\n 13660  \t\tend if\n 13661  \t\tif(.not.inoutT%getFlag())then\n 13662: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13663  \t\t\tcall error_stop\n 13664  \t\tend if\n 13665  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13666: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13667  \t\t\tcall error_stop\n 13668  \t\tend if\n .....\n 13703  \t\tinteger::d(2)\n 13704  \t\tif(T%gettotalData().eq.0)then\n 13705: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13706  \t\t\tcall error_stop\n 13707  \t\tend if\n 13708  \t\tif(T%getType().ne.1)then\n 13709: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 13710  \t\t\tcall error_stop\n 13711  \t\tend if\n 13712  \t\tif(T%getRank().ne.2)then\n 13713: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13714  \t\t\tcall error_stop\n 13715  \t\tend if\n .....\n 13723  \t\tinteger::d(2)\n 13724  \t\tif(T%gettotalData().eq.0)then\n 13725: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13726  \t\t\tcall error_stop\n 13727  \t\tend if\n 13728  \t\tif(T%getType().ne.1)then\n 13729: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 13730  \t\t\tcall error_stop\n 13731  \t\tend if\n 13732  \t\tif(T%getRank().ne.2)then\n 13733: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13734  \t\t\tcall error_stop\n 13735  \t\tend if\n .....\n 13744  \t\tinteger::d(2)\n 13745  \t\tif(T%gettotalData().eq.0)then\n 13746: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13747  \t\t\tcall error_stop\n 13748  \t\tend if\n 13749  \t\tif(T%getType().ne.2)then\n 13750: \t\t\tcall writemess('The Tensor is of real*4, one should use the real*4 pointer',-1)\n 13751  \t\t\tcall error_stop\n 13752  \t\tend if\n 13753  \t\tif(T%getRank().ne.2)then\n 13754: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13755  \t\t\tcall error_stop\n 13756  \t\tend if\n .....\n 13764  \t\tinteger::d(2)\n 13765  \t\tif(T%gettotalData().eq.0)then\n 13766: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13767  \t\t\tcall error_stop\n 13768  \t\tend if\n 13769  \t\tif(T%getType().ne.2)then\n 13770: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 13771  \t\t\tcall error_stop\n 13772  \t\tend if\n 13773  \t\tif(T%getRank().ne.2)then\n 13774: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13775  \t\t\tcall error_stop\n 13776  \t\tend if\n .....\n 13785  \t\tinteger::d(2)\n 13786  \t\tif(T%gettotalData().eq.0)then\n 13787: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13788  \t\t\tcall error_stop\n 13789  \t\tend if\n 13790  \t\tif(T%getType().ne.3)then\n 13791: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 13792  \t\t\tcall error_stop\n 13793  \t\tend if\n 13794  \t\tif(T%getRank().ne.2)then\n 13795: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13796  \t\t\tcall error_stop\n 13797  \t\tend if\n .....\n 13805  \t\tinteger::d(2)\n 13806  \t\tif(T%gettotalData().eq.0)then\n 13807: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13808  \t\t\tcall error_stop\n 13809  \t\tend if\n 13810  \t\tif(T%getType().ne.3)then\n 13811: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 13812  \t\t\tcall error_stop\n 13813  \t\tend if\n 13814  \t\tif(T%getRank().ne.2)then\n 13815: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13816  \t\t\tcall error_stop\n 13817  \t\tend if\n .....\n 13826  \t\tinteger::d(2)\n 13827  \t\tif(T%gettotalData().eq.0)then\n 13828: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13829  \t\t\tcall error_stop\n 13830  \t\tend if\n 13831  \t\tif(T%getType().ne.4)then\n 13832: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 13833  \t\t\tcall error_stop\n 13834  \t\tend if\n 13835  \t\tif(T%getRank().ne.2)then\n 13836: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13837  \t\t\tcall error_stop\n 13838  \t\tend if\n .....\n 13846  \t\tinteger::d(2)\n 13847  \t\tif(T%gettotalData().eq.0)then\n 13848: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13849  \t\t\tcall error_stop\n 13850  \t\tend if\n 13851  \t\tif(T%getType().ne.4)then\n 13852: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 13853  \t\t\tcall error_stop\n 13854  \t\tend if\n 13855  \t\tif(T%getRank().ne.2)then\n 13856: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13857  \t\t\tcall error_stop\n 13858  \t\tend if\n .....\n 13867  \t\tinteger::d(2)\n 13868  \t\tif(T%gettotalData().eq.0)then\n 13869: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13870  \t\t\tcall error_stop\n 13871  \t\tend if\n 13872  \t\tif(T%getType().ne.5)then\n 13873: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 13874  \t\t\tcall error_stop\n 13875  \t\tend if\n 13876  \t\tif(T%getRank().ne.2)then\n 13877: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13878  \t\t\tcall error_stop\n 13879  \t\tend if\n .....\n 13887  \t\tinteger::d(2)\n 13888  \t\tif(T%gettotalData().eq.0)then\n 13889: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13890  \t\t\tcall error_stop\n 13891  \t\tend if\n 13892  \t\tif(T%getType().ne.5)then\n 13893: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 13894  \t\t\tcall error_stop\n 13895  \t\tend if\n 13896  \t\tif(T%getRank().ne.2)then\n 13897: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13898  \t\t\tcall error_stop\n 13899  \t\tend if\n .....\n 13908  \t\tinteger::d(2)\n 13909  \t\tif(T%gettotalData().eq.0)then\n 13910: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13911  \t\t\tcall error_stop\n 13912  \t\tend if\n 13913  \t\tif(T%getType().ne.6)then\n 13914: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 13915  \t\t\tcall error_stop\n 13916  \t\tend if\n 13917  \t\tif(T%getRank().ne.2)then\n 13918: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13919  \t\t\tcall error_stop\n 13920  \t\tend if\n .....\n 13928  \t\tinteger::d(2)\n 13929  \t\tif(T%gettotalData().eq.0)then\n 13930: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13931  \t\t\tcall error_stop\n 13932  \t\tend if\n 13933  \t\tif(T%getType().ne.6)then\n 13934: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 13935  \t\t\tcall error_stop\n 13936  \t\tend if\n 13937  \t\tif(T%getRank().ne.2)then\n 13938: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13939  \t\t\tcall error_stop\n 13940  \t\tend if\n .....\n 13949  \t\tinteger::d(2)\n 13950  \t\tif(T%gettotalData().eq.0)then\n 13951: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13952  \t\t\tcall error_stop\n 13953  \t\tend if\n 13954  \t\tif(T%getType().ne.7)then\n 13955: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 13956  \t\t\tcall error_stop\n 13957  \t\tend if\n 13958  \t\tif(T%getRank().ne.2)then\n 13959: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13960  \t\t\tcall error_stop\n 13961  \t\tend if\n .....\n 13969  \t\tinteger::d(2)\n 13970  \t\tif(T%gettotalData().eq.0)then\n 13971: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13972  \t\t\tcall error_stop\n 13973  \t\tend if\n 13974  \t\tif(T%getType().ne.7)then\n 13975: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 13976  \t\t\tcall error_stop\n 13977  \t\tend if\n 13978  \t\tif(T%getRank().ne.2)then\n 13979: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13980  \t\t\tcall error_stop\n 13981  \t\tend if\n .....\n 13992  \t\tinteger::d(3)\n 13993  \t\tif(T%gettotalData().eq.0)then\n 13994: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13995  \t\t\tcall error_stop\n 13996  \t\tend if\n 13997  \t\tif(T%getType().ne.1)then\n 13998: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 13999  \t\t\tcall error_stop\n 14000  \t\tend if\n 14001  \t\tif(T%getRank().ne.3)then\n 14002: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14003  \t\t\tcall error_stop\n 14004  \t\tend if\n .....\n 14012  \t\tinteger::d(3)\n 14013  \t\tif(T%gettotalData().eq.0)then\n 14014: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14015  \t\t\tcall error_stop\n 14016  \t\tend if\n 14017  \t\tif(T%getType().ne.1)then\n 14018: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 14019  \t\t\tcall error_stop\n 14020  \t\tend if\n 14021  \t\tif(T%getRank().ne.3)then\n 14022: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14023  \t\t\tcall error_stop\n 14024  \t\tend if\n .....\n 14034  \t\tinteger::d(3)\n 14035  \t\tif(T%gettotalData().eq.0)then\n 14036: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14037  \t\t\tcall error_stop\n 14038  \t\tend if\n 14039  \t\tif(T%getType().ne.2)then\n 14040: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14041  \t\t\tcall error_stop\n 14042  \t\tend if\n 14043  \t\tif(T%getRank().ne.3)then\n 14044: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14045  \t\t\tcall error_stop\n 14046  \t\tend if\n .....\n 14054  \t\tinteger::d(3)\n 14055  \t\tif(T%gettotalData().eq.0)then\n 14056: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14057  \t\t\tcall error_stop\n 14058  \t\tend if\n 14059  \t\tif(T%getType().ne.2)then\n 14060: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14061  \t\t\tcall error_stop\n 14062  \t\tend if\n 14063  \t\tif(T%getRank().ne.3)then\n 14064: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14065  \t\t\tcall error_stop\n 14066  \t\tend if\n .....\n 14075  \t\tinteger::d(3)\n 14076  \t\tif(T%gettotalData().eq.0)then\n 14077: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14078  \t\t\tcall error_stop\n 14079  \t\tend if\n 14080  \t\tif(T%getType().ne.3)then\n 14081: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14082  \t\t\tcall error_stop\n 14083  \t\tend if\n 14084  \t\tif(T%getRank().ne.3)then\n 14085: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14086  \t\t\tcall error_stop\n 14087  \t\tend if\n .....\n 14095  \t\tinteger::d(3)\n 14096  \t\tif(T%gettotalData().eq.0)then\n 14097: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14098  \t\t\tcall error_stop\n 14099  \t\tend if\n 14100  \t\tif(T%getType().ne.3)then\n 14101: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14102  \t\t\tcall error_stop\n 14103  \t\tend if\n 14104  \t\tif(T%getRank().ne.3)then\n 14105: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14106  \t\t\tcall error_stop\n 14107  \t\tend if\n .....\n 14117  \t\tinteger::d(3)\n 14118  \t\tif(T%gettotalData().eq.0)then\n 14119: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14120  \t\t\tcall error_stop\n 14121  \t\tend if\n 14122  \t\tif(T%getType().ne.4)then\n 14123: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14124  \t\t\tcall error_stop\n 14125  \t\tend if\n 14126  \t\tif(T%getRank().ne.3)then\n 14127: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14128  \t\t\tcall error_stop\n 14129  \t\tend if\n .....\n 14137  \t\tinteger::d(3)\n 14138  \t\tif(T%gettotalData().eq.0)then\n 14139: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14140  \t\t\tcall error_stop\n 14141  \t\tend if\n 14142  \t\tif(T%getType().ne.4)then\n 14143: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14144  \t\t\tcall error_stop\n 14145  \t\tend if\n 14146  \t\tif(T%getRank().ne.3)then\n 14147: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14148  \t\t\tcall error_stop\n 14149  \t\tend if\n .....\n 14159  \t\tinteger::d(3)\n 14160  \t\tif(T%gettotalData().eq.0)then\n 14161: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14162  \t\t\tcall error_stop\n 14163  \t\tend if\n 14164  \t\tif(T%getType().ne.5)then\n 14165: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14166  \t\t\tcall error_stop\n 14167  \t\tend if\n 14168  \t\tif(T%getRank().ne.3)then\n 14169: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14170  \t\t\tcall error_stop\n 14171  \t\tend if\n .....\n 14179  \t\tinteger::d(3)\n 14180  \t\tif(T%gettotalData().eq.0)then\n 14181: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14182  \t\t\tcall error_stop\n 14183  \t\tend if\n 14184  \t\tif(T%getType().ne.5)then\n 14185: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14186  \t\t\tcall error_stop\n 14187  \t\tend if\n 14188  \t\tif(T%getRank().ne.3)then\n 14189: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14190  \t\t\tcall error_stop\n 14191  \t\tend if\n .....\n 14201  \t\tinteger::d(3)\n 14202  \t\tif(T%gettotalData().eq.0)then\n 14203: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14204  \t\t\tcall error_stop\n 14205  \t\tend if\n 14206  \t\tif(T%getType().ne.6)then\n 14207: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14208  \t\t\tcall error_stop\n 14209  \t\tend if\n 14210  \t\tif(T%getRank().ne.3)then\n 14211: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14212  \t\t\tcall error_stop\n 14213  \t\tend if\n .....\n 14221  \t\tinteger::d(3)\n 14222  \t\tif(T%gettotalData().eq.0)then\n 14223: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14224  \t\t\tcall error_stop\n 14225  \t\tend if\n 14226  \t\tif(T%getType().ne.6)then\n 14227: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14228  \t\t\tcall error_stop\n 14229  \t\tend if\n 14230  \t\tif(T%getRank().ne.3)then\n 14231: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14232  \t\t\tcall error_stop\n 14233  \t\tend if\n .....\n 14243  \t\tinteger::d(3)\n 14244  \t\tif(T%gettotalData().eq.0)then\n 14245: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14246  \t\t\tcall error_stop\n 14247  \t\tend if\n 14248  \t\tif(T%getType().ne.7)then\n 14249: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 14250  \t\t\tcall error_stop\n 14251  \t\tend if\n 14252  \t\tif(T%getRank().ne.3)then\n 14253: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14254  \t\t\tcall error_stop\n 14255  \t\tend if\n .....\n 14263  \t\tinteger::d(3)\n 14264  \t\tif(T%gettotalData().eq.0)then\n 14265: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14266  \t\t\tcall error_stop\n 14267  \t\tend if\n 14268  \t\tif(T%getType().ne.7)then\n 14269: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 14270  \t\t\tcall error_stop\n 14271  \t\tend if\n 14272  \t\tif(T%getRank().ne.3)then\n 14273: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14274  \t\t\tcall error_stop\n 14275  \t\tend if\n .....\n 14285  \t\tinteger::d(4)\n 14286  \t\tif(T%gettotalData().eq.0)then\n 14287: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14288  \t\t\tcall error_stop\n 14289  \t\tend if\n 14290  \t\tif(T%getType().ne.1)then\n 14291: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 14292  \t\t\tcall error_stop\n 14293  \t\tend if\n 14294  \t\tif(T%getRank().ne.4)then\n 14295: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14296  \t\t\tcall error_stop\n 14297  \t\tend if\n .....\n 14305  \t\tinteger::d(4)\n 14306  \t\tif(T%gettotalData().eq.0)then\n 14307: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14308  \t\t\tcall error_stop\n 14309  \t\tend if\n 14310  \t\tif(T%getType().ne.1)then\n 14311: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 14312  \t\t\tcall error_stop\n 14313  \t\tend if\n 14314  \t\tif(T%getRank().ne.4)then\n 14315: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14316  \t\t\tcall error_stop\n 14317  \t\tend if\n .....\n 14327  \t\tinteger::d(4)\n 14328  \t\tif(T%gettotalData().eq.0)then\n 14329: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14330  \t\t\tcall error_stop\n 14331  \t\tend if\n 14332  \t\tif(T%getType().ne.2)then\n 14333: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14334  \t\t\tcall error_stop\n 14335  \t\tend if\n 14336  \t\tif(T%getRank().ne.4)then\n 14337: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14338  \t\t\tcall error_stop\n 14339  \t\tend if\n .....\n 14347  \t\tinteger::d(4)\n 14348  \t\tif(T%gettotalData().eq.0)then\n 14349: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14350  \t\t\tcall error_stop\n 14351  \t\tend if\n 14352  \t\tif(T%getType().ne.2)then\n 14353: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14354  \t\t\tcall error_stop\n 14355  \t\tend if\n 14356  \t\tif(T%getRank().ne.4)then\n 14357: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14358  \t\t\tcall error_stop\n 14359  \t\tend if\n .....\n 14369  \t\tinteger::d(4)\n 14370  \t\tif(T%gettotalData().eq.0)then\n 14371: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14372  \t\t\tcall error_stop\n 14373  \t\tend if\n 14374  \t\tif(T%getType().ne.3)then\n 14375: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14376  \t\t\tcall error_stop\n 14377  \t\tend if\n 14378  \t\tif(T%getRank().ne.4)then\n 14379: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14380  \t\t\tcall error_stop\n 14381  \t\tend if\n .....\n 14389  \t\tinteger::d(4)\n 14390  \t\tif(T%gettotalData().eq.0)then\n 14391: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14392  \t\t\tcall error_stop\n 14393  \t\tend if\n 14394  \t\tif(T%getType().ne.3)then\n 14395: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14396  \t\t\tcall error_stop\n 14397  \t\tend if\n 14398  \t\tif(T%getRank().ne.4)then\n 14399: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14400  \t\t\tcall error_stop\n 14401  \t\tend if\n .....\n 14411  \t\tinteger::d(4)\n 14412  \t\tif(T%gettotalData().eq.0)then\n 14413: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14414  \t\t\tcall error_stop\n 14415  \t\tend if\n 14416  \t\tif(T%getType().ne.4)then\n 14417: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14418  \t\t\tcall error_stop\n 14419  \t\tend if\n 14420  \t\tif(T%getRank().ne.4)then\n 14421: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14422  \t\t\tcall error_stop\n 14423  \t\tend if\n .....\n 14431  \t\tinteger::d(4)\n 14432  \t\tif(T%gettotalData().eq.0)then\n 14433: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14434  \t\t\tcall error_stop\n 14435  \t\tend if\n 14436  \t\tif(T%getType().ne.4)then\n 14437: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14438  \t\t\tcall error_stop\n 14439  \t\tend if\n 14440  \t\tif(T%getRank().ne.4)then\n 14441: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14442  \t\t\tcall error_stop\n 14443  \t\tend if\n .....\n 14452  \t\tinteger::d(4)\n 14453  \t\tif(T%gettotalData().eq.0)then\n 14454: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14455  \t\t\tcall error_stop\n 14456  \t\tend if\n 14457  \t\tif(T%getType().ne.5)then\n 14458: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14459  \t\t\tcall error_stop\n 14460  \t\tend if\n 14461  \t\tif(T%getRank().ne.4)then\n 14462: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14463  \t\t\tcall error_stop\n 14464  \t\tend if\n .....\n 14472  \t\tinteger::d(4)\n 14473  \t\tif(T%gettotalData().eq.0)then\n 14474: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14475  \t\t\tcall error_stop\n 14476  \t\tend if\n 14477  \t\tif(T%getType().ne.5)then\n 14478: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14479  \t\t\tcall error_stop\n 14480  \t\tend if\n 14481  \t\tif(T%getRank().ne.4)then\n 14482: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14483  \t\t\tcall error_stop\n 14484  \t\tend if\n .....\n 14493  \t\tinteger::d(4)\n 14494  \t\tif(T%gettotalData().eq.0)then\n 14495: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14496  \t\t\tcall error_stop\n 14497  \t\tend if\n 14498  \t\tif(T%getType().ne.6)then\n 14499: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14500  \t\t\tcall error_stop\n 14501  \t\tend if\n 14502  \t\tif(T%getRank().ne.4)then\n 14503: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14504  \t\t\tcall error_stop\n 14505  \t\tend if\n .....\n 14513  \t\tinteger::d(4)\n 14514  \t\tif(T%gettotalData().eq.0)then\n 14515: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14516  \t\t\tcall error_stop\n 14517  \t\tend if\n 14518  \t\tif(T%getType().ne.6)then\n 14519: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14520  \t\t\tcall error_stop\n 14521  \t\tend if\n 14522  \t\tif(T%getRank().ne.4)then\n 14523: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14524  \t\t\tcall error_stop\n 14525  \t\tend if\n .....\n 14534  \t\tinteger::d(4)\n 14535  \t\tif(T%gettotalData().eq.0)then\n 14536: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14537  \t\t\tcall error_stop\n 14538  \t\tend if\n 14539  \t\tif(T%getType().ne.7)then\n 14540: \t\t\tcall writemess('The type of Tensor is not  character(len=characterLen)',-1)\n 14541  \t\t\tcall error_stop\n 14542  \t\tend if\n 14543  \t\tif(T%getRank().ne.4)then\n 14544: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14545  \t\t\tcall error_stop\n 14546  \t\tend if\n .....\n 14554  \t\tinteger::d(4)\n 14555  \t\tif(T%gettotalData().eq.0)then\n 14556: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14557  \t\t\tcall error_stop\n 14558  \t\tend if\n 14559  \t\tif(T%getType().ne.7)then\n 14560: \t\t\tcall writemess('The type of Tensor is not  character(len=characterLen)',-1)\n 14561  \t\t\tcall error_stop\n 14562  \t\tend if\n 14563  \t\tif(T%getRank().ne.4)then\n 14564: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14565  \t\t\tcall error_stop\n 14566  \t\tend if\n .....\n 14642  \t\t\t\tend do\n 14643  \t\t\tcase default\n 14644: \t\t\t\tcall writemess('The Tensor is integer, input type error, (which)',-1)\n 14645  \t\t\t\tcall error_stop\n 14646  \t\tend select\n .....\n 14661  \t\t\t\tend do\n 14662  \t\t\tcase default\n 14663: \t\t\t\tcall writemess('The Tensor is real, input type error, (which)',-1)\n 14664  \t\t\t\tcall error_stop\n 14665  \t\tend select\n .....\n 14681  \t\t\t\tend do\n 14682  \t\t\tcase default\n 14683: \t\t\t\tcall writemess('The Tensor is real*8, input type error, (which)',-1)\n 14684  \t\t\t\tcall error_stop\n 14685  \t\tend select\n .....\n 14701  \t\t\t\tend do\n 14702  \t\t\tcase default\n 14703: \t\t\t\tcall writemess('The Tensor is complex(kind=4), input type error, (which)',-1)\n 14704  \t\t\t\tcall error_stop\n 14705  \t\tend select\n .....\n 14721  \t\t\t\tend do\n 14722  \t\t\tcase default\n 14723: \t\t\t\tcall writemess('The Tensor is complex(kind=4), input type error, (which)',-1)\n 14724  \t\t\t\tcall error_stop\n 14725  \t\tend select\n .....\n 14740  \t\t\t\tend do\n 14741  \t\t\tcase default\n 14742: \t\t\t\tcall writemess('The Tensor is character, input type error, (which)',-1)\n 14743  \t\t\t\tcall error_stop\n 14744  \t\tend select\n .....\n 14761  \t\t\t\tend do\n 14762  \t\t\tcase default\n 14763: \t\t\t\tcall writemess('The Tensor is character, input type error, (which)',-1)\n 14764  \t\t\t\tcall error_stop\n 14765  \t\tend select\n .....\n 14773  \t\ttype(Tensor),intent(in) :: T\n 14774  \t\tif(.not.T%getFlag())then\n 14775: \t\t\tcall writemess('There is no data in T1,(sqrt)',-1)\n 14776  \t\t\tcall error_stop()\n 14777  \t\tend if\n 14778  \t\tif(T%gettotalData().gt.1)then\n 14779: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(sqrt)!!\",-1)\n 14780  \t\t\tcall error_stop()\n 14781  \t\tend if\n .....\n 14792  \t\t\t\tRes=cdsqrt(T%zi(1))\n 14793  \t\t\tcase default\n 14794: \t\t\t\tcall writemess(\"ERROR in sqrt,error type\",-1)\n 14795  \t\t\t\tcall error_stop()\n 14796  \t\tend select\n .....\n 14810  \t\tequal_of_Tensor=.true.\n 14811  \t\tif(.not.T1%getFlag())then\n 14812: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14813  \t\t\tcall error_stop()\n 14814  \t\tend if\n 14815  \t\tif(.not.T2%getFlag())then\n 14816: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14817  \t\t\tcall error_stop()\n 14818  \t\tend if\n .....\n 14847  \t\tinteger,intent(in)::num\n 14848  \t\tif(.not.T%getFlag())then\n 14849: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14850  \t\t\tcall error_stop()\n 14851  \t\tend if\n .....\n 14861  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14862  \t\t\tcase default\n 14863: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14864  \t\t\t\tcall error_stop()\n 14865  \t\tend select\n .....\n 14870  \t\tinteger,intent(in)::num\n 14871  \t\tif(.not.T%getFlag())then\n 14872: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14873  \t\t\tcall error_stop()\n 14874  \t\tend if\n .....\n 14884  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14885  \t\t\tcase default\n 14886: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14887  \t\t\t\tcall error_stop()\n 14888  \t\tend select\n .....\n 14893  \t\treal(kind=4),intent(in)::num\n 14894  \t\tif(.not.T%getFlag())then\n 14895: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14896  \t\t\tcall error_stop()\n 14897  \t\tend if\n .....\n 14907  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14908  \t\t\tcase default\n 14909: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14910  \t\t\t\tcall error_stop()\n 14911  \t\tend select\n .....\n 14916  \t\treal(kind=4),intent(in)::num\n 14917  \t\tif(.not.T%getFlag())then\n 14918: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14919  \t\t\tcall error_stop()\n 14920  \t\tend if\n .....\n 14930  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14931  \t\t\tcase default\n 14932: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14933  \t\t\t\tcall error_stop()\n 14934  \t\tend select\n .....\n 14939  \t\treal(kind=8),intent(in)::num\n 14940  \t\tif(.not.T%getFlag())then\n 14941: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14942  \t\t\tcall error_stop()\n 14943  \t\tend if\n .....\n 14953  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14954  \t\t\tcase default\n 14955: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14956  \t\t\t\tcall error_stop()\n 14957  \t\tend select\n .....\n 14962  \t\treal(kind=8),intent(in)::num\n 14963  \t\tif(.not.T%getFlag())then\n 14964: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14965  \t\t\tcall error_stop()\n 14966  \t\tend if\n .....\n 14976  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14977  \t\t\tcase default\n 14978: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14979  \t\t\t\tcall error_stop()\n 14980  \t\tend select\n .....\n 14986  \t\tinteger :: l\n 14987  \t\tif(.not.T1%getFlag())then\n 14988: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 14989  \t\t\tcall error_stop()\n 14990  \t\tend if\n 14991  \t\tif(.not.T2%getFlag())then\n 14992: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 14993  \t\t\tcall error_stop()\n 14994  \t\tend if\n 14995  \t\tif(T1%gettotalData().gt.1)then\n 14996: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.le.)!!\",-1)\n 14997  \t\t\tcall error_stop()\n 14998  \t\tend if\n 14999  \t\tif(T1%gettotalData().gt.1)then\n 15000: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.le.)!!\",-1)\n 15001  \t\t\tcall error_stop()\n 15002  \t\tend if\n 15003  \t\tif(T1%getType().gt.3)then\n 15004: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15005  \t\t\tcall error_stop()\n 15006  \t\tend if\n 15007  \t\tif(T2%getType().gt.3)then\n 15008: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15009  \t\t\tcall error_stop()\n 15010  \t\tend if\n .....\n 15017  \t\tinteger,intent(in)::num\n 15018  \t\tif(.not.T%getFlag())then\n 15019: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15020  \t\t\tcall error_stop()\n 15021  \t\tend if\n 15022  \t\tif(T%gettotalData().gt.1)then\n 15023: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15024  \t\t\tcall error_stop()\n 15025  \t\tend if\n .....\n 15032  \t\t\t\tT_eq_int=T%di(1).le.num\n 15033  \t\t\tcase default\n 15034: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15035  \t\t\t\tcall error_stop()\n 15036  \t\tend select\n .....\n 15041  \t\tinteger,intent(in)::num\n 15042  \t\tif(.not.T%getFlag())then\n 15043: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15044  \t\t\tcall error_stop()\n 15045  \t\tend if\n 15046  \t\tif(T%gettotalData().gt.1)then\n 15047: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15048  \t\t\tcall error_stop()\n 15049  \t\tend if\n .....\n 15056  \t\t\t\tT_eq_int=num.le.T%di(1)\n 15057  \t\t\tcase default\n 15058: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15059  \t\t\t\tcall error_stop()\n 15060  \t\tend select\n .....\n 15066  \t\treal(kind=4),intent(in)::num\n 15067  \t\tif(.not.T%getFlag())then\n 15068: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15069  \t\t\tcall error_stop()\n 15070  \t\tend if\n 15071  \t\tif(T%gettotalData().gt.1)then\n 15072: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15073  \t\t\tcall error_stop()\n 15074  \t\tend if\n .....\n 15081  \t\t\t\tT_eq_int=T%di(1).le.num\n 15082  \t\t\tcase default\n 15083: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15084  \t\t\t\tcall error_stop()\n 15085  \t\tend select\n .....\n 15090  \t\treal(kind=4),intent(in)::num\n 15091  \t\tif(.not.T%getFlag())then\n 15092: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15093  \t\t\tcall error_stop()\n 15094  \t\tend if\n 15095  \t\tif(T%gettotalData().gt.1)then\n 15096: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15097  \t\t\tcall error_stop()\n 15098  \t\tend if\n .....\n 15105  \t\t\t\tT_eq_int=num.le.T%di(1)\n 15106  \t\t\tcase default\n 15107: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15108  \t\t\t\tcall error_stop()\n 15109  \t\tend select\n .....\n 15114  \t\treal(kind=8),intent(in)::num\n 15115  \t\tif(.not.T%getFlag())then\n 15116: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15117  \t\t\tcall error_stop()\n 15118  \t\tend if\n 15119  \t\tif(T%gettotalData().gt.1)then\n 15120: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15121  \t\t\tcall error_stop()\n 15122  \t\tend if\n .....\n 15129  \t\t\t\tT_eq_int=T%di(1).le.num\n 15130  \t\t\tcase default\n 15131: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15132  \t\t\t\tcall error_stop()\n 15133  \t\tend select\n .....\n 15138  \t\treal(kind=8),intent(in)::num\n 15139  \t\tif(.not.T%getFlag())then\n 15140: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15141  \t\t\tcall error_stop()\n 15142  \t\tend if\n 15143  \t\tif(T%gettotalData().gt.1)then\n 15144: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15145  \t\t\tcall error_stop()\n 15146  \t\tend if\n .....\n 15153  \t\t\t\tT_eq_int=num.le.T%di(1)\n 15154  \t\t\tcase default\n 15155: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15156  \t\t\t\tcall error_stop()\n 15157  \t\tend select\n .....\n 15163  \t\tinteger :: l\n 15164  \t\tif(.not.T1%getFlag())then\n 15165: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15166  \t\t\tcall error_stop()\n 15167  \t\tend if\n 15168  \t\tif(.not.T2%getFlag())then\n 15169: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15170  \t\t\tcall error_stop()\n 15171  \t\tend if\n 15172  \t\tif(T1%gettotalData().gt.1)then\n 15173: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.lt.)!!\",-1)\n 15174  \t\t\tcall error_stop()\n 15175  \t\tend if\n 15176  \t\tif(T1%gettotalData().gt.2)then\n 15177: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.lt.)!!\",-1)\n 15178  \t\t\tcall error_stop()\n 15179  \t\tend if\n 15180  \t\tif(T1%getType().gt.3)then\n 15181: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15182  \t\t\tcall error_stop()\n 15183  \t\tend if\n 15184  \t\tif(T2%getType().gt.3)then\n 15185: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15186  \t\t\tcall error_stop()\n 15187  \t\tend if\n .....\n 15194  \t\tinteger,intent(in)::num\n 15195  \t\tif(.not.T%getFlag())then\n 15196: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15197  \t\t\tcall error_stop()\n 15198  \t\tend if\n 15199  \t\tif(T%gettotalData().gt.1)then\n 15200: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15201  \t\t\tcall error_stop()\n 15202  \t\tend if\n .....\n 15209  \t\t\t\tT_eq_int=T%di(1).lt.num\n 15210  \t\t\tcase default\n 15211: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15212  \t\t\t\tcall error_stop()\n 15213  \t\tend select\n .....\n 15218  \t\tinteger,intent(in)::num\n 15219  \t\tif(.not.T%getFlag())then\n 15220: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15221  \t\t\tcall error_stop()\n 15222  \t\tend if\n 15223  \t\tif(T%gettotalData().gt.1)then\n 15224: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15225  \t\t\tcall error_stop()\n 15226  \t\tend if\n .....\n 15233  \t\t\t\tT_eq_int=num.lt.T%di(1)\n 15234  \t\t\tcase default\n 15235: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15236  \t\t\t\tcall error_stop()\n 15237  \t\tend select\n .....\n 15243  \t\treal(kind=4),intent(in)::num\n 15244  \t\tif(.not.T%getFlag())then\n 15245: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15246  \t\t\tcall error_stop()\n 15247  \t\tend if\n 15248  \t\tif(T%gettotalData().gt.1)then\n 15249: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15250  \t\t\tcall error_stop()\n 15251  \t\tend if\n .....\n 15258  \t\t\t\tT_eq_int=T%di(1).lt.num\n 15259  \t\t\tcase default\n 15260: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15261  \t\t\t\tcall error_stop()\n 15262  \t\tend select\n .....\n 15267  \t\treal(kind=4),intent(in)::num\n 15268  \t\tif(.not.T%getFlag())then\n 15269: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15270  \t\t\tcall error_stop()\n 15271  \t\tend if\n 15272  \t\tif(T%gettotalData().gt.1)then\n 15273: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15274  \t\t\tcall error_stop()\n 15275  \t\tend if\n .....\n 15282  \t\t\t\tT_eq_int=num.lt.T%di(1)\n 15283  \t\t\tcase default\n 15284: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15285  \t\t\t\tcall error_stop()\n 15286  \t\tend select\n .....\n 15291  \t\treal(kind=8),intent(in)::num\n 15292  \t\tif(.not.T%getFlag())then\n 15293: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15294  \t\t\tcall error_stop()\n 15295  \t\tend if\n 15296  \t\tif(T%gettotalData().gt.1)then\n 15297: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15298  \t\t\tcall error_stop()\n 15299  \t\tend if\n .....\n 15306  \t\t\t\tT_eq_int=T%di(1).lt.num\n 15307  \t\t\tcase default\n 15308: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15309  \t\t\t\tcall error_stop()\n 15310  \t\tend select\n .....\n 15315  \t\treal(kind=8),intent(in)::num\n 15316  \t\tif(.not.T%getFlag())then\n 15317: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15318  \t\t\tcall error_stop()\n 15319  \t\tend if\n 15320  \t\tif(T%gettotalData().gt.1)then\n 15321: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15322  \t\t\tcall error_stop()\n 15323  \t\tend if\n .....\n 15330  \t\t\t\tT_eq_int=num.lt.T%di(1)\n 15331  \t\t\tcase default\n 15332: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15333  \t\t\t\tcall error_stop()\n 15334  \t\tend select\n .....\n 15341  \t\tinteger :: l\n 15342  \t\tif(.not.T1%getFlag())then\n 15343: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15344  \t\t\tcall error_stop()\n 15345  \t\tend if\n 15346  \t\tif(.not.T2%getFlag())then\n 15347: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15348  \t\t\tcall error_stop()\n 15349  \t\tend if\n 15350  \t\tif(T1%gettotalData().gt.1)then\n 15351: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.ge.)!!\",-1)\n 15352  \t\t\tcall error_stop()\n 15353  \t\tend if\n 15354  \t\tif(T1%gettotalData().gt.2)then\n 15355: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.ge.)!!\",-1)\n 15356  \t\t\tcall error_stop()\n 15357  \t\tend if\n 15358  \t\tif(T1%getType().gt.3)then\n 15359: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15360  \t\t\tcall error_stop()\n 15361  \t\tend if\n 15362  \t\tif(T2%getType().gt.3)then\n 15363: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15364  \t\t\tcall error_stop()\n 15365  \t\tend if\n .....\n 15372  \t\tinteger,intent(in)::num\n 15373  \t\tif(.not.T%getFlag())then\n 15374: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15375  \t\t\tcall error_stop()\n 15376  \t\tend if\n 15377  \t\tif(T%gettotalData().gt.1)then\n 15378: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15379  \t\t\tcall error_stop()\n 15380  \t\tend if\n .....\n 15387  \t\t\t\tT_eq_int=T%di(1).ge.num\n 15388  \t\t\tcase default\n 15389: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15390  \t\t\t\tcall error_stop()\n 15391  \t\tend select\n .....\n 15396  \t\tinteger,intent(in)::num\n 15397  \t\tif(.not.T%getFlag())then\n 15398: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15399  \t\t\tcall error_stop()\n 15400  \t\tend if\n 15401  \t\tif(T%gettotalData().gt.1)then\n 15402: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15403  \t\t\tcall error_stop()\n 15404  \t\tend if\n .....\n 15411  \t\t\t\tT_eq_int=num.ge.T%di(1)\n 15412  \t\t\tcase default\n 15413: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15414  \t\t\t\tcall error_stop()\n 15415  \t\tend select\n .....\n 15421  \t\treal(kind=4),intent(in)::num\n 15422  \t\tif(.not.T%getFlag())then\n 15423: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15424  \t\t\tcall error_stop()\n 15425  \t\tend if\n 15426  \t\tif(T%gettotalData().gt.1)then\n 15427: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15428  \t\t\tcall error_stop()\n 15429  \t\tend if\n .....\n 15436  \t\t\t\tT_eq_int=T%di(1).ge.num\n 15437  \t\t\tcase default\n 15438: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15439  \t\t\t\tcall error_stop()\n 15440  \t\tend select\n .....\n 15445  \t\treal(kind=4),intent(in)::num\n 15446  \t\tif(.not.T%getFlag())then\n 15447: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15448  \t\t\tcall error_stop()\n 15449  \t\tend if\n 15450  \t\tif(T%gettotalData().gt.1)then\n 15451: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15452  \t\t\tcall error_stop()\n 15453  \t\tend if\n .....\n 15460  \t\t\t\tT_eq_int=num.ge.T%di(1)\n 15461  \t\t\tcase default\n 15462: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15463  \t\t\t\tcall error_stop()\n 15464  \t\tend select\n .....\n 15469  \t\treal(kind=8),intent(in)::num\n 15470  \t\tif(.not.T%getFlag())then\n 15471: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15472  \t\t\tcall error_stop()\n 15473  \t\tend if\n 15474  \t\tif(T%gettotalData().gt.1)then\n 15475: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15476  \t\t\tcall error_stop()\n 15477  \t\tend if\n .....\n 15484  \t\t\t\tT_eq_int=T%di(1).ge.num\n 15485  \t\t\tcase default\n 15486: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15487  \t\t\t\tcall error_stop()\n 15488  \t\tend select\n .....\n 15493  \t\treal(kind=8),intent(in)::num\n 15494  \t\tif(.not.T%getFlag())then\n 15495: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15496  \t\t\tcall error_stop()\n 15497  \t\tend if\n 15498  \t\tif(T%gettotalData().gt.1)then\n 15499: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15500  \t\t\tcall error_stop()\n 15501  \t\tend if\n .....\n 15508  \t\t\t\tT_eq_int=num.ge.T%di(1)\n 15509  \t\t\tcase default\n 15510: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15511  \t\t\t\tcall error_stop()\n 15512  \t\tend select\n .....\n 15518  \t\tinteger :: l\n 15519  \t\tif(.not.T1%getFlag())then\n 15520: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15521  \t\t\tcall error_stop()\n 15522  \t\tend if\n 15523  \t\tif(.not.T2%getFlag())then\n 15524: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15525  \t\t\tcall error_stop()\n 15526  \t\tend if\n 15527  \t\tif(T1%gettotalData().gt.1)then\n 15528: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.gt.)!!\",-1)\n 15529  \t\t\tcall error_stop()\n 15530  \t\tend if\n 15531  \t\tif(T1%gettotalData().gt.2)then\n 15532: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.gt.)!!\",-1)\n 15533  \t\t\tcall error_stop()\n 15534  \t\tend if\n 15535  \t\tif(T1%getType().gt.3)then\n 15536: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15537  \t\t\tcall error_stop()\n 15538  \t\tend if\n 15539  \t\tif(T2%getType().gt.3)then\n 15540: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15541  \t\t\tcall error_stop()\n 15542  \t\tend if\n .....\n 15549  \t\tinteger,intent(in)::num\n 15550  \t\tif(.not.T%getFlag())then\n 15551: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15552  \t\t\tcall error_stop()\n 15553  \t\tend if\n 15554  \t\tif(T%gettotalData().gt.1)then\n 15555: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15556  \t\t\tcall error_stop()\n 15557  \t\tend if\n .....\n 15564  \t\t\t\tT_eq_int=T%di(1).gt.num\n 15565  \t\t\tcase default\n 15566: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15567  \t\t\t\tcall error_stop()\n 15568  \t\tend select\n .....\n 15573  \t\tinteger,intent(in)::num\n 15574  \t\tif(.not.T%getFlag())then\n 15575: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15576  \t\t\tcall error_stop()\n 15577  \t\tend if\n 15578  \t\tif(T%gettotalData().gt.1)then\n 15579: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15580  \t\t\tcall error_stop()\n 15581  \t\tend if\n .....\n 15588  \t\t\t\tT_eq_int=num.gt.T%di(1)\n 15589  \t\t\tcase default\n 15590: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15591  \t\t\t\tcall error_stop()\n 15592  \t\tend select\n .....\n 15598  \t\treal(kind=4),intent(in)::num\n 15599  \t\tif(.not.T%getFlag())then\n 15600: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15601  \t\t\tcall error_stop()\n 15602  \t\tend if\n 15603  \t\tif(T%gettotalData().gt.1)then\n 15604: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15605  \t\t\tcall error_stop()\n 15606  \t\tend if\n .....\n 15613  \t\t\t\tT_eq_int=T%di(1).gt.num\n 15614  \t\t\tcase default\n 15615: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15616  \t\t\t\tcall error_stop()\n 15617  \t\tend select\n .....\n 15622  \t\treal(kind=4),intent(in)::num\n 15623  \t\tif(.not.T%getFlag())then\n 15624: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15625  \t\t\tcall error_stop()\n 15626  \t\tend if\n 15627  \t\tif(T%gettotalData().gt.1)then\n 15628: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15629  \t\t\tcall error_stop()\n 15630  \t\tend if\n .....\n 15637  \t\t\t\tT_eq_int=num.gt.T%di(1)\n 15638  \t\t\tcase default\n 15639: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15640  \t\t\t\tcall error_stop()\n 15641  \t\tend select\n .....\n 15646  \t\treal(kind=8),intent(in)::num\n 15647  \t\tif(.not.T%getFlag())then\n 15648: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15649  \t\t\tcall error_stop()\n 15650  \t\tend if\n 15651  \t\tif(T%gettotalData().gt.1)then\n 15652: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15653  \t\t\tcall error_stop()\n 15654  \t\tend if\n .....\n 15661  \t\t\t\tT_eq_int=T%di(1).gt.num\n 15662  \t\t\tcase default\n 15663: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15664  \t\t\t\tcall error_stop()\n 15665  \t\tend select\n .....\n 15670  \t\treal(kind=8),intent(in)::num\n 15671  \t\tif(.not.T%getFlag())then\n 15672: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15673  \t\t\tcall error_stop()\n 15674  \t\tend if\n 15675  \t\tif(T%gettotalData().gt.1)then\n 15676: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15677  \t\t\tcall error_stop()\n 15678  \t\tend if\n .....\n 15685  \t\t\t\tT_eq_int=num.gt.T%di(1)\n 15686  \t\t\tcase default\n 15687: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15688  \t\t\t\tcall error_stop()\n 15689  \t\tend select\n .....\n 15820  \t\t\t\tdotTensor=zdotTensor(phi1,phi2)\n 15821  \t\t\tcase default\n 15822: \t\t\t\tcall writemess(\"ERROR in .x.\",-1)\n 15823  \t\t\t\tcall error_stop()\n 15824  \t\tend select\n .....\n 15958  \t\t\t\tdotTensor=zdotUTensor(phi1,phi2)\n 15959  \t\t\tcase default\n 15960: \t\t\t\tcall writemess(\"ERROR in .dot.\",-1)\n 15961  \t\t\t\tcall error_stop()\n 15962  \t\tend select\n .....\n 16042  \t\t\t\tnormTensor=dble(z)\n 16043  \t\t\tcase default\n 16044: \t\t\t\tcall writemess(\"ERROR in norm\",-1)\n 16045  \t\t\t\tcall error_stop()\n 16046  \t\tend select\n .....\n 16211  \t\trank=getRank(T)\n 16212  \t\tif(rank.ne.2) then\n 16213: \t\t\tcall writemess(\"error in trace\",-1)\n 16214: \t\t\tcall writemess(\"input Tensor should be a matrix\",-1)\n 16215  \t\t\tcall error_stop()\n 16216  \t\tend if\n 16217  \t\tif((T.dim.1).ne.(T.dim.2)) then\n 16218: \t\t\tcall writemess(\"error in trace\",-1)\n 16219: \t\t\tcall writemess(\"input Tensor should be a matrix\",-1)\n 16220: \t\t\tcall writemess((T.dim.1)+','+(T.dim.2),-1)\n 16221  \t\t\tcall error_stop()\n 16222  \t\tend if\n .....\n 16233  \t\t\t\ttrace=ztraceTensor(T)\n 16234  \t\t\tcase default\n 16235: \t\t\t\tcall writemess(\"ERROR in trace\",-1)\n 16236  \t\t\t\tcall error_stop()\n 16237  \t\tend \tselect\n .....\n 16829  \t\trank2=T2%Getrank()\n 16830  \t\tif(rank1.ne.rank2) then\n 16831: \t\t\tcall writemess('can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16832  \t\t\tcall error_stop()\n 16833  \t\tend if\n 16834  \t\tif(row)then\n 16835  \t\t\tif(rank1.eq.1)then\n 16836: \t\t\t\t!call writemess('Do not finsiehd this part,can not paste two Tensor,ranks are,'+rank1+','+rank2)\n 16837  \t\t\t\t!call error_stop()\n 16838  \t\t\t\tpasteDim1=1\n .....\n 16851  \t\t\t\t\tcollen=collen*T1%dim(i)\n 16852  \t\t\t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16853: \t\t\t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16854: \t\t\t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i),-1)\n 16855: \t\t\t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i),-1)\n 16856  \t\t\t\t\t\tcall error_stop()\n 16857  \t\t\t\t\tend if\n .....\n 16861  \t\t\t\tcall newDim%setName(1,T1%outName(1))\n 16862  \t\t\telse if(T1%outNameFlag().eq.2)then\n 16863: \t\t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16864  \t\t\t\tcall error_stop()\n 16865  \t\t\tend if\n .....\n 16876  \t\t\t\tcollen=collen*T1%dim(i)\n 16877  \t\t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16878: \t\t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16879: \t\t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i),-1)\n 16880: \t\t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i),-1)\n 16881  \t\t\t\t\tcall error_stop()\n 16882  \t\t\t\tend if\n .....\n 16886  \t\t\t\tcall newDim%setName(rank1,T1%outName(rank1))\n 16887  \t\t\telse if(T1%outNameFlag().eq.2)then\n 16888: \t\t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16889  \t\t\t\tcall error_stop()\n 16890  \t\t\tend if\n .....\n 16905  \t\trank2=T2%Getrank()\n 16906  \t\tif(rank1.ne.rank2) then\n 16907: \t\t\tcall writemess('can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16908  \t\t\tcall error_stop()\n 16909  \t\tend if\n 16910  \t\tif(rank1.eq.1)then\n 16911: \t\t\tcall writemess('Do not finsiehd this part,can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16912  \t\t\tcall error_stop()\n 16913  \t\tend if\n .....\n 16921  \t\t\tcollen=collen*T1%dim(i)\n 16922  \t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16923: \t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16924: \t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i))\n 16925: \t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i))\n 16926  \t\t\t\tcall error_stop()\n 16927  \t\t\tend if\n .....\n 16930  \t\t\tcall newDim%setName(1,T1%outName(1))\n 16931  \t\telse if(T1%outNameFlag().eq.2)then\n 16932: \t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16933  \t\t\tcall error_stop()\n 16934  \t\tend if\n .....\n 16947  \t\trank2=T2%Getrank()\n 16948  \t\tif(rank1.ne.rank2) then\n 16949: \t\t\tcall writemess('can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16950  \t\t\tcall error_stop()\n 16951  \t\tend if\n .....\n 16958  \t\t\tcollen=collen*T1%dim(i)\n 16959  \t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16960: \t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16961: \t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i),-1)\n 16962: \t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i),-1)\n 16963  \t\t\t\tcall error_stop()\n 16964  \t\t\tend if\n .....\n 16968  \t\t\tcall newDim%setName(rank1,T1%outName(rank1))\n 16969  \t\telse if(T1%outNameFlag().eq.2)then\n 16970: \t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16971  \t\t\tcall error_stop()\n 16972  \t\tend if\n .....\n 17011  \t\tif(associated(Tp,Up).or.associated(Tp,sp).or.associated(Tp,Vp).or.associated(Up,sp).or.&\n 17012  \t\t\t\tassociated(Up,Vp).or.associated(sp,Vp))then\n 17013: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 17014: \t\t\tcall writemess('error in call T%SVDroutine(U,S,V,Ncut)')\n 17015: \t\t\tcall writemess('T, U, s and V can not be a same variable')\n 17016  \t\t\tcall error_stop\n 17017  \t\tend if\n .....\n 17070  \t\tcall SVD_TData_routine(T%TData,U%TData,S%TData,V%TData,m,n,min_MN,Ncut_,info)\n 17071  \t\tif(info.ne.0) then\n 17072: \t\t\tcall writemess('Error in svd ,info='+info,-1)\n 17073: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17074  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17075  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17081  \t\tend if\n 17082  \t\tif(S%isnan())then!The number in S is less than U,V and T\n 17083: \t\t\tcall writemess('Error in svd ,NAN ERROR',-1)\n 17084: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17085  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17086  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17117  \t\tif(associated(Tp,Up).or.associated(Tp,sp).or.associated(Tp,Vp).or.associated(Up,sp).or.&\n 17118  \t\t\t\tassociated(Up,Vp).or.associated(sp,Vp))then\n 17119: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 17120: \t\t\tcall writemess('error in call T%SVDroutine(U,S,V,nameU,nameV,Ncut)')\n 17121: \t\t\tcall writemess('T, U, s and V can not be a same variable')\n 17122  \t\t\tcall error_stop\n 17123  \t\tend if\n .....\n 17137  \t\tend do\n 17138  \t\tif(rankU+rankV.ne.rank) then\n 17139: \t\t\tcall writemess(\"ERROR in SVDcutoff_name\",-1)\n 17140: \t\t\tcall writemess(nameU+','+nameV,-1)\n 17141  \t\t\tcall inputT%diminfo()\n 17142: \t\t\tcall writemess(rankU+','+rankV+','+rank,-1)\n 17143  \t\t\tcall error_stop()\n 17144  \t\tend if\n 17145  \t\tif(rankU.eq.0) then\n 17146: \t\t\tcall writemess(\"ERROR in SVDcutoff_name,no such name\",-1)\n 17147: \t\t\tcall writemess(nameU,-1)\n 17148  \t\t\tcall error_stop()\n 17149  \t\tend if\n 17150  \t\tif(rankV.eq.0) then\n 17151: \t\t\tcall writemess(\"ERROR in SVDcutoff_name,no such name\",-1)\n 17152: \t\t\tcall writemess(nameV,-1)\n 17153  \t\t\tcall error_stop()\n 17154  \t\tend if\n .....\n 17204  \t\tcall SVD_TData_routine(T%TData,U%TData,S%TData,V%TData,m,n,min_MN,Ncut_,info)\n 17205  \t\tif(info.ne.0) then\n 17206: \t\t\tcall writemess('Error in svd ,info='+info,-1)\n 17207: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17208  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17209  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17215  \t\tend if\n 17216  \t\tif(S%isnan())then!The number in S is less than U,V and T\n 17217: \t\t\tcall writemess('Error in svd ,NAN ERROR',-1)\n 17218: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17219  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17220  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17306  \t\t\tcall SVDcutoff(Temp,res(1),res(2),res(3),Ncut_)\n 17307  \t\telse\n 17308: \t\t\tcall writemess('DRROR in SVD, row='+row,-1)\n 17309: \t\t\tcall writemess('row is r or c',-1)\n 17310  \t\t\tcall error_stop\n 17311  \t\tend if\n .....\n 17342  \t\t\tcall SVDcutoff(Temp,U,s,V,Ncut_)\n 17343  \t\telse\n 17344: \t\t\tcall writemess('DRROR in SVD, row='+row,-1)\n 17345: \t\t\tcall writemess('row is r or c',-1)\n 17346  \t\t\tcall error_stop\n 17347  \t\tend if\n .....\n 17451  \t\trank=T%getRank()\n 17452  \t\tif((lenName1+lenName2).ne.rank)then\n 17453: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17454: \t\t\tcall writemess('rank='+rank,-1)\n 17455: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17456  \t\t\tcall error_stop\n 17457  \t\tend if\n .....\n 17483  \t\trank=T%getRank()\n 17484  \t\tif((lenName1+lenName2).ne.rank)then\n 17485: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17486: \t\t\tcall writemess('rank='+rank,-1)\n 17487: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17488  \t\t\tcall error_stop\n 17489  \t\tend if\n .....\n 17645  \t\tQp=>Q\n 17646  \t\tif(associated(Tp,Lp).or.associated(Tp,Qp).or.associated(Lp,Qp))then\n 17647: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 17648: \t\t\tcall writemess('error in call T%LQTensor(L,Q)')\n 17649: \t\t\tcall writemess('T, L and V can not be a same variable')\n 17650  \t\t\tcall error_stop\n 17651  \t\tend if\n .....\n 17668  \t\t\n 17669  \t\tif(info.ne.0) then\n 17670: \t\t\tcall writemess('Error in LQ decomposition ,info='+info,-1)\n 17671: \t\t\tcall writemess('output The data in ./_LQ_ERROR_LOG.err',-1)\n 17672  \t\t\topen(unit=9991,file='./_LQ_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17673  \t\t\tcall T%writeinfo('The Matrix in LQ',9991)\n .....\n 17727  \t\t\tQ%TenDim=dimen\n 17728  \t\t\tif(info.ne.0) then\n 17729: \t\t\t\tcall writemess('Error in LQ decomposition ,info='+info,-1)\n 17730: \t\t\t\tcall writemess('output The data in ./_LQ_ERROR_LOG.err',-1)\n 17731  \t\t\t\topen(unit=9991,file='./_LQ_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17732  \t\t\t\tcall T%writeinfo('The Matrix in LQ',9991)\n .....\n 17763  \t\tend do\n 17764  \t\tif(rankU+rankV.ne.rank) then\n 17765: \t\t\tcall writemess(\"ERROR in LQTensor_name\",-1)\n 17766: \t\t\tcall writemess(rankU+','+rankV+','+rank,-1)\n 17767  \t\t\tcall error_stop()\n 17768  \t\tend if\n 17769  \t\tif(rankU.eq.0) then\n 17770: \t\t\tcall writemess(\"ERROR in LQTensor_name,no such name\",-1)\n 17771: \t\t\tcall writemess(nameU,-1)\n 17772  \t\t\tcall error_stop()\n 17773  \t\tend if\n 17774  \t\tif(rankV.eq.0) then\n 17775: \t\t\tcall writemess(\"ERROR in LQTensor_name,no such name\",-1)\n 17776: \t\t\tcall writemess(nameV,-1)\n 17777  \t\t\tcall error_stop()\n 17778  \t\tend if\n .....\n 17827  \t\t\tcall LQdecomposition1(Temp,res(1),res(2))\n 17828  \t\telse\n 17829: \t\t\tcall writemess('ERROR in LQ, row='+row,-1)\n 17830: \t\t\tcall writemess('row is r or c',-1)\n 17831  \t\t\tcall error_stop\n 17832  \t\tend if\n .....\n 17893  \t\t\tcall LQdecomposition1(Temp,L,Q)\n 17894  \t\telse\n 17895: \t\t\tcall writemess('DRROR in LQ, row='+row,-1)\n 17896: \t\t\tcall writemess('row is r or c',-1)\n 17897  \t\t\tcall error_stop\n 17898  \t\tend if\n .....\n 17943  \t\trank=T%getRank()\n 17944  \t\tif((lenName1+lenName2).ne.rank)then\n 17945: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17946: \t\t\tcall writemess('rank='+rank,-1)\n 17947: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17948  \t\t\tcall error_stop\n 17949  \t\tend if\n .....\n 17971  \t\trank=T%getRank()\n 17972  \t\tif((lenName1+lenName2).ne.rank)then\n 17973: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17974: \t\t\tcall writemess('rank='+rank,-1)\n 17975: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17976  \t\t\tcall error_stop\n 17977  \t\tend if\n .....\n 18007  \t\tQp=>R\n 18008  \t\tif(associated(Tp,Lp).or.associated(Tp,Qp).or.associated(Lp,Qp))then\n 18009: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 18010: \t\t\tcall writemess('error in call T%QRTensor(Q,R)')\n 18011: \t\t\tcall writemess('T, Q and R can not be a same variable')\n 18012  \t\t\tcall error_stop\n 18013  \t\tend if\n .....\n 18027  \t\tcall TData_QR(Tau%TData,R%TData,M,N,INFO)\n 18028  \t\tif(info.ne.0) then\n 18029: \t\t\tcall writemess('Error in QR decomposition ,info='+info,-1)\n 18030: \t\t\tcall writemess('output The data in ./_QR_ERROR_LOG.err',-1)\n 18031  \t\t\topen(unit=9991,file='./_QR_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 18032  \t\t\tcall T%writeinfo('The Matrix in QR',9991)\n .....\n 18087  \t\t\tQ%TenDim=dimen\n 18088  \t\t\tif(info.ne.0) then\n 18089: \t\t\t\tcall writemess('Error in QR decomposition ,info='+info,-1)\n 18090: \t\t\t\tcall writemess('output The data in ./_QR_ERROR_LOG.err',-1)\n 18091  \t\t\t\topen(unit=9991,file='./_QR_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 18092  \t\t\t\tcall T%writeinfo('The Matrix in QR',9991)\n .....\n 18121  \t\tend do\n 18122  \t\tif(rankU+rankV.ne.rank) then\n 18123: \t\t\tcall writemess(\"ERROR in QRTensor_name\",-1)\n 18124: \t\t\tcall writemess(rankU+','+rankV+','+rank,-1)\n 18125  \t\t\tcall error_stop()\n 18126  \t\tend if\n 18127  \t\tif(rankU.eq.0) then\n 18128: \t\t\tcall writemess(\"ERROR in QRTensor_name,no such name\",-1)\n 18129: \t\t\tcall writemess(nameU,-1)\n 18130  \t\t\tcall error_stop()\n 18131  \t\tend if\n 18132  \t\tif(rankV.eq.0) then\n 18133: \t\t\tcall writemess(\"ERROR in QRTensor_name,no such name\",-1)\n 18134: \t\t\tcall writemess(nameV,-1)\n 18135  \t\t\tcall error_stop()\n 18136  \t\tend if\n .....\n 18187  \t\t\tcall QRdecomposition1(Temp,res(1),res(2))\n 18188  \t\telse\n 18189: \t\t\tcall writemess('ERROR in LQ, row='+row,-1)\n 18190: \t\t\tcall writemess('row is r or c',-1)\n 18191  \t\t\tcall error_stop\n 18192  \t\tend if\n .....\n 18254  \t\t\tcall QRdecomposition1(Temp,Q,R)\n 18255  \t\telse\n 18256: \t\t\tcall writemess('DRROR in LQ, row='+row,-1)\n 18257: \t\t\tcall writemess('row is r or c',-1)\n 18258  \t\t\tcall error_stop\n 18259  \t\tend if\n .....\n 18305  \t\trank=T%getRank()\n 18306  \t\tif((lenName1+lenName2).ne.rank)then\n 18307: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 18308: \t\t\tcall writemess('rank='+rank,-1)\n 18309: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 18310  \t\t\tcall error_stop\n 18311  \t\tend if\n .....\n 18333  \t\trank=T%getRank()\n 18334  \t\tif((lenName1+lenName2).ne.rank)then\n 18335: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 18336: \t\t\tcall writemess('rank='+rank,-1)\n 18337: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 18338  \t\t\tcall error_stop\n 18339  \t\tend if\n .....\n 19487  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19488  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19489: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_SUM_Tensor',-1)\n 19490  \t\t\ttag=1\n 19491  \t\t\ttypechar=inTensor%getclassType()\n 19492: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19493  \t\t\tdo i=1,proNum-1\n 19494  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19495  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19496: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19497  \t\t\tend do\n 19498  \t\t\tcall error_stop()\n .....\n 19511  \t\t\t\treturn\n 19512  \t\t\tend if\n 19513: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_SUM_Tensor')\n 19514  \t\t\tcall error_stop\n 19515  \t\tend if\n 19516  \t\tif(classtype.gt.5)then\n 19517: \t\t\tcall writemess('The data type in Tensor can not be sum,the data type is classType='+inTensor%getclassType(),-1)\n 19518  \t\t\tcall error_stop()\n 19519  \t\tend if\n .....\n 19544  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19545  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19546: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_SUM_Tensor',-1)\n 19547  \t\t\ttag=1\n 19548  \t\t\ttypechar=inoutTensor%getclassType()\n 19549: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19550  \t\t\tdo i=1,proNum-1\n 19551  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19552  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19553: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19554  \t\t\tend do\n 19555  \t\t\tcall error_stop()\n .....\n 19569  \t\t\t\treturn\n 19570  \t\t\tend if\n 19571: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_SUM_Tensor')\n 19572  \t\t\tcall error_stop\n 19573  \t\tend if\n 19574  \t\t\n 19575  \t\tif(classtype.gt.5)then\n 19576: \t\t\tcall writemess('The data type in Tensor can not be sum,the data type is classType='+inoutTensor%getclassType(),-1)\n 19577  \t\t\tcall error_stop()\n 19578  \t\tend if\n .....\n 19602  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19603  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19604: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MAX_Tensor',-1)\n 19605  \t\t\ttag=1\n 19606  \t\t\ttypechar=inTensor%getclassType()\n 19607: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19608  \t\t\tdo i=1,proNum-1\n 19609  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19610  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19611: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19612  \t\t\tend do\n 19613  \t\t\tcall error_stop()\n .....\n 19616  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19617  \t\tif(.not.ALLgoonFlag)then\n 19618: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MAX_Tensor')\n 19619  \t\t\tcall error_stop\n 19620  \t\tend if\n 19621  \t\tif(classtype.ge.4)then\n 19622: \t\t\tcall writemess('The data type in Tensor can not Find MAX,the data type is classType='+inTensor%getclassType(),-1)\n 19623  \t\t\tcall error_stop()\n 19624  \t\tend if\n .....\n 19649  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19650  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19651: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MAX_Tensor',-1)\n 19652  \t\t\ttag=1\n 19653  \t\t\ttypechar=inoutTensor%getclassType()\n 19654: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19655  \t\t\tdo i=1,proNum-1\n 19656  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19657  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19658: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19659  \t\t\tend do\n 19660  \t\t\tcall error_stop()\n .....\n 19664  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19665  \t\tif(.not.ALLgoonFlag)then\n 19666: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MAX_Tensor')\n 19667  \t\t\tcall error_stop\n 19668  \t\tend if\n 19669  \t\t\n 19670  \t\tif(classtype.ge.4)then\n 19671: \t\t\tcall writemess('The data type in Tensor can not Find MAX,the data type is classType='+inoutTensor%getclassType(),-1)\n 19672  \t\t\tcall error_stop()\n 19673  \t\tend if\n .....\n 19697  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19698  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19699: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MIN_Tensor',-1)\n 19700  \t\t\ttag=1\n 19701  \t\t\ttypechar=inTensor%getclassType()\n 19702: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19703  \t\t\tdo i=1,proNum-1\n 19704  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19705  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19706: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19707  \t\t\tend do\n 19708  \t\t\tcall error_stop()\n .....\n 19711  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19712  \t\tif(.not.ALLgoonFlag)then\n 19713: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MIN_Tensor')\n 19714  \t\t\tcall error_stop\n 19715  \t\tend if\n 19716  \t\t\n 19717  \t\tif(classtype.ge.4)then\n 19718: \t\t\tcall writemess('The data type in Tensor can not Find MIN,the data type is classType='+inTensor%getclassType(),-1)\n 19719  \t\t\tcall error_stop()\n 19720  \t\tend if\n .....\n 19745  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19746  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19747: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MIN_Tensor',-1)\n 19748  \t\t\ttag=1\n 19749  \t\t\ttypechar=inoutTensor%getclassType()\n 19750: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19751  \t\t\tdo i=1,proNum-1\n 19752  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19753  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19754: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19755  \t\t\tend do\n 19756  \t\t\tcall error_stop()\n .....\n 19759  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19760  \t\tif(.not.ALLgoonFlag)then\n 19761: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MIN_Tensor')\n 19762  \t\t\tcall error_stop\n 19763  \t\tend if\n 19764  \t\tif(classtype.ge.4)then\n 19765: \t\t\tcall writemess('The data type in Tensor can not Find MIN,the data type is classType='+inoutTensor%getclassType(),-1)\n 19766  \t\t\tcall error_stop()\n 19767  \t\tend if\n .....\n 19875  \t\t\t\t\t\tmem%DimLength=length\n 19876  \t\t\t\t\telse\n 19877: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19878  \t\t\t\t\t\tif(present(w))then\n 19879: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19880: \t\t\t\t\t\t\tcall writemess(w)\n 19881  \t\t\t\t\t\tend if\n 19882  \t\t\t\t\t\tcall error_stop()\n .....\n 19890  \t\t\t\t\t\tmem%TLength=length\n 19891  \t\t\t\t\telse\n 19892: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19893  \t\t\t\t\t\tif(present(w))then\n 19894: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19895: \t\t\t\t\t\t\tcall writemess(w)\n 19896  \t\t\t\t\t\tend if\n 19897  \t\t\t\t\t\tcall error_stop()\n .....\n 19915  \t\t\t\t\t\tmem%DimLength=length\n 19916  \t\t\t\t\telse\n 19917: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19918  \t\t\t\t\t\tif(present(w))then\n 19919: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19920: \t\t\t\t\t\t\tcall writemess(w)\n 19921  \t\t\t\t\t\tend if\n 19922  \t\t\t\t\t\tcall error_stop()\n .....\n 19930  \t\t\t\t\t\tmem%TLength=length\n 19931  \t\t\t\t\telse\n 19932: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19933  \t\t\t\t\t\tif(present(w))then\n 19934: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19935: \t\t\t\t\t\t\tcall writemess(w)\n 19936  \t\t\t\t\t\tend if\n 19937  \t\t\t\t\t\tcall error_stop()\n .....\n 19979  \t\t\t\tcall mem%allocate(9,ith,w)\n 19980  \t\t\telse\n 19981: \t\t\t\tcall writemess('maximum memory limit reach')\n 19982: \t\t\t\tcall writemess('memory for Tensor is length='+mem%iLength)\n 19983  \t\t\t\tcall error_stop\n 19984  \t\t\tend if\n .....\n 20000  \t\t\t\tcall mem%allocate(9,ith,w)\n 20001  \t\t\telse\n 20002: \t\t\t\tcall writemess('maximum memory limit reach')\n 20003: \t\t\t\tcall writemess('memory for Tensor is length='+mem%iLength)\n 20004  \t\t\t\tcall error_stop\n 20005  \t\t\tend if\n .....\n 20021  \t\t\t\tcall mem%allocate(8,ith,w)\n 20022  \t\t\telse\n 20023: \t\t\t\tcall writemess('maximum memory limit reach')\n 20024: \t\t\t\tcall writemess('memory for Dimension is length='+mem%iLength)\n 20025  \t\t\t\tcall error_stop\n 20026  \t\t\tend if\n .....\n 20042  \t\t\t\tcall mem%allocate(8,ith,w)\n 20043  \t\t\telse\n 20044: \t\t\t\tcall writemess('maximum memory limit reach')\n 20045: \t\t\t\tcall writemess('memory for Dimension is length='+mem%iLength)\n 20046  \t\t\t\tcall error_stop\n 20047  \t\t\tend if\n .....\n 20053  \tsubroutine print_info(mem)\n 20054  \t\tclass(extendsMemory),intent(inout)::mem\n 20055: \t\tcall writemess('The length of the memory are')\n 20056: \t\tcall writemess('integer         :'+mem%iLength)\n 20057: \t\tcall writemess('real(kind=4)    :'+mem%sLength)\n 20058: \t\tcall writemess('real(kind=8)    :'+mem%dLength)\n 20059: \t\tcall writemess('complex(kind=4) :'+mem%cLength)\n 20060: \t\tcall writemess('complex(kind=8) :'+mem%zLength)\n 20061: \t\tcall writemess('logical         :'+mem%lLength)\n 20062: \t\tcall writemess('character       :'+mem%aLength)\n 20063: \t\tcall writemess('Dimension       :'+mem%DimLength)\n 20064: \t\tcall writemess('Tensor          :'+mem%TLength)\n 20065  \t\treturn\n 20066  \tend subroutine\n .....\n 20069  \t\tinteger,intent(inout)::inoutlen(:)\n 20070  \t\tif(size(inoutlen).lt.9)then\n 20071: \t\t\tcall writemess('ERROR in get length of the extendsMemory')\n 20072  \t\t\tcall error_stop\n 20073  \t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tools.f90:\n   90  \tinteger,private,parameter::IDmin=0\n   91  \t!real*8,external::omp_get_wtime\n   92: \tpublic::writemess\n   93: \tinterface writemess\n   94: \t\tmodule procedure writemess_char\n   95: \t\tmodule procedure writemess_char2\n   96: \t\tmodule procedure writemess_char_form\n   97: \t\tmodule procedure writemess_real\n   98: \t\tmodule procedure writemess_real4\n   99: \t\tmodule procedure writemess_logi\n  100: \t\tmodule procedure writemess_int\n  101: \t\tmodule procedure writemess_com4\n  102: \t\tmodule procedure writemess_com8\n  103: \t\tmodule procedure writemess_real_array\n  104: \t\tmodule procedure writemess_real4_array\n  105: \t\tmodule procedure writemess_logi_array\n  106: \t\tmodule procedure writemess_int_array\n  107: \t\tmodule procedure writemess_com4_array\n  108: \t\tmodule procedure writemess_com8_array\n  109: \t\tmodule procedure writemess_real_form\n  110: \t\tmodule procedure writemess_real4_form\n  111: \t\tmodule procedure writemess_int_form\n  112: \t\tmodule procedure writemess_com4_form\n  113: \t\tmodule procedure writemess_com8_form\n  114: \t\tmodule procedure writemess_real_array_form\n  115: \t\tmodule procedure writemess_real4_array_form\n  116: \t\tmodule procedure writemess_int_array_form\n  117: \t\tmodule procedure writemess_com4_array_form\n  118: \t\tmodule procedure writemess_com8_array_form\n  119  \tend interface\t\n  120  \n  ...\n  329  \tsubroutine set_error_backtrace()\n  330  \t\terror_backtrace_Flag=.true.\n  331: \t\tcall writemess(' ')\n  332: \t\tcall writemess('#############   Set the error_backtrace  ##################')\n  333: \t\tcall writemess(' The error_backtrace can print the location of the bugs!')\n  334: \t\tcall writemess(' Add the code: ')\n  335: \t\tcall writemess('\t -g -static -ffpe-trap=invalid  ')\n  336: \t\tcall writemess(' when compiling your files ')\n  337: \t\tcall writemess(' Example: ')\n  338: \t\tcall writemess('    mpif90 -g -static -ffpe-trap=invalid test.f90 -o test')\n  339: \t\tcall writemess('###########################################################')\n  340: \t\tcall writemess(' ')\n  341  \t\treturn\n  342  \tend subroutine\n  343  \tsubroutine unset_error_backtrace()\n  344  \t\terror_backtrace_Flag=.false.\n  345: \t\tcall writemess(' unSet the error_backtrace')\n  346  \tend subroutine\n  347  \tsubroutine set_persent_Len(length)\n  ...\n  380  \t\t\treturn\n  381  \t\tend if\n  382: \t\twrite(*,*)\"ERROR in set_writemess_type\"\n  383  \t\tcall error_stop()\n  384  \tend subroutine\n  ...\n  394  \t\tcheck_same_name_flag=.false.\n  395  \t\tProductTensor_output_check_flag=.false.\n  396: \t\tcall writemess('Do not check dimension Name')\n  397  \t\treturn\n  398  \tend subroutine\n  ...\n  401  \t\tcheck_same_name_flag=.true.\n  402  \t\tProductTensor_output_check_flag=.true.\n  403: \t\tcall writemess('check dimension Name')\n  404  \t\treturn\n  405  \tend subroutine\n  ...\n  407  \tsubroutine set_deallocate_memory_flag()\n  408  \t\tdeallocate_memory_flag=.true.\n  409: \t\tcall writemess('deallocate memory after using them')\n  410  \t\treturn\n  411  \tend subroutine\n  412  \tsubroutine unset_deallocate_memory_flag()\n  413  \t\tdeallocate_memory_flag=.false.\n  414: \t\tcall writemess('do not  deallocate memory after using them')\n  415  \t\treturn\n  416  \tend subroutine\n  ...\n  491  \t\tlogical,save::first_flag=.true.\n  492  \t\tif(.not.out_log_flag)then\n  493: \t\t\tcall writemess('Set the log address first by calling set_output_log_address(address,notOverWrite)')\n  494  \t\t\tcall error_stop\n  495  \t\tend if\n  ...\n  497  \t\t\tfirst_flag=.false.\n  498  \t\telse\n  499: \t\t\tcall writemess('The program have set the MPI log before')\n  500  \t\t\tcall error_stop\n  501  \t\tend if\n  502: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  503: \t\tcall writemess('% Set log files for every cpu')\n  504: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  505  \t\tif(output_ProID.eq.output_cpu_number)return\n  506  \t\tlog_address=log_address+output_ProID\n  ...\n  513  \t\t\tendif\n  514  \t\tend if\n  515: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  516: \t\tcall writemess('%  This is the output log of cpu'+output_ProID)\n  517: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  518: \t\tcall writemess(' ')\n  519: \t\tcall writemess(' ')\n  520: \t\tcall writemess(' ')\n  521  \t\treturn\n  522  \tend subroutine\n  ...\n  542  \tsubroutine error_stop()! bug , stop\n  543  \t\tif(MPI_running)then\n  544: \t\t\tif(seed_flag)call writemess('The random seed is'+initial_randomseed)\n  545: \t\t\tif(seed_flag)call writemess('The random seed in cpu is'+initial_mpi_randomseed_in_cpus,-1)\n  546: \t\t\tcall writemess('    Running CPU number is   '+(' '+output_ProNum))\n  547: \t\t\tcall writemess('    All cups are going to stop   ')\n  548: \t\t\tcall writemess('    ')\n  549  \t\t\tcall outpicture()\n  550  \t\t\tcall sleep(2)\n  ...\n  553  \t\t\tstop\n  554  \t\tend if\n  555: \t\tif(seed_flag)call writemess('The random seed is,seed='+initial_randomseed)\n  556  \t\tcall outpicture()\n  557  \t\tif(error_backtrace_Flag)CALL BACKTRACE \n  ...\n 1292  \t\tend do\n 1293  \t\tif(len(w).lt.i)then\n 1294: \t\t\tcall writemess('The input character is too short to store the data. in character=integer')\n 1295  \t\t\tcall error_stop\n 1296  \t\tend if\n ....\n 1758  \t\tend if\n 1759  \t\tif(ith1+1.gt.ith2-1)then\n 1760: \t\t\tcall writemess('ERROR in getting sub character')\n 1761  \t\t\tcall error_stop\n 1762  \t\tend if\n ....\n 2105  \n 2106  \n 2107: \t\t\t\tcall writemess(' ')\n 2108: \t\t\t\tcall writemess('***** Cannot open the file of '+(' '+FileAddress)+' ******')\n 2109: \t\t\t\tcall writemess(' ')\n 2110  \t\t\t\tcall error_stop\n 2111  \t\t\tend if\n ....\n 2146  \n 2147  \n 2148: \tsubroutine writemess_char(mess,cpu_number)\n 2149  \t\tCHARACTER(len=*),intent(in)::mess\n 2150  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2200  \t\treturn\n 2201  \tend subroutine\n 2202: \tsubroutine writemess_char_form(mess,form_,cpu_number)\n 2203  \t\tCHARACTER(len=*),intent(in)::mess\n 2204  \t\tcharacter(len=*),intent(in)::form_\n ....\n 2336  \tend subroutine\n 2337  \n 2338: \tsubroutine writemess_char2(noadjustl,mess,cpu_number)\n 2339  \t\tCHARACTER(len=*),intent(in)::mess\n 2340  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2366  \tend subroutine\n 2367  \t\n 2368: \tsubroutine writemess_real(mess,cpu_number)\n 2369  \t\treal*8,intent(in)::mess\n 2370  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2401  \t\treturn\n 2402  \tend subroutine\n 2403: \tsubroutine writemess_real_array(mess,cpu_number)\n 2404  \t\treal*8,intent(in)::mess(:)\n 2405  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2436  \t\treturn\n 2437  \tend subroutine\n 2438: \tsubroutine writemess_real_form(mess,form,cpu_number)\n 2439  \t\treal*8,intent(in)::mess\n 2440  \t\tcharacter(len=*),intent(in)::form\n ....\n 2472  \t\treturn\n 2473  \tend subroutine\n 2474: \tsubroutine writemess_real_array_form(mess,form,cpu_number)\n 2475  \t\treal*8,intent(in)::mess(:)\n 2476  \t\tcharacter(len=*),intent(in)::form\n ....\n 2512  \n 2513  \n 2514: \tsubroutine writemess_real4(mess,cpu_number)\n 2515  \t\treal*4,intent(in)::mess\n 2516  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2547  \t\treturn\n 2548  \tend subroutine\n 2549: \tsubroutine writemess_real4_array(mess,cpu_number)\n 2550  \t\treal*4,intent(in)::mess(:)\n 2551  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2582  \t\treturn\n 2583  \tend subroutine\n 2584: \tsubroutine writemess_real4_form(mess,form,cpu_number)\n 2585  \t\treal*4,intent(in)::mess\n 2586  \t\tcharacter(len=*),intent(in)::form\n ....\n 2618  \t\treturn\n 2619  \tend subroutine\n 2620: \tsubroutine writemess_real4_array_form(mess,form,cpu_number)\n 2621  \t\treal*4,intent(in)::mess(:)\n 2622  \t\tcharacter(len=*),intent(in)::form\n ....\n 2657  \n 2658  \n 2659: \tsubroutine writemess_int(mess,cpu_number)\n 2660  \t\tinteger,intent(in)::mess\n 2661  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2692  \t\treturn\n 2693  \tend subroutine\n 2694: \tsubroutine writemess_int_array(mess,cpu_number)\n 2695  \t\tinteger,intent(in)::mess(:)\n 2696  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2727  \t\treturn\n 2728  \tend subroutine\n 2729: \tsubroutine writemess_int_form(mess,form,cpu_number)\n 2730  \t\tinteger,intent(in)::mess\n 2731  \t\tcharacter(len=*),intent(in)::form\n ....\n 2763  \t\treturn\n 2764  \tend subroutine\n 2765: \tsubroutine writemess_int_array_form(mess,form,cpu_number)\n 2766  \t\tinteger,intent(in)::mess(:)\n 2767  \t\tcharacter(len=*),intent(in)::form\n ....\n 2802  \n 2803  \n 2804: \tsubroutine writemess_com4(mess,cpu_number)\n 2805  \t\tcomplex*8,intent(in)::mess\n 2806  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2837  \t\treturn\n 2838  \tend subroutine\n 2839: \tsubroutine writemess_com4_array(mess,cpu_number)\n 2840  \t\tcomplex*8,intent(in)::mess(:)\n 2841  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2872  \t\treturn\n 2873  \tend subroutine\n 2874: \tsubroutine writemess_com4_form(mess,form,cpu_number)\n 2875  \t\tcomplex*8,intent(in)::mess\n 2876  \t\tcharacter(len=*),intent(in)::form\n ....\n 2908  \t\treturn\n 2909  \tend subroutine\n 2910: \tsubroutine writemess_com4_array_form(mess,form,cpu_number)\n 2911  \t\tcomplex*8,intent(in)::mess(:)\n 2912  \t\tcharacter(len=*),intent(in)::form\n ....\n 2945  \tend subroutine\n 2946  \n 2947: \tsubroutine writemess_com8(mess,cpu_number)\n 2948  \t\tcomplex*16,intent(in)::mess\n 2949  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2980  \t\treturn\n 2981  \tend subroutine\n 2982: \tsubroutine writemess_com8_array(mess,cpu_number)\n 2983  \t\tcomplex*16,intent(in)::mess(:)\n 2984  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 3015  \t\treturn\n 3016  \tend subroutine\n 3017: \tsubroutine writemess_com8_form(mess,form,cpu_number)\n 3018  \t\tcomplex*16,intent(in)::mess\n 3019  \t\tcharacter(len=*),intent(in)::form\n ....\n 3051  \t\treturn\n 3052  \tend subroutine\n 3053: \tsubroutine writemess_com8_array_form(mess,form,cpu_number)\n 3054  \t\tcomplex*16,intent(in)::mess(:)\n 3055  \t\tcharacter(len=*),intent(in)::form\n ....\n 3089  \n 3090  \n 3091: \tsubroutine writemess_logi(mess,cpu_number)\n 3092  \t\tlogical,intent(in)::mess\n 3093  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 3124  \t\treturn\n 3125  \tend subroutine\n 3126: \tsubroutine writemess_logi_array(mess,cpu_number)\n 3127  \t\tlogical,intent(in)::mess(:)\n 3128  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 3194  \t\t\tend if\n 3195  \t\t\tCALL DATE_AND_TIME(DATE=cpud,TIME=cput,ZONE=cpuz) \n 3196: \t\t\tcall writemess(\"now the time is :\")\n 3197  \t\t\tw1=cpud\n 3198  \t\t\tw2=cput\n 3199  \t\t\tw3=trim(adjustl(w1))//\" \"//trim(adjustl(w2))\n 3200: \t\t\tcall writemess(trim(adjustl(w3)))\n 3201  \t\t\tcall system(\"date '+%D%n%c' \")\n 3202  \t\t\t\n 3203: \t\t\tcall writemess(\"The time it cost up to now is\")\n 3204  \t\t\tw1=timed\n 3205  \t\t\tw3=\" \"//trim(adjustl(w1))//\"day,\"\n ....\n 3210  \t\t\tw1=times\n 3211  \t\t\tw3=trim(adjustl(w3))//trim(adjustl(w1))//\"second.\"\n 3212: \t\t\tcall writemess(trim(adjustl(w3)))\n 3213  \t\tend if\n 3214  \t\treturn\n ....\n 3303  \t\t\tTime_calculater_numOutput=15\n 3304  \t\tend if\n 3305: \t\tcall writemess('          --- reset Time calculator ---')\n 3306  \t\treturn\n 3307  \tend subroutine\n ....\n 3336  \t\t\tcall date_and_time(VALUES=values)\n 3337  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3338: \t\t\tcall writemess('      ##########'+(' '+systemtime)+' ##########')\n 3339  \t\t\tstepi=max(0+delta_step,1)\n 3340  \t\t\treturn\n ....\n 3354  \t\t\t\tcall date_and_time(VALUES=values)\n 3355  \t\t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3356: \t\t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3357  \t\t\t\treturn\n 3358  \t\t\tend if\n ....\n 3369  \t\t\tcall date_and_time(VALUES=values)\n 3370  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3371: \t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3372  \t\tend if\n 3373  \t\tif(stepi.eq.Time_calculater_TotalStep)then\n ....\n 3376  \t\t\tw=persentChar(100)\n 3377  \t\t\tcall system_time(time2-time1,timechar)\n 3378: \t\t\tcall writemess(w+'.Using time:'+timechar,'+')\n 3379  \t\t\tcall date_and_time(VALUES=values)\n 3380  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3381: \t\t\tcall writemess('      =========='+(' '+systemtime)+' ==========')\n 3382: \t\t\tcall writemess(' ')\n 3383  \t\tend if\n 3384  \t\treturn\n ....\n 3396  \t\tend if\n 3397  \t\tTime_calculater_limit_time=limit_time\n 3398: \t\tcall writemess('          ------- reset Time calculator ------')\n 3399: \t\tcall writemess('         limit_time='+limit_time+'s')\n 3400  \t\treturn\n 3401  \tend subroutine\n ....\n 3430  \t\t\tcall date_and_time(VALUES=values)\n 3431  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3432: \t\t\tcall writemess('      ##########'+(' '+systemtime)+' ##########')\n 3433  \t\t\tstepi=max(0+delta_step,1)\n 3434  \t\t\treturn\n ....\n 3448  \t\t\t\tcall date_and_time(VALUES=values)\n 3449  \t\t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3450: \t\t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3451  \t\t\t\treturn\n 3452  \t\t\tend if\n ....\n 3463  \t\t\tcall date_and_time(VALUES=values)\n 3464  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3465: \t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3466  \t\tend if\n 3467  \t\tif(stepi.eq.Time_calculater_TotalStep)then\n ....\n 3470  \t\t\tw=persentChar(100)\n 3471  \t\t\tcall system_time(time2-time1,timechar)\n 3472: \t\t\tcall writemess(w+'.Using time:'+timechar,'+')\n 3473  \t\t\tcall date_and_time(VALUES=values)\n 3474  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3475: \t\t\tcall writemess('      =========='+(' '+systemtime)+' ==========')\n 3476: \t\t\tcall writemess(' ')\n 3477  \t\tend if\n 3478  \t\tnotstopFlag=(time2-time1).lt.Time_calculater_limit_time\n ....\n 3501  \t\t\t\tmodi=totalstep/numOutput\n 3502  \t\t\tend if\n 3503: \t\t\tcall writemess('=====================================')\n 3504: \t\t\tcall writemess('output the running time for the loop:')\n 3505  \t\tend if\n 3506  \t\tif(first_write)then\n ....\n 3516  \t\t\t\t\tremainStep=totalstep-stepi\n 3517  \t\t\t\t\tcall system_time(persetpTime*remainStep,timechar2)\n 3518: \t\t\t\t\tcall writemess(w+'Using time:'+timechar+'. Remaining time:'+timechar2,'-')\n 3519  \t\t\t\t\treturn\n 3520  \t\t\t\tend if\n ....\n 3530  \t\t\t\tremainStep=totalstep-stepi\n 3531  \t\t\t\tcall system_time(persetpTime*remainStep,timechar2)\n 3532: \t\t\t\tcall writemess(w+'.Using time:'+timechar+'. Remaining time:'+timechar2,'-')\n 3533  \t\t\t\treturn\n 3534  \t\t\tend if\n ....\n 3543  \t\t\tremainStep=totalstep-stepi\n 3544  \t\t\tcall system_time(persetpTime*remainStep,timechar2)\n 3545: \t\t\tcall writemess(w+'.Using time:'+timechar+'. Remaining time:'+timechar2,'-')\n 3546  \t\tend if\n 3547  \t\tif(stepi.eq.totalstep)then\n ....\n 3550  \t\t\tw=persentChar(100)\n 3551  \t\t\tcall system_time(time2-time1,timechar)\n 3552: \t\t\tcall writemess(w+'.Using time:'+timechar,'+')\n 3553: \t\t\tcall writemess('=====================================')\n 3554  \t\t\tfirst=.true.\n 3555  \t\t\tfirst_write=.true.\n ....\n 3640  \tend subroutine\n 3641  \tsubroutine outpicture1()\n 3642: \t\tcall writemess(.true.,'    ')\n 3643: \t\tcall writemess(.true.,'                   _ooOoo_')\n 3644: \t\tcall writemess(.true.,' _____________    o8888888o')\n 3645: \t\tcall writemess(.true.,'|you have bugs|   88\" . \"88')\n 3646: \t\tcall writemess(.true.,'|------------__\\  (| -_- |)')\n 3647: \t\tcall writemess(.true.,'                  O\\  =  /O')\n 3648: \t\tcall writemess(.true.,'               ____/`---`\\\\____')\n 3649: \t\tcall writemess(.true.,'             .`  \\\\|     |//  `.')\n 3650: \t\tcall writemess(.true.,'            /  \\\\|||  :  |||//  \\')\n 3651: \t\tcall writemess(.true.,'           /  _||||| -:- |||||-  \\')\n 3652: \t\tcall writemess(.true.,'           |   | \\\\\\  -  /// |   |')\n 3653: \t\tcall writemess(.true.,'           | \\_|  ``\\---/``  |   |')\n 3654: \t\tcall writemess(.true.,'           \\  .-\\__  `-`  ___/-. /')\n 3655: \t\tcall writemess(.true.,'         ___`. .`  /--.--\\  `. . __')\n 3656: \t\tcall writemess(.true.,'      .\"\" `<  `.___\\_<|>_/___.`  >`\"\".')\n 3657: \t\tcall writemess(.true.,'     | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |')\n 3658: \t\tcall writemess(.true.,'     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /')\n 3659: \t\tcall writemess(.true.,'======`-.____`-.___\\_____/___.-`____.-`======')\n 3660: \t\tcall writemess(.true.,'                   `=---=`                    ')\n 3661: \t\tcall writemess(.true.,'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')\n 3662: \t\tcall writemess(.true.,' Report any bugs of the TNSP to sj.dong@outlook.com     \t     ' )\n 3663: \t\tcall writemess(.true.,'    ')\n 3664  \tend subroutine \n 3665  \tsubroutine outpicture2()\n 3666: \t   call writemess(.true.,'    ')\n 3667: \t   call writemess(.true.,'                      \\  /  ')\n 3668: \t\tcall writemess(.true.,'                    ___\\/__')\n 3669: \t\tcall writemess(.true.,'                   /  ^   ^ \\ ')\n 3670: \t\tcall writemess(.true.,'                 /   (@) (@) \\ ')\n 3671: \t\tcall writemess(.true.,'                 / |     ,    \\      _____________________')\n 3672: \t\tcall writemess(.true.,'                |  U   /~~~\\   |    ||                    |')\n 3673: \t\tcall writemess(.true.,'                 \\     `~~~    )    ||                    |')\n 3674: \t\tcall writemess(.true.,'                _ /           /     ||                    |')\n 3675: \t\tcall writemess(.true.,'               (  \\   (```)   \\     ||     ERROR          |  ')\n 3676: \t\tcall writemess(.true.,'               `  `,  /  -`    \\    ||                    |')\n 3677: \t\tcall writemess(.true.,'============ /|=\\   \"   /  __|  |===||                    |==')\n 3678: \t\tcall writemess(.true.,'            / |   \\___/  ______/    ||____________________|')\n 3679: \t\tcall writemess(.true.,' ________.,`   |                         __||_______|__')\n 3680: \t\tcall writemess(.true.,'|you have bugs! |_________________________________________')\n 3681: \t\tcall writemess(.true.,'|Report any bugs of the TNSP to sj.dong@outlook.com       |\t     ' )\n 3682: \t\tcall writemess(.true.,'`~-------------------------------------------------------~` ')\n 3683  \tend subroutine \n 3684  \tsubroutine outpicture3()\n 3685: \t   call writemess(.true.,'    ')\n 3686: \t\tcall writemess(.true.,'        ___                   \\  /')\n 3687: \t\tcall writemess(.true.,'       /     \\             ____\\/____')\n 3688: \t\tcall writemess(.true.,'      /        \\          /           \\')\n 3689: \t\tcall writemess(.true.,'     |::     |   |      /  ::\\::::/::: \\')\n 3690: \t\tcall writemess(.true.,'     |;;;;   U   |     /  < 0 >::< 0 > \\')\n 3691: \t\tcall writemess(.true.,'      |::;;;    |      |      (/\\)     )   ')\n 3692: \t\tcall writemess(.true.,'       |;;;;   ]        \\            _/   ')\n 3693: \t\tcall writemess(.true.,'        \\:::: )        |  |            \\ ')\n 3694: \t\tcall writemess(.true.,'        /     \\        | |     ME    | | . ')\n 3695: \t\tcall writemess(.true.,'_______/        \\_____,|,|,_________|_/__|\\_______________')\n 3696: \t\tcall writemess(.true.,'      |   YOU    \\                       | \\____________')\n 3697: \t\tcall writemess(.true.,'_________________________________________( you have bugs|')\n 3698: \t\tcall writemess(.true.,'|Report any bugs of the TNSP to sj.dong@outlook.com     |\t     ' )\n 3699: \t\tcall writemess(.true.,'`~-----------------------------------------------------~` ')\n 3700  \tend subroutine \n 3701  \tsubroutine outpicture4()\n 3702: \t   call writemess(.true.,'    ')\n 3703: \t\tcall writemess(.true.,'______     ')\n 3704: \t\tcall writemess(.true.,'___|__|         _________________________________  ')\n 3705: \t\tcall writemess(.true.,'_|____|         |you have bugs!!                 |  ')\n 3706: \t\tcall writemess(.true.,'___|__|--^\\   __|Report any bugs of the TNSP to  |')\n 3707: \t\tcall writemess(.true.,'_|____|w ` ) /_ | sj.dong@outlook.com !          |')\n 3708: \t\tcall writemess(.true.,'___|__|  C=]    |________________________________|')\n 3709: \t\tcall writemess(.true.,'_|____|=========')\n 3710: \t\tcall writemess(.true.,'___|____|____|__|')\n 3711: \t\tcall writemess(.true.,'_|____|____|____|')\n 3712: \t\tcall writemess(.true.,'___|____|____|__|')\n 3713  \tend subroutine \n 3714  \tsubroutine outpicture5()\n 3715: \t   call writemess(.true.,'    ')\n 3716: \t\tcall writemess(.true.,'     _     _')\n 3717: \t\tcall writemess(.true.,'  __| |___| |__        _________________________________')\n 3718: \t\tcall writemess(.true.,' |      _      |       |you have bugs!!                 |  ')\n 3719: \t\tcall writemess(.true.,' |  __/   \\__  |     __|Report any bugs of the TNSP to  |  ')\n 3720: \t\tcall writemess(.true.,' |   0     0  ||   /    sj.dong@outlook.com !           | ')\n 3721: \t\tcall writemess(.true.,' |            U|  /_____________________________________| ')\n 3722: \t\tcall writemess(.true.,' |     _|_     |')\n 3723: \t\tcall writemess(.true.,' |__        ___|')\n 3724: \t\tcall writemess(.true.,'     |     |')\n 3725: \t\tcall writemess(.true.,'     |     |____________')\n 3726: \t\tcall writemess(.true.,'     |                 |__')\n 3727: \t\tcall writemess(.true.,'     |                 |__}')\n 3728: \t\tcall writemess(.true.,'     |_________________|' )\n 3729: \t\tcall writemess(.true.,'       | | |       | | |')\n 3730: \t\tcall writemess(.true.,'       | | |       | | |')\n 3731  \tend subroutine \n 3732  \tsubroutine outpicture6()\n 3733: \t   call writemess(.true.,'       /^\\/^\\ ')\n 3734: \t\tcall writemess(.true.,'       ( -3-)')\n 3735: \t\tcall writemess(.true.,' =====O=======O=====================')\n 3736: \t\tcall writemess(.true.,' |you have bugs!!                  ||')\n 3737: \t\tcall writemess(.true.,' |Report ONLY bugs of the package  ||')\n 3738: \t\tcall writemess(.true.,' |to sj.dong@outlook.com !         ||')\n 3739: \t\tcall writemess(.true.,' ===================================')\n 3740: \t\tcall writemess(.true.,'    |  ||                  |  ||')\n 3741: \t\tcall writemess(.true.,'    |__||                  |__|| ')\n 3742  \tend subroutine \n 3743  \tsubroutine outpicture7()\n 3744: \t   call writemess(.true.,'    ')\n 3745: \t\tcall writemess(.true.,' _________________________________________________________')\n 3746: \t\tcall writemess(.true.,' |you have bugs!!                                         |')\n 3747: \t\tcall writemess(.true.,' |Report any bugs of the TNSP to sj.dong@outlook.com     !|')\n 3748: \t\tcall writemess(.true.,' |  ------------------------------------------------------|')\n 3749: \t\tcall writemess(.true.,' | /')\n 3750: \t\tcall writemess(.true.,' |/__________')\n 3751: \t\tcall writemess(.true.,'   /          \\        ')\n 3752: \t\tcall writemess(.true.,'  /        X X')\n 3753: \t\tcall writemess(.true.,' | Y Y          \\')\n 3754: \t\tcall writemess(.true.,' | | |        oo |')\n 3755: \t\tcall writemess(.true.,' | \\_/       _/\\_)')\n 3756: \t\tcall writemess(.true.,' |          ___/ ')\n 3757: \t\tcall writemess(.true.,'  \\       / ' )\n 3758: \t\tcall writemess(.true.,'   |  |  |')\n 3759: \t\tcall writemess(.true.,'  (___)__)')\n 3760  \tend subroutine \n 3761  \tsubroutine outpicture8()\n 3762: \t   call writemess(.true.,'    ')\n 3763: \t\tcall writemess(.true.,' ')\n 3764: \t\tcall writemess(.true.,'      __ ')\n 3765: \t\tcall writemess(.true.,'     #####                    ### ')\n 3766: \t\tcall writemess(.true.,'    #########___---------____##### ')\n 3767: \t\tcall writemess(.true.,'    ########                 ##### ')\n 3768: \t\tcall writemess(.true.,'     ######                   ### ')\n 3769: \t\tcall writemess(.true.,'      ####                     ## ')\n 3770: \t\tcall writemess(.true.,'       ##                       \\   ')\n 3771: \t\tcall writemess(.true.,'       /        ##       ##      |  ')\n 3772: \t\tcall writemess(.true.,'       |       #0#       #0#      | ')\n 3773: \t\tcall writemess(.true.,'       |      ###         ###     | ')\n 3774: \t\tcall writemess(.true.,'       |      #            ##     | ')\n 3775: \t\tcall writemess(.true.,'       |             ####         | ')\n 3776: \t\tcall writemess(.true.,'      /\\         \\    ##   /     / ')\n 3777: \t\tcall writemess(.true.,'     /  \\         \\_______/     / ')\n 3778: \t\tcall writemess(.true.,'    ###  \\              \\\\     ## ')\n 3779: \t\tcall writemess(.true.,'   ######################\\\\######## ')\n 3780: \t\tcall writemess(.true.,' ############/|###########\\\\######## ')\n 3781: \t\tcall writemess(.true.,'            / |            \\\\ ')\n 3782: \t\tcall writemess(.true.,' ________.,`   |  ')\n 3783: \t\tcall writemess(.true.,'|you have bugs! |_________________________________________')\n 3784: \t\tcall writemess(.true.,'|Report any bugs of the TNSP to sj.dong@outlook.com       | ' )\n 3785: \t\tcall writemess(.true.,'`~-------------------------------------------------------~` ')\n 3786  \tend subroutine \n 3787  \tsubroutine outpicture9()\n 3788: \t   call writemess(' ')\n 3789: \t\tcall writemess('                      ________ ')\n 3790: \t\tcall writemess('                    _/__|__|__\\_ ')\n 3791: \t\tcall writemess('                   /     _      \\ ')\n 3792: \t\tcall writemess('                  /_   _(_)_   __\\ ')\n 3793: \t\tcall writemess('                 ||_| |____o| |_|_| ')\n 3794: \t\tcall writemess('             ____|================|___ ')\n 3795: \t\tcall writemess('            |    |   __________   |   \\ ')\n 3796: \t\tcall writemess('            |    |  | WARNING! |  |    \\ ')\n 3797: \t\tcall writemess('            |   ||  | you      |  |\\    \\ ')\n 3798: \t\tcall writemess('            |   ||  |  have    |  | \\    \\ ')\n 3799: \t\tcall writemess('            |   ||  |    bugs  |  |  \\    \\ ')\n 3800: \t\tcall writemess('            |   ||  |__________|  |   \\    \\ ')\n 3801: \t\tcall writemess('            |   ||                |    \\____\\ ')\n 3802: \t\tcall writemess('            |   ||________________|      | \\ ')\n 3803: \t\tcall writemess('            |___|      \\     /           |  \\ ')\n 3804: \t\tcall writemess('             / \\        \\___/            |___\\ ')\n 3805: \t\tcall writemess('            /   \\       /   \\ ')\n 3806: \t\tcall writemess('           /_____\\     /_____\\ ')\n 3807: \t\tcall writemess('_____________________________________________________________ ')\n 3808: \t\tcall writemess('|Report any bugs of the TNSP to sj.dong@outlook.com          |')\n 3809: \t\tcall writemess('`~----------------------------------------------------------~`')\n 3810  \tend subroutine \n 3811  \tsubroutine outpicture10()\n 3812: \t   call writemess(' ')\n 3813: \t\tcall writemess('                    |_| ')\n 3814: \t\tcall writemess('                  _P   P_ ')\n 3815: \t\tcall writemess('           \\___  /  \\|/  \\  ___/ ')\n 3816: \t\tcall writemess('               \\/    |    \\/ ')\n 3817: \t\tcall writemess('                |  0 |   0| ')\n 3818: \t\tcall writemess('             __/| 000|  00|\\__ ')\n 3819: \t\tcall writemess('            /   \\  00|    /   \\ ')\n 3820: \t\tcall writemess('              __/\\___|___/\\__ ')\n 3821: \t\tcall writemess('             /               \\ ')\n 3822: \t\tcall writemess(' _______________ ')\n 3823: \t\tcall writemess('|you have bugs! |____________________________________________ ')\n 3824: \t\tcall writemess('|Report any bugs of the TNSP to sj.dong@outlook.com          |')\n 3825: \t\tcall writemess('`~----------------------------------------------------------~`')\n 3826  \tend subroutine \n 3827  \n ....\n 3953  \t\tinitial_randomseed=randomseed\n 3954  \t\tif(MPI_running)then\n 3955: \t\t\tcall writemess(' ERROR in set_seed, can not run the MPI')\n 3956  \t\t\tcall error_stop\n 3957  \t\tend if\n ....\n 3989  \t\tgoon=.true.\n 3990  \t\tif(N.lt.0)then\n 3991: \t\t\tcall writemess(\"ERROR in IndesToaddressRoutine\")\n 3992  \t\t\tcall error_stop()\n 3993  \t\tend if\n ....\n 4038  \t\t\t\tRes=num\n 4039  \t\t\tclass default\n 4040: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4041  \t\t\t\tcall error_stop\n 4042  \t\tend select\n ....\n 4057  \t\t\t\tRes=num\n 4058  \t\t\tclass default\n 4059: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4060  \t\t\t\tcall error_stop\n 4061  \t\tend select\n ....\n 4076  \t\t\t\tRes=num\n 4077  \t\t\tclass default\n 4078: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4079  \t\t\t\tcall error_stop\n 4080  \t\tend select\n ....\n 4095  \t\t\t\tRes=num\n 4096  \t\t\tclass default\n 4097: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4098  \t\t\t\tcall error_stop\n 4099  \t\tend select\n ....\n 4114  \t\t\t\tRes=num\n 4115  \t\t\tclass default\n 4116: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4117  \t\t\t\tcall error_stop\n 4118  \t\tend select\n ....\n 4187  \t\tcharacter(len=*),intent(in),optional::w\n 4188  \t\tif(mem%flag)then\n 4189: \t\t\tcall writemess('some subroutine are using the memory ')\n 4190  \t\t\tif(present(w))then\n 4191: \t\t\t\tcall writemess('The info of the error is ')\n 4192: \t\t\t\tcall writemess(w)\n 4193  \t\t\tend if\n 4194  \t\t\tcall error_stop()\n ....\n 4254  \t\t\t\t\t\tmem%iLength=length\n 4255  \t\t\t\t\telse\n 4256: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4257  \t\t\t\t\t\tif(present(w))then\n 4258: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4259: \t\t\t\t\t\t\tcall writemess(w)\n 4260  \t\t\t\t\t\tend if\n 4261  \t\t\t\t\t\tcall error_stop()\n ....\n 4269  \t\t\t\t\t\tmem%sLength=length\n 4270  \t\t\t\t\telse\n 4271: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4272  \t\t\t\t\t\tif(present(w))then\n 4273: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4274: \t\t\t\t\t\t\tcall writemess(w)\n 4275  \t\t\t\t\t\tend if\n 4276  \t\t\t\t\t\tcall error_stop()\n ....\n 4284  \t\t\t\t\t\tmem%dLength=length\n 4285  \t\t\t\t\telse\n 4286: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4287  \t\t\t\t\t\tif(present(w))then\n 4288: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4289: \t\t\t\t\t\t\tcall writemess(w)\n 4290  \t\t\t\t\t\tend if\n 4291  \t\t\t\t\t\tcall error_stop()\n ....\n 4299  \t\t\t\t\t\tmem%cLength=length\n 4300  \t\t\t\t\telse\n 4301: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4302  \t\t\t\t\t\tif(present(w))then\n 4303: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4304: \t\t\t\t\t\t\tcall writemess(w)\n 4305  \t\t\t\t\t\tend if\n 4306  \t\t\t\t\t\tcall error_stop()\n ....\n 4314  \t\t\t\t\t\tmem%zLength=length\n 4315  \t\t\t\t\telse\n 4316: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4317  \t\t\t\t\t\tif(present(w))then\n 4318: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4319: \t\t\t\t\t\t\tcall writemess(w)\n 4320  \t\t\t\t\t\tend if\n 4321  \t\t\t\t\t\tcall error_stop()\n ....\n 4329  \t\t\t\t\t\tmem%lLength=length\n 4330  \t\t\t\t\telse\n 4331: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4332  \t\t\t\t\t\tif(present(w))then\n 4333: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4334: \t\t\t\t\t\t\tcall writemess(w)\n 4335  \t\t\t\t\t\tend if\n 4336  \t\t\t\t\t\tcall error_stop()\n ....\n 4344  \t\t\t\t\t\tmem%aLength=length\n 4345  \t\t\t\t\telse\n 4346: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4347  \t\t\t\t\t\tif(present(w))then\n 4348: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4349: \t\t\t\t\t\t\tcall writemess(w)\n 4350  \t\t\t\t\t\tend if\n 4351  \t\t\t\t\t\tcall error_stop()\n ....\n 4367  \t\t\t\t\t\tmem%iLength=length\n 4368  \t\t\t\t\telse\n 4369: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4370  \t\t\t\t\t\tif(present(w))then\n 4371: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4372: \t\t\t\t\t\t\tcall writemess(w)\n 4373  \t\t\t\t\t\tend if\n 4374  \t\t\t\t\t\tcall error_stop()\n ....\n 4382  \t\t\t\t\t\tmem%sLength=length\n 4383  \t\t\t\t\telse\n 4384: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4385  \t\t\t\t\t\tif(present(w))then\n 4386: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4387: \t\t\t\t\t\t\tcall writemess(w)\n 4388  \t\t\t\t\t\tend if\n 4389  \t\t\t\t\t\tcall error_stop()\n ....\n 4397  \t\t\t\t\t\tmem%dLength=length\n 4398  \t\t\t\t\telse\n 4399: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4400  \t\t\t\t\t\tif(present(w))then\n 4401: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4402: \t\t\t\t\t\t\tcall writemess(w)\n 4403  \t\t\t\t\t\tend if\n 4404  \t\t\t\t\t\tcall error_stop()\n ....\n 4412  \t\t\t\t\t\tmem%cLength=length\n 4413  \t\t\t\t\telse\n 4414: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4415  \t\t\t\t\t\tif(present(w))then\n 4416: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4417: \t\t\t\t\t\t\tcall writemess(w)\n 4418  \t\t\t\t\t\tend if\n 4419  \t\t\t\t\t\tcall error_stop()\n ....\n 4427  \t\t\t\t\t\tmem%zLength=length\n 4428  \t\t\t\t\telse\n 4429: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4430  \t\t\t\t\t\tif(present(w))then\n 4431: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4432: \t\t\t\t\t\t\tcall writemess(w)\n 4433  \t\t\t\t\t\tend if\n 4434  \t\t\t\t\t\tcall error_stop()\n ....\n 4442  \t\t\t\t\t\tmem%lLength=length\n 4443  \t\t\t\t\telse\n 4444: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4445  \t\t\t\t\t\tif(present(w))then\n 4446: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4447: \t\t\t\t\t\t\tcall writemess(w)\n 4448  \t\t\t\t\t\tend if\n 4449  \t\t\t\t\t\tcall error_stop()\n ....\n 4457  \t\t\t\t\t\tmem%aLength=length\n 4458  \t\t\t\t\telse\n 4459: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4460  \t\t\t\t\t\tif(present(w))then\n 4461: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4462: \t\t\t\t\t\t\tcall writemess(w)\n 4463  \t\t\t\t\t\tend if\n 4464  \t\t\t\t\t\tcall error_stop()\n ....\n 4466  \t\t\t\tend if\n 4467  \t\t\tcase default\n 4468: \t\t\t\tcall writemess('ERRO input type in allocate memory')\n 4469  \t\t\t\tcall error_stop\n 4470  \t\tend select\n ....\n 4485  \t\t\t\tcall mem%allocate(1,ith,w)\n 4486  \t\t\telse\n 4487: \t\t\t\tcall writemess('maximum memory limit reach')\n 4488: \t\t\t\tcall writemess('memory for integer is length='+mem%iLength)\n 4489  \t\t\t\tcall error_stop\n 4490  \t\t\tend if\n ....\n 4507  \t\t\t\tcall mem%allocate(1,ith,w)\n 4508  \t\t\telse\n 4509: \t\t\t\tcall writemess('maximum memory limit reach')\n 4510: \t\t\t\tcall writemess('memory for integer is length='+mem%iLength)\n 4511  \t\t\t\tcall error_stop\n 4512  \t\t\tend if\n ....\n 4528  \t\t\t\tcall mem%allocate(2,ith,w)\n 4529  \t\t\telse\n 4530: \t\t\t\tcall writemess('maximum memory limit reach')\n 4531: \t\t\t\tcall writemess('memory for real*4 is length='+mem%sLength)\n 4532  \t\t\t\tcall error_stop\n 4533  \t\t\tend if\n ....\n 4550  \t\t\t\tcall mem%allocate(2,ith,w)\n 4551  \t\t\telse\n 4552: \t\t\t\tcall writemess('maximum memory limit reach')\n 4553: \t\t\t\tcall writemess('memory for real*4 is length='+mem%sLength)\n 4554  \t\t\t\tcall error_stop\n 4555  \t\t\tend if\n ....\n 4571  \t\t\t\tcall mem%allocate(3,ith,w)\n 4572  \t\t\telse\n 4573: \t\t\t\tcall writemess('maximum memory limit reach')\n 4574: \t\t\t\tcall writemess('memory for real*8 is length='+mem%dLength)\n 4575  \t\t\t\tcall error_stop\n 4576  \t\t\tend if\n ....\n 4593  \t\t\t\tcall mem%allocate(3,ith,w)\n 4594  \t\t\telse\n 4595: \t\t\t\tcall writemess('maximum memory limit reach')\n 4596: \t\t\t\tcall writemess('memory for real*8 is length='+mem%dLength)\n 4597  \t\t\t\tcall error_stop\n 4598  \t\t\tend if\n ....\n 4614  \t\t\t\tcall mem%allocate(4,ith,w)\n 4615  \t\t\telse\n 4616: \t\t\t\tcall writemess('maximum memory limit reach')\n 4617: \t\t\t\tcall writemess('memory for complex*8 is length='+mem%cLength)\n 4618  \t\t\t\tcall error_stop\n 4619  \t\t\tend if\n ....\n 4636  \t\t\t\tcall mem%allocate(4,ith,w)\n 4637  \t\t\telse\n 4638: \t\t\t\tcall writemess('maximum memory limit reach')\n 4639: \t\t\t\tcall writemess('memory for complex*8 is length='+mem%cLength)\n 4640  \t\t\t\tcall error_stop\n 4641  \t\t\tend if\n ....\n 4657  \t\t\t\tcall mem%allocate(5,ith,w)\n 4658  \t\t\telse\n 4659: \t\t\t\tcall writemess('maximum memory limit reach')\n 4660: \t\t\t\tcall writemess('memory for complex*16 is length='+mem%zLength)\n 4661  \t\t\t\tcall error_stop\n 4662  \t\t\tend if\n ....\n 4679  \t\t\t\tcall mem%allocate(5,ith,w)\n 4680  \t\t\telse\n 4681: \t\t\t\tcall writemess('maximum memory limit reach')\n 4682: \t\t\t\tcall writemess('memory for complex*16 is length='+mem%zLength)\n 4683  \t\t\t\tcall error_stop\n 4684  \t\t\tend if\n ....\n 4700  \t\t\t\tcall mem%allocate(6,ith,w)\n 4701  \t\t\telse\n 4702: \t\t\t\tcall writemess('maximum memory limit reach')\n 4703: \t\t\t\tcall writemess('memory for logical is length='+mem%lLength)\n 4704  \t\t\t\tcall error_stop\n 4705  \t\t\tend if\n ....\n 4721  \t\t\t\tcall mem%allocate(7,ith,w)\n 4722  \t\t\telse\n 4723: \t\t\t\tcall writemess('maximum memory limit reach')\n 4724: \t\t\t\tcall writemess('memory for logical is length='+mem%aLength)\n 4725  \t\t\t\tcall error_stop\n 4726  \t\t\tend if\n ....\n 4749  \t\tclass(memory),intent(inout)::mem\n 4750  \t\tif(mem%Flag)then\n 4751: \t\t\tcall writemess('Can not deallocate memory, there are some subroutine using the memory')\n 4752  \t\t\tcall error_stop\n 4753  \t\tendif\n ....\n 4779  \tsubroutine print_info(mem)\n 4780  \t\tclass(memory),intent(inout)::mem\n 4781: \t\tcall writemess('The length of the memory are')\n 4782: \t\tcall writemess('integer         :'+mem%iLength)\n 4783: \t\tcall writemess('real(kind=4)    :'+mem%sLength)\n 4784: \t\tcall writemess('real(kind=8)    :'+mem%dLength)\n 4785: \t\tcall writemess('complex(kind=4) :'+mem%cLength)\n 4786: \t\tcall writemess('complex(kind=8) :'+mem%zLength)\n 4787: \t\tcall writemess('logical         :'+mem%lLength)\n 4788: \t\tcall writemess('character       :'+mem%aLength)\n 4789  \t\treturn\n 4790  \tend subroutine\n ....\n 4793  \t\tinteger,intent(inout)::inoutlen(:)\n 4794  \t\tif(size(inoutlen).lt.7)then\n 4795: \t\t\tcall writemess('ERROR in get length of the memory')\n 4796  \t\t\tcall error_stop\n 4797  \t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/update.log:\n  534  2017.6.10\n  535    \n  536:     call writemess(mess,form):\n  537      \n  538           if form='-', there is NO enter and the output will clean the present line and write the mess. that means it will over write the present line\n  ...\n  549  \t\tcharacter(len=20)::cha\n  550  \t\tcall set_output_log_address('log')\n  551: \t\tcall writemess('aaaaaaaaaaaaaaaa','-')\n  552  \t\tcall sleep(1)\n  553: \t\tcall writemess('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb','-')\n  554  \t\tcall sleep(1)\n  555: \t\tcall writemess('1')\n  556: \t\tcall writemess('2')\n  557: \t\tcall writemess('ccccc','-')\n  558  \t\tcall sleep(1)\n  559  \t\tcha='ddddddd'\n  560: \t\tcall writemess(cha,'-')\n  561  \t\tcall sleep(1)\n  562: \t\tcall writemess('tessssssssssssssssssssssssssssssssssssssst5','+')\n  563: \t\tcall writemess('3')\n  564: \t\tcall writemess('4','(a10)')\n  565           \n  566  2017.7.22\n  ...\n  919  2018.6.10\n  920  \n  921:      1.support new typt of call writemess(num)\n  922          num can be\n  923                1.integer\n  ...\n  935               13.Tensor\n  936       They will output as the default form, that is write(uni,*) num\n  937:      And call writemess(Tensor), will make used of this subroutine\n  938  \n  939:      2.support new typt of call writemess(num,form)\n  940          num can be\n  941                1.integer\n\n/Users/chaowang/Desktop/program/pack/source/tnsp-extension/source/tensor_tools.f90:\n  396  \t\n  397  \tif(test_not_empty(inTensor,mpi_comm)==0)then\t! if the Tensor is empty\n  398: \t\tcall writemess('ERROR in ALLREDUCE_Tensor,the is no date in one or some Tensors')\n  399  \t\tcall error_stop\n  400  \tend if\n  401  \t\n  402  \tif(test_same_type(inTensor,mpi_comm)==0)then\t! if the Tensor is the same data type\n  403: \t\tcall writemess('ERROR in ALLREDUCE_Tensor,the Data type in the Tensors are not the sames')\n  404  \t\tcall error_stop\n  405  \tend if\n  406  \n  407  \tif(test_same_length(inTensor,mpi_comm)==0)then\t! if the length of the Tensor is the same\n  408: \t\tcall writemess('ERROR in ALLREDUCE_Tensor,the length od the Tensor is not the same')\n  409  \t\tcall error_stop\n  410  \tend if\n  ...\n  510  \tcall mpi_comm_size(mpi_comm,proNum,ierr )\n  511  \tif(root>=proNum .or. root<0)then\n  512: \t\tcall writemess('ERROR in REDUCE_Tensor,input root is illegal')\n  513  \t\tcall error_stop\n  514  \tend if\n  515  \t\n  516  \tif(test_not_empty(inTensor,mpi_comm)==0)then\t! if the Tensor is empty\n  517: \t\tcall writemess('ERROR in REDUCE_Tensor,the is no date in one or some Tensors')\n  518  \t\tcall error_stop\n  519  \tend if\n  520  \t\n  521  \tif(test_same_type(inTensor,mpi_comm)==0)then\t! if the Tensor is the same data type\n  522: \t\tcall writemess('ERROR in REDUCE_Tensor,the Data type in the Tensors are not the sames')\n  523  \t\tcall error_stop\n  524  \tend if\n  525  \n  526  \tif(test_same_length(inTensor,mpi_comm)==0)then\t! if the length of the Tensor is the same\n  527: \t\tcall writemess('ERROR in REDUCE_Tensor,the length od the Tensor is not the same')\n  528  \t\tcall error_stop\n  529  \tend if\n\n1945 matches across 11 files\n\n\nSearching 93 files for \"writemess\"\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Dimension.f90:\n  352  !\n  353  !**********************************************************\t\n  354: \tpublic::writemess\n  355: \tinterface writemess\n  356: \t\tmodule procedure writemess_dimension\n  357  \tend interface\n  358  \t\n  ...\n  368  \t\n  369  \tsubroutine Dimension_memory_report()\n  370: \t\tcall writemess('The memory used in Dimension are:')\n  371  \t\tcall WorkingMemory%print()\n  372: \t\tcall writemess(' ')\n  373  \tend subroutine\t\n  374  \tsubroutine Dimension_memory_length(length)\n  ...\n  377  \tend subroutine\t\n  378  \t\n  379: \tsubroutine writemess_dimension(Dimen,cpu_number)!overwrite writemess\n  380  \t\ttype(dimension),intent(in)::Dimen\n  381  \t\tinteger,optional,intent(in)::cpu_number\n  ...\n  387  \t\ttotoal=Dimen%LenDimData\n  388  \t\tif(totoal.eq.0)then\n  389: \t\t\tcall writemess('There is no data in the dimension',cpu_number)\n  390  \t\t\treturn\n  391  \t\tend if\n  ...\n  396  \t\t\tend do\n  397  \t\t\tw=w+Dimen%DimData(Dimen%LenDimData)+')'\n  398: \t\t\tcall writemess(w,cpu_number)\n  399  \t\telse\n  400  \t\t\tcall copydimension(dimenVec,Dimen)\n  ...\n  404  \t\t\tend do\n  405  \t\t\tw=w+dimenVec(size(dimenVec))+'),It is not original dimension'\n  406: \t\t\tcall writemess(w,cpu_number)\n  407  \t\t\tw='original dimension:('\n  408  \t\t\tdo i=1,Dimen%LenDimData-1\n  ...\n  410  \t\t\tend do\n  411  \t\t\tw=w+Dimen%DimData(Dimen%LenDimData)+')'\n  412: \t\t\tcall writemess(w,cpu_number)\n  413  \t\tend if\n  414  \t\tif(Dimen%nameflag.eq.1)then\n  ...\n  420  \t\t\tend do\n  421  \t\t\tw=w+'.'\n  422: \t\t\tcall writemess(w,cpu_number)\n  423  \t\tend if\n  424  \t\treturn\n  ...\n  977  \t\t\twrite(uni,*) \" \"\n  978  \t\telse\n  979: \t\t\tcall writemess(\"***   Dimension Data    ***\",-1)\n  980  \t\t\tif(Dimen%LenDimData.le.0)then\n  981: \t\t\t\tcall writemess( \"***   There is no data in Dimension    ***\",-1)\n  982  \t\t\t\treturn\n  983  \t\t\tend if\n  ...\n  987  \t\t\t\t\twords=words+(' ,'+(' '+Dimen%DimData(i)))\n  988  \t\t\t\tend do\n  989: \t\t\t\tcall writemess(words,-1)\n  990  \t\t\telse\n  991  \t\t\t\tcall copydimension(dimenVec,Dimen)\n  ...\n  994  \t\t\t\t\twords=words+(' ,'+(' '+dimenVec(i)))\n  995  \t\t\t\tend do\n  996: \t\t\t\tcall writemess(words,-1)\n  997: \t\t\t\tcall writemess(\"It is not original dimension \",-1)\n  998  \t\t\tend if\n  999: \t\t\tcall writemess( \"***   Dimension END   ***\",-1)\n 1000  \t\t\tif(Dimen%nameflag.eq.1)then\n 1001  \t\t\t\tallocate(w(Dimen%lenDimData))\n ....\n 1005  \t\t\t\t\twords=words+(' ,'+(' '+w(i)))\n 1006  \t\t\t\tend do\n 1007: \t\t\t\tcall writemess(\"index Name are\",-1)\n 1008: \t\t\t\tcall writemess(words,-1)\n 1009  \t\t\tend if\n 1010  \t\t\tif(Dimen%nameflag.eq.2)then\n ....\n 1145  \t\tend if\n 1146  \t\tif(nameflag.eq.2)then\n 1147: \t\t\t\tcall writemess(\"cannot read int name\",-1)\n 1148  \t\t\t\tcall error_stop()\n 1149  \t\tend if\n ....\n 1172  \t\tinteger,intent(in) :: DimData(:)\n 1173  \t\tif(size(DimData).ne.dimen%outlenDimData())then\n 1174: \t\t\tcall writemess(\"Can not reset the dimension in type(Dimension)\",-1)\n 1175  \t\t\tcall error_stop()\n 1176  \t\tend if\n ....\n 1252  \t\tif(Dimen%nameflag.eq.0)then\n 1253  \t\t\tif(dimen%lenDimData.eq.0)then\n 1254: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1255  \t\t\tend if\n 1256: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1257  \t\t\tcall error_stop()\n 1258  \t\tend if\n ....\n 1289  \t\tif(Dimen%nameflag.eq.0)then\n 1290  \t\t\tif(dimen%lenDimData.eq.0)then\n 1291: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1292  \t\t\tend if\n 1293: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1294  \t\t\tcall error_stop()\n 1295  \t\tend if\n ....\n 1316  \t\t\tend do\n 1317  \t\t\tif(check.eq.1)return\n 1318: \t\t\tcall writemess('Cannot find the name='+w+',dimension.f90',-1)\n 1319  \t\t\tcall Dprint(dimen)\n 1320  \t\t\tcall error_stop()\n ....\n 1333  \t\tif(Dimen%nameflag.eq.0)then\n 1334  \t\t\tif(dimen%lenDimData.eq.0)then\n 1335: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1336  \t\t\tend if\n 1337: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1338  \t\t\tcall error_stop()\n 1339  \t\tend if\n 1340  \t\tif(.not.if_original_dim(dimen))then\n 1341: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1342  \t\t\tcall error_stop()\n 1343  \t\tend if\n ....\n 1382  \t\tif(Dimen%nameflag.eq.0)then\n 1383  \t\t\tif(dimen%lenDimData.eq.0)then\n 1384: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1385  \t\t\tend if\n 1386: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1387  \t\t\tcall error_stop()\n 1388  \t\tend if\n 1389  \t\tif(.not.if_original_dim(dimen))then\n 1390: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1391  \t\t\tcall error_stop()\n 1392  \t\tend if\n ....\n 1426  \t\tif(Dimen%nameflag.eq.0)then\n 1427  \t\t\tif(dimen%lenDimData.eq.0)then\n 1428: \t\t\t\tcall writemess(\"There is no data in the dimension\",-1)\n 1429  \t\t\tend if\n 1430: \t\t\tcall writemess(\"There is no CHARACTER name in the dimension\",-1)\n 1431  \t\t\tcall error_stop()\n 1432  \t\tend if\n 1433  \t\tif(.not.if_original_dim(dimen))then\n 1434: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1435  \t\t\tcall error_stop()\n 1436  \t\tend if\n 1437  \t\tif(ith.gt.Dimen%lenDimData)then\n 1438: \t\t\tcall writemess(\"The index is larger than the size of the name\",-1)\n 1439  \t\t\twrite(*,*)ith,Dimen%lenDimData\n 1440  \t\t\tcall error_stop()\n ....\n 1444  \t\t\treturn\n 1445  \t\tend if\n 1446: \t\tcall writemess(\"ERROR of nameFlag\",-1)\n 1447  \t\tcall error_stop()\n 1448  \tend function\n ....\n 1462  \t\tinteger,intent(in)::ith\n 1463  \t\tif(Dimen%nameflag.ne.2)then\n 1464: \t\t\tcall writemess(\"There is no integer name in the dimension\",-1)\n 1465  \t\t\tcall error_stop()\n 1466  \t\tend if\n 1467  \t\tif(ith.gt.Dimen%LenDimData)then\n 1468: \t\t\tcall writemess(\"The index is larger than the size of the name\",-1)\n 1469  \t\t\twrite(*,*)ith,Dimen%LenDimData\n 1470  \t\t\tcall error_stop()\n 1471  \t\tend if\n 1472  \t\tif(.not.if_original_dim(dimen))then\n 1473: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1474  \t\t\tcall error_stop()\n 1475  \t\tend if\n ....\n 1482  \t\tinteger,intent(in)::ith\n 1483  \t\tif(Dimen%nameflag.ne.2)then\n 1484: \t\t\tcall writemess(\"There is no integer name in the dimension\",-1)\n 1485  \t\t\tcall error_stop()\n 1486  \t\tend if\n 1487  \t\tif(ith.gt.Dimen%LenDimData)then\n 1488: \t\t\tcall writemess(\"The index is larger than the size of the name\",-1)\n 1489  \t\t\twrite(*,*)ith,Dimen%LenDimData\n 1490  \t\t\tcall error_stop()\n 1491  \t\tend if\n 1492  \t\tif(.not.if_original_dim(dimen))then\n 1493: \t\t\tcall writemess(\"NameID is use in original dimension\",-1)\n 1494  \t\t\tcall error_stop()\n 1495  \t\tend if\n ....\n 1586  \t\ttype(DimensionName)::nam\n 1587  \t\tif(Dimen%nameflag.ne.1)then\n 1588: \t\t\tcall writemess(\"There is no character name in the dimension,Nameorder2\",-1)\n 1589: \t\t\tcall writemess('nameflag='+Dimen%nameflag,-1)\n 1590  \t\t\tcall error_stop()\n 1591  \t\tend if\n 1592  \t\tif(.not.long_Name_logi(w))then\n 1593: \t\t\tcall writemess('input error, one should input name written as A'+indexsymbol+'B')\n 1594  \t\t\tcall error_stop\n 1595  \t\tend if\n 1596  \t\tif(.not.if_original_dim(dimen))then\n 1597: \t\t\tcall writemess(\"Nameorder2 is use in original dimension\",-1)\n 1598  \t\t\tcall error_stop()\n 1599  \t\tend if\n ....\n 1619  \t\tend if\n 1620  \t\tif(.not.long_Name_logi(w))then\n 1621: \t\t\tcall writemess('input error, one should input name written as A'+indexsymbol+'B')\n 1622  \t\t\tcall error_stop\n 1623  \t\tend if\n ....\n 1633  \t\t\tend if\n 1634  \t\tend do\n 1635: \t\tcall writemess('Can Not Find the name:'+w)\n 1636  \t\tcall Dprint(dimen)\n 1637  \t\tcall error_stop\n ....\n 1677  \t\t\tend if\n 1678  \t\tend do\n 1679: \t\tcall writemess('Can Not Find the name:')\n 1680  \t\tcall dimen%print()\n 1681  \t\treturn\n ....\n 1724  \t\t\tend if\n 1725  \t\tend do\n 1726: \t\tcall writemess('Can Not Find the name:')\n 1727  \t\tcall dimen%print()\n 1728  \t\treturn\n ....\n 1771  \t\t\tend if\n 1772  \t\tend do\n 1773: \t\tcall writemess('Can Not Find the name:')\n 1774  \t\tcall dimen%print()\n 1775  \t\treturn\n ....\n 2717  \t\tl2=dimen2%LenDimData\n 2718  \t\tif(l1.eq.0)then\n 2719: \t\t\tcall writemess(' There is no Data in the first dimension when dim1 + dim2')\n 2720  \t\t\tcall error_stop\n 2721  \t\tend if\n 2722  \t\tif(l2.eq.0)then\n 2723: \t\t\tcall writemess(' There is no Data in the second dimension when dim1 + dim2')\n 2724  \t\t\tcall error_stop\n 2725  \t\tend if\n ....\n 2813  \t\tl2=size(Dimenvec)\n 2814  \t\tif(l1.eq.0)then\n 2815: \t\t\tcall writemess(' There is no Data in the first dimension when dim1 + vec(:)')\n 2816  \t\t\tcall error_stop\n 2817  \t\tend if\n 2818  \t\tif(l2.eq.0)then\n 2819: \t\t\tcall writemess(' There is no Data in the array when dim1 + vec(:)')\n 2820  \t\t\tcall error_stop\n 2821  \t\tend if\n ....\n 2881  \t\t\tdo j=i+1,rank\n 2882  \t\t\t\tif(na.equ.dimen%getName(j))then\n 2883: \t\t\t\t\tcall writemess('There are two legs with a same name',-1)\n 2884: \t\t\t\t\tcall writemess('The name in the dimension can not be the same',-1)\n 2885: \t\t\t\t\tcall writemess('The names are',-1)\n 2886: \t\t\t\t\tcall writemess(na)\n 2887: \t\t\t\t\tcall writemess(dimen%getName(j))\n 2888  \t\t\t\t\tcall dimen%print()\n 2889  \t\t\t\t\topen(unit=1234,file='_ERROR_DIMENSION'+output_ProID+'.err',status='replace')\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/modify_in_TData.f90:\n  957  \t\tinteger,intent(inout)::Tdata(LenT)\n  958  \t\tlogical,intent(in)::value\n  959: \t\tcall writemess('ERROR type when setting, integer=logical ')\n  960  \t\tcall error_stop\n  961  \tend subroutine\n  ...\n  965  \t\tinteger,intent(inout)::Tdata(LenT)\n  966  \t\tcharacter(len=*),intent(in)::value\n  967: \t\tcall writemess('ERROR type when setting, integer=character ')\n  968  \t\tcall error_stop\n  969  \tend subroutine\n  ...\n 1013  \t\tinteger,intent(inout)::Tdata(LenT)\n 1014  \t\tlogical,intent(in)::value(LenV)\n 1015: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1016  \t\tcall error_stop\n 1017  \t\treturn\n ....\n 1022  \t\tinteger,intent(inout)::Tdata(LenT)\n 1023  \t\tcharacter(len=*),intent(in)::value(LenV)\n 1024: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1025  \t\tcall error_stop\n 1026  \t\treturn\n ....\n 1071  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1072  \t\tlogical,intent(in)::value\n 1073: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1074  \t\tcall error_stop\n 1075  \tend subroutine\n ....\n 1079  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1080  \t\tcharacter(len=*),intent(in)::value\n 1081: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1082  \t\tcall error_stop\n 1083  \tend subroutine\n ....\n 1127  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1128  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 1129: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1130  \t\tcall error_stop\n 1131  \t\treturn\n ....\n 1136  \t\tinteger,intent(inout)::Tdata(LD1,LD2)\n 1137  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 1138: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1139  \t\tcall error_stop\n 1140  \t\treturn\n ....\n 1185  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1186  \t\tlogical,intent(in)::value\n 1187: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1188  \t\tcall error_stop\n 1189  \tend subroutine\n ....\n 1193  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1194  \t\tcharacter(len=*),intent(in)::value\n 1195: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1196  \t\tcall error_stop\n 1197  \tend subroutine\n ....\n 1241  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1242  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 1243: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1244  \t\tcall error_stop\n 1245  \tend subroutine\n ....\n 1249  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3)\n 1250  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 1251: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1252  \t\tcall error_stop\n 1253  \t\treturn\n ....\n 1298  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1299  \t\tlogical,intent(in)::value\n 1300: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1301  \t\tcall error_stop\n 1302  \tend subroutine\n ....\n 1306  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1307  \t\tcharacter(len=*),intent(in)::value\n 1308: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1309  \t\tcall error_stop\n 1310  \tend subroutine\n ....\n 1354  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1355  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1356: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 1357  \t\tcall error_stop\n 1358  \tend subroutine\n ....\n 1362  \t\tinteger,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1363  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1364: \t\tcall writemess('ERROR type when setting, integer=character ')\n 1365  \t\tcall error_stop\n 1366  \tend subroutine\n ....\n 1414  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1415  \t\tlogical,intent(in)::value\n 1416: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1417  \t\tcall error_stop\n 1418  \tend subroutine\n ....\n 1422  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1423  \t\tcharacter(len=*),intent(in)::value\n 1424: \t\tcall writemess('ERROR type when setting, real=character ')\n 1425  \t\tcall error_stop\n 1426  \tend subroutine\n ....\n 1470  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1471  \t\tlogical,intent(in)::value(LenV)\n 1472: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1473  \t\tcall error_stop\n 1474  \tend subroutine\n ....\n 1478  \t\treal(kind=4),intent(inout)::Tdata(LenT)\n 1479  \t\tcharacter(len=*),intent(in)::value(LenV)\n 1480: \t\tcall writemess('ERROR type when setting, real=character ')\n 1481  \t\tcall error_stop\n 1482  \tend subroutine\n ....\n 1526  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1527  \t\tlogical,intent(in)::value\n 1528: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1529  \t\tcall error_stop\n 1530  \tend subroutine\n ....\n 1534  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1535  \t\tcharacter(len=*),intent(in)::value\n 1536: \t\tcall writemess('ERROR type when setting, real=character ')\n 1537  \t\tcall error_stop\n 1538  \tend subroutine\n ....\n 1582  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1583  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 1584: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1585  \t\tcall error_stop\n 1586  \tend subroutine\n ....\n 1590  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2)\n 1591  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 1592: \t\tcall writemess('ERROR type when setting, real=character ')\n 1593  \t\tcall error_stop\n 1594  \tend subroutine\n ....\n 1638  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1639  \t\tlogical,intent(in)::value\n 1640: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1641  \t\tcall error_stop\n 1642  \tend subroutine\n ....\n 1646  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1647  \t\tcharacter(len=*),intent(in)::value\n 1648: \t\tcall writemess('ERROR type when setting, real=character ')\n 1649  \t\tcall error_stop\n 1650  \tend subroutine\n ....\n 1694  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1695  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 1696: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1697  \t\tcall error_stop\n 1698  \tend subroutine\n ....\n 1702  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 1703  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 1704: \t\tcall writemess('ERROR type when setting, real=character ')\n 1705  \t\tcall error_stop\n 1706  \tend subroutine\n ....\n 1750  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1751  \t\tlogical,intent(in)::value\n 1752: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1753  \t\tcall error_stop\n 1754  \tend subroutine\n ....\n 1758  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1759  \t\tcharacter(len=*),intent(in)::value\n 1760: \t\tcall writemess('ERROR type when setting, real=character ')\n 1761  \t\tcall error_stop\n 1762  \tend subroutine\n ....\n 1806  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1807  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1808: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1809  \t\tcall error_stop\n 1810  \t\treturn\n ....\n 1815  \t\treal(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 1816  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 1817: \t\tcall writemess('ERROR type when setting, real=character ')\n 1818  \t\tcall error_stop\n 1819  \t\treturn\n ....\n 1867  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1868  \t\tlogical,intent(in)::value\n 1869: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1870  \t\tcall error_stop\n 1871  \tend subroutine\n ....\n 1875  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1876  \t\tcharacter(len=*),intent(in)::value\n 1877: \t\tcall writemess('ERROR type when setting, real=character ')\n 1878  \t\tcall error_stop\n 1879  \tend subroutine\n ....\n 1923  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1924  \t\tlogical,intent(in)::value(LenV)\n 1925: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1926  \t\tcall error_stop\n 1927  \tend subroutine\n ....\n 1931  \t\treal(kind=8),intent(inout)::Tdata(LenT)\n 1932  \t\tcharacter(len=*),intent(in)::value(LenV)\n 1933: \t\tcall writemess('ERROR type when setting, real=character ')\n 1934  \t\tcall error_stop\n 1935  \tend subroutine\n ....\n 1979  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 1980  \t\tlogical,intent(in)::value\n 1981: \t\tcall writemess('ERROR type when setting, real=logical ')\n 1982  \t\tcall error_stop\n 1983  \tend subroutine\n ....\n 1987  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 1988  \t\tcharacter(len=*),intent(in)::value\n 1989: \t\tcall writemess('ERROR type when setting, real=character ')\n 1990  \t\tcall error_stop\n 1991  \tend subroutine\n ....\n 2035  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2036  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 2037: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2038  \t\tcall error_stop\n 2039  \tend subroutine\n ....\n 2043  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2044  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 2045: \t\tcall writemess('ERROR type when setting, real=character ')\n 2046  \t\tcall error_stop\n 2047  \tend subroutine\n ....\n 2091  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2092  \t\tlogical,intent(in)::value\n 2093: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2094  \t\tcall error_stop\n 2095  \tend subroutine\n ....\n 2099  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2100  \t\tcharacter(len=*),intent(in)::value\n 2101: \t\tcall writemess('ERROR type when setting, real=character ')\n 2102  \t\tcall error_stop\n 2103  \tend subroutine\n ....\n 2147  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2148  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 2149: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2150  \t\tcall error_stop\n 2151  \tend subroutine\n ....\n 2155  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2156  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 2157: \t\tcall writemess('ERROR type when setting, real=character ')\n 2158  \t\tcall error_stop\n 2159  \tend subroutine\n ....\n 2203  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2204  \t\tlogical,intent(in)::value\n 2205: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2206  \t\tcall error_stop\n 2207  \tend subroutine\n ....\n 2211  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2212  \t\tcharacter(len=*),intent(in)::value\n 2213: \t\tcall writemess('ERROR type when setting, real=character ')\n 2214  \t\tcall error_stop\n 2215  \tend subroutine\n ....\n 2259  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2260  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2261: \t\tcall writemess('ERROR type when setting, real=logical ')\n 2262  \t\tcall error_stop\n 2263  \t\treturn\n ....\n 2268  \t\treal(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2269  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2270: \t\tcall writemess('ERROR type when setting, real=character ')\n 2271  \t\tcall error_stop\n 2272  \t\treturn\n ....\n 2320  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2321  \t\tlogical,intent(in)::value\n 2322: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2323  \t\tcall error_stop\n 2324  \tend subroutine\n ....\n 2328  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2329  \t\tcharacter(len=*),intent(in)::value\n 2330: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2331  \t\tcall error_stop\n 2332  \tend subroutine\n ....\n 2376  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2377  \t\tlogical,intent(in)::value(LenV)\n 2378: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2379  \t\tcall error_stop\n 2380  \tend subroutine\n ....\n 2384  \t\tcomplex(kind=4),intent(inout)::Tdata(LenT)\n 2385  \t\tcharacter(len=*),intent(in)::value(LenV)\n 2386: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2387  \t\tcall error_stop\n 2388  \tend subroutine\n ....\n 2432  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2433  \t\tlogical,intent(in)::value\n 2434: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2435  \t\tcall error_stop\n 2436  \tend subroutine\n ....\n 2440  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2441  \t\tcharacter(len=*),intent(in)::value\n 2442: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2443  \t\tcall error_stop\n 2444  \tend subroutine\n ....\n 2488  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2489  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 2490: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2491  \t\tcall error_stop\n 2492  \tend subroutine\n ....\n 2496  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2)\n 2497  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 2498: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2499  \t\tcall error_stop\n 2500  \tend subroutine\n ....\n 2544  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2545  \t\tlogical,intent(in)::value\n 2546: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2547  \t\tcall error_stop\n 2548  \tend subroutine\n ....\n 2552  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2553  \t\tcharacter(len=*),intent(in)::value\n 2554: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2555  \t\tcall error_stop\n 2556  \tend subroutine\n ....\n 2600  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2601  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 2602: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2603  \t\tcall error_stop\n 2604  \tend subroutine\n ....\n 2608  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3)\n 2609  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 2610: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2611  \t\tcall error_stop\n 2612  \tend subroutine\n ....\n 2656  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2657  \t\tlogical,intent(in)::value\n 2658: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2659  \t\tcall error_stop\n 2660  \tend subroutine\n ....\n 2664  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2665  \t\tcharacter(len=*),intent(in)::value\n 2666: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2667  \t\tcall error_stop\n 2668  \tend subroutine\n ....\n 2712  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2713  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2714: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2715  \t\tcall error_stop\n 2716  \t\treturn\n ....\n 2721  \t\tcomplex(kind=4),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 2722  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 2723: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2724  \t\tcall error_stop\n 2725  \t\treturn\n ....\n 2773  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2774  \t\tlogical,intent(in)::value\n 2775: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2776  \t\tcall error_stop\n 2777  \tend subroutine\n ....\n 2781  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2782  \t\tcharacter(len=*),intent(in)::value\n 2783: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2784  \t\tcall error_stop\n 2785  \tend subroutine\n ....\n 2829  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2830  \t\tlogical,intent(in)::value(LenV)\n 2831: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2832  \t\tcall error_stop\n 2833  \tend subroutine\n ....\n 2837  \t\tcomplex(kind=8),intent(inout)::Tdata(LenT)\n 2838  \t\tcharacter(len=*),intent(in)::value(LenV)\n 2839: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2840  \t\tcall error_stop\n 2841  \tend subroutine\n ....\n 2885  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2886  \t\tlogical,intent(in)::value\n 2887: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2888  \t\tcall error_stop\n 2889  \tend subroutine\n ....\n 2893  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2894  \t\tcharacter(len=*),intent(in)::value\n 2895: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2896  \t\tcall error_stop\n 2897  \tend subroutine\n ....\n 2941  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2942  \t\tlogical,intent(in)::value(LDV1,LDV2)\n 2943: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 2944  \t\tcall error_stop\n 2945  \tend subroutine\n ....\n 2949  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2)\n 2950  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 2951: \t\tcall writemess('ERROR type when setting, complex=character ')\n 2952  \t\tcall error_stop\n 2953  \tend subroutine\n ....\n 2997  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 2998  \t\tlogical,intent(in)::value\n 2999: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3000  \t\tcall error_stop\n 3001  \tend subroutine\n ....\n 3005  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 3006  \t\tcharacter(len=*),intent(in)::value\n 3007: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3008  \t\tcall error_stop\n 3009  \tend subroutine\n ....\n 3053  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 3054  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3)\n 3055: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3056  \t\tcall error_stop\n 3057  \tend subroutine\n ....\n 3061  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3)\n 3062  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 3063: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3064  \t\tcall error_stop\n 3065  \tend subroutine\n ....\n 3109  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3110  \t\tlogical,intent(in)::value\n 3111: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3112  \t\tcall error_stop\n 3113  \tend subroutine\n ....\n 3117  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3118  \t\tcharacter(len=*),intent(in)::value\n 3119: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3120  \t\tcall error_stop\n 3121  \tend subroutine\n ....\n 3165  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3166  \t\tlogical,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3167: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 3168  \t\tcall error_stop\n 3169  \t\treturn\n ....\n 3174  \t\tcomplex(kind=8),intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3175  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3176: \t\tcall writemess('ERROR type when setting, complex=character ')\n 3177  \t\tcall error_stop\n 3178  \t\treturn\n ....\n 3186  \t\tlogical,intent(inout)::Tdata(LenT)\n 3187  \t\tinteger,intent(in)::value\n 3188: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3189  \t\tcall error_stop\n 3190  \tend subroutine\n ....\n 3194  \t\tlogical,intent(inout)::Tdata(LenT)\n 3195  \t\treal(kind=4),intent(in)::value\n 3196: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3197  \t\tcall error_stop\n 3198  \tend subroutine\n ....\n 3202  \t\tlogical,intent(inout)::Tdata(LenT)\n 3203  \t\treal(kind=8),intent(in)::value\n 3204: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3205  \t\tcall error_stop\n 3206  \tend subroutine\n ....\n 3210  \t\tlogical,intent(inout)::Tdata(LenT)\n 3211  \t\tcomplex(kind=4),intent(in)::value\n 3212: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3213  \t\tcall error_stop\n 3214  \tend subroutine\n ....\n 3218  \t\tlogical,intent(inout)::Tdata(LenT)\n 3219  \t\tcomplex(kind=8),intent(in)::value\n 3220: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3221  \t\tcall error_stop\n 3222  \tend subroutine\n ....\n 3234  \t\tlogical,intent(inout)::Tdata(LenT)\n 3235  \t\tcharacter(len=*),intent(in)::value\n 3236: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3237  \t\tcall error_stop\n 3238  \tend subroutine\n ....\n 3242  \t\tlogical,intent(inout)::Tdata(LenT)\n 3243  \t\tinteger,intent(in)::value(LenV)\n 3244: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3245  \t\tcall error_stop\n 3246  \tend subroutine\n ....\n 3250  \t\tlogical,intent(inout)::Tdata(LenT)\n 3251  \t\treal(kind=4),intent(in)::value(LenV)\n 3252: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3253  \t\tcall error_stop\n 3254  \tend subroutine\n ....\n 3258  \t\tlogical,intent(inout)::Tdata(LenT)\n 3259  \t\treal(kind=8),intent(in)::value(LenV)\n 3260: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3261  \t\tcall error_stop\n 3262  \tend subroutine\n ....\n 3266  \t\tlogical,intent(inout)::Tdata(LenT)\n 3267  \t\tcomplex(kind=4),intent(in)::value(LenV)\n 3268: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3269  \t\tcall error_stop\n 3270  \tend subroutine\n ....\n 3274  \t\tlogical,intent(inout)::Tdata(LenT)\n 3275  \t\tcomplex(kind=8),intent(in)::value(LenV)\n 3276: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3277  \t\tcall error_stop\n 3278  \tend subroutine\n ....\n 3290  \t\tlogical,intent(inout)::Tdata(LenT)\n 3291  \t\tcharacter(len=*),intent(in)::value(LenV)\n 3292: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3293  \t\tcall error_stop\n 3294  \tend subroutine\n ....\n 3298  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3299  \t\tinteger,intent(in)::value\n 3300: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3301  \t\tcall error_stop\n 3302  \tend subroutine\n ....\n 3306  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3307  \t\treal(kind=4),intent(in)::value\n 3308: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3309  \t\tcall error_stop\n 3310  \tend subroutine\n ....\n 3314  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3315  \t\treal(kind=8),intent(in)::value\n 3316: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3317  \t\tcall error_stop\n 3318  \tend subroutine\n ....\n 3322  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3323  \t\tcomplex(kind=4),intent(in)::value\n 3324: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3325  \t\tcall error_stop\n 3326  \tend subroutine\n ....\n 3330  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3331  \t\tcomplex(kind=8),intent(in)::value\n 3332: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3333  \t\tcall error_stop\n 3334  \tend subroutine\n ....\n 3346  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3347  \t\tcharacter(len=*),intent(in)::value\n 3348: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3349  \t\tcall error_stop\n 3350  \tend subroutine\n ....\n 3354  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3355  \t\tinteger,intent(in)::value(LDV1,LDV2)\n 3356: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3357  \t\tcall error_stop\n 3358  \tend subroutine\n ....\n 3362  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3363  \t\treal(kind=4),intent(in)::value(LDV1,LDV2)\n 3364: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3365  \t\tcall error_stop\n 3366  \tend subroutine\n ....\n 3370  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3371  \t\treal(kind=8),intent(in)::value(LDV1,LDV2)\n 3372: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3373  \t\tcall error_stop\n 3374  \tend subroutine\n ....\n 3378  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3379  \t\tcomplex(kind=4),intent(in)::value(LDV1,LDV2)\n 3380: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3381  \t\tcall error_stop\n 3382  \tend subroutine\n ....\n 3386  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3387  \t\tcomplex(kind=8),intent(in)::value(LDV1,LDV2)\n 3388: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3389  \t\tcall error_stop\n 3390  \tend subroutine\n ....\n 3402  \t\tlogical,intent(inout)::Tdata(LD1,LD2)\n 3403  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2)\n 3404: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3405  \t\tcall error_stop\n 3406  \tend subroutine\n ....\n 3410  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3411  \t\tinteger,intent(in)::value\n 3412: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3413  \t\tcall error_stop\n 3414  \tend subroutine\n ....\n 3418  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3419  \t\treal(kind=4),intent(in)::value\n 3420: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3421  \t\tcall error_stop\n 3422  \tend subroutine\n ....\n 3426  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3427  \t\treal(kind=8),intent(in)::value\n 3428: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3429  \t\tcall error_stop\n 3430  \tend subroutine\n ....\n 3434  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3435  \t\tcomplex(kind=4),intent(in)::value\n 3436: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3437  \t\tcall error_stop\n 3438  \tend subroutine\n ....\n 3442  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3443  \t\tcomplex(kind=8),intent(in)::value\n 3444: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3445  \t\tcall error_stop\n 3446  \tend subroutine\n ....\n 3458  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3459  \t\tcharacter(len=*),intent(in)::value\n 3460: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3461  \t\tcall error_stop\n 3462  \tend subroutine\n ....\n 3466  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3467  \t\tinteger,intent(in)::value(LDV1,LDV2,LDV3)\n 3468: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3469  \t\tcall error_stop\n 3470  \tend subroutine\n ....\n 3474  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3475  \t\treal(kind=4),intent(in)::value(LDV1,LDV2,LDV3)\n 3476: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3477  \t\tcall error_stop\n 3478  \tend subroutine\n ....\n 3482  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3483  \t\treal(kind=8),intent(in)::value(LDV1,LDV2,LDV3)\n 3484: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3485  \t\tcall error_stop\n 3486  \tend subroutine\n ....\n 3490  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3491  \t\tcomplex(kind=4),intent(in)::value(LDV1,LDV2,LDV3)\n 3492: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3493  \t\tcall error_stop\n 3494  \tend subroutine\n ....\n 3498  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3499  \t\tcomplex(kind=8),intent(in)::value(LDV1,LDV2,LDV3)\n 3500: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3501  \t\tcall error_stop\n 3502  \tend subroutine\n ....\n 3514  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3)\n 3515  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3)\n 3516: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3517  \t\tcall error_stop\n 3518  \tend subroutine\n ....\n 3522  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3523  \t\tinteger,intent(in)::value\n 3524: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3525  \t\tcall error_stop\n 3526  \tend subroutine\n ....\n 3530  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3531  \t\treal(kind=4),intent(in)::value\n 3532: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3533  \t\tcall error_stop\n 3534  \tend subroutine\n ....\n 3538  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3539  \t\treal(kind=8),intent(in)::value\n 3540: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3541  \t\tcall error_stop\n 3542  \tend subroutine\n ....\n 3546  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3547  \t\tcomplex(kind=4),intent(in)::value\n 3548: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3549  \t\tcall error_stop\n 3550  \tend subroutine\n ....\n 3554  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3555  \t\tcomplex(kind=8),intent(in)::value\n 3556: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3557  \t\tcall error_stop\n 3558  \tend subroutine\n ....\n 3570  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3571  \t\tcharacter(len=*),intent(in)::value\n 3572: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3573  \t\tcall error_stop\n 3574  \tend subroutine\n ....\n 3578  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3579  \t\tinteger,intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3580: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3581  \t\tcall error_stop\n 3582  \tend subroutine\n ....\n 3586  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3587  \t\treal(kind=4),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3588: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3589  \t\tcall error_stop\n 3590  \tend subroutine\n ....\n 3594  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3595  \t\treal(kind=8),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3596: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3597  \t\tcall error_stop\n 3598  \tend subroutine\n ....\n 3602  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3603  \t\tcomplex(kind=4),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3604: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3605  \t\tcall error_stop\n 3606  \tend subroutine\n ....\n 3610  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3611  \t\tcomplex(kind=8),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3612: \t\tcall writemess('ERROR type when setting, logical=number ')\n 3613  \t\tcall error_stop\n 3614  \tend subroutine\n ....\n 3626  \t\tlogical,intent(inout)::Tdata(LD1,LD2,LD3,LD4)\n 3627  \t\tcharacter(len=*),intent(in)::value(LDV1,LDV2,LDV3,LDV4)\n 3628: \t\tcall writemess('ERROR type when setting, logical=character ')\n 3629  \t\tcall error_stop\n 3630  \t\treturn\n ....\n 4266  \t\tinteger,intent(inout)::A(LDA)\n 4267  \t\tlogical,intent(in)::B(LDB)\n 4268: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 4269  \t\tcall error_stop\n 4270  \tend subroutine\n ....\n 4274  \t\tinteger,intent(inout)::A(LDA)\n 4275  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4276: \t\tcall writemess('ERROR type when setting, integer=character ')\n 4277  \t\tcall error_stop\n 4278  \tend subroutine\n ....\n 4325  \t\treal(kind=4),intent(inout)::A(LDA)\n 4326  \t\tlogical,intent(in)::B(LDB)\n 4327: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4328  \t\tcall error_stop\n 4329  \tend subroutine\n ....\n 4333  \t\treal(kind=4),intent(inout)::A(LDA)\n 4334  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4335: \t\tcall writemess('ERROR type when setting, real=character ')\n 4336  \t\tcall error_stop\n 4337  \tend subroutine\n ....\n 4384  \t\treal(kind=8),intent(inout)::A(LDA)\n 4385  \t\tlogical,intent(in)::B(LDB)\n 4386: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4387  \t\tcall error_stop\n 4388  \tend subroutine\n ....\n 4392  \t\treal(kind=8),intent(inout)::A(LDA)\n 4393  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4394: \t\tcall writemess('ERROR type when setting, real=character ')\n 4395  \t\tcall error_stop\n 4396  \tend subroutine\n ....\n 4443  \t\tcomplex(kind=4),intent(inout)::A(LDA)\n 4444  \t\tlogical,intent(in)::B(LDB)\n 4445: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4446  \t\tcall error_stop\n 4447  \tend subroutine\n ....\n 4451  \t\tcomplex(kind=4),intent(inout)::A(LDA)\n 4452  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4453: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4454  \t\tcall error_stop\n 4455  \tend subroutine\n ....\n 4502  \t\tcomplex(kind=8),intent(inout)::A(LDA)\n 4503  \t\tlogical,intent(in)::B(LDB)\n 4504: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4505  \t\tcall error_stop\n 4506  \tend subroutine\n ....\n 4510  \t\tcomplex(kind=8),intent(inout)::A(LDA)\n 4511  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4512: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4513  \t\tcall error_stop\n 4514  \tend subroutine\n ....\n 4520  \t\tlogical,intent(inout)::A(LDA)\n 4521  \t\tinteger,intent(in)::B(LDB)\n 4522: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4523  \t\tcall error_stop\n 4524  \tend subroutine\n ....\n 4528  \t\tlogical,intent(inout)::A(LDA)\n 4529  \t\treal(kind=4),intent(in)::B(LDB)\n 4530: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4531  \t\tcall error_stop\n 4532  \tend subroutine\n ....\n 4536  \t\tlogical,intent(inout)::A(LDA)\n 4537  \t\treal(kind=8),intent(in)::B(LDB)\n 4538: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4539  \t\tcall error_stop\n 4540  \tend subroutine\n ....\n 4544  \t\tlogical,intent(inout)::A(LDA)\n 4545  \t\tcomplex(kind=4),intent(in)::B(LDB)\n 4546: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4547  \t\tcall error_stop\n 4548  \tend subroutine\n ....\n 4552  \t\tlogical,intent(inout)::A(LDA)\n 4553  \t\tcomplex(kind=8),intent(in)::B(LDB)\n 4554: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4555  \t\tcall error_stop\n 4556  \tend subroutine\n ....\n 4568  \t\tlogical,intent(inout)::A(LDA)\n 4569  \t\tcharacter(len=*),intent(in)::B(LDB)\n 4570: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4571  \t\tcall error_stop\n 4572  \tend subroutine\n ....\n 4682  \t\tinteger,intent(inout)::A(LDA,LDA2)\n 4683  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4684: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 4685  \t\tcall error_stop\n 4686  \tend subroutine\n ....\n 4690  \t\tinteger,intent(inout)::A(LDA,LDA2)\n 4691  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4692: \t\tcall writemess('ERROR type when setting, integer=character ')\n 4693  \t\tcall error_stop\n 4694  \tend subroutine\n ....\n 4740  \t\treal(kind=4),intent(inout)::A(LDA,LDA2)\n 4741  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4742: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4743  \t\tcall error_stop\n 4744  \tend subroutine\n ....\n 4748  \t\treal(kind=4),intent(inout)::A(LDA,LDA2)\n 4749  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4750: \t\tcall writemess('ERROR type when setting, real=character ')\n 4751  \t\tcall error_stop\n 4752  \tend subroutine\n ....\n 4798  \t\treal(kind=8),intent(inout)::A(LDA,LDA2)\n 4799  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4800: \t\tcall writemess('ERROR type when setting, real=logical ')\n 4801  \t\tcall error_stop\n 4802  \tend subroutine\n ....\n 4806  \t\treal(kind=8),intent(inout)::A(LDA,LDA2)\n 4807  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4808: \t\tcall writemess('ERROR type when setting, real=character ')\n 4809  \t\tcall error_stop\n 4810  \tend subroutine\n ....\n 4856  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2)\n 4857  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4858: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4859  \t\tcall error_stop\n 4860  \tend subroutine\n ....\n 4864  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2)\n 4865  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4866: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4867  \t\tcall error_stop\n 4868  \tend subroutine\n ....\n 4914  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2)\n 4915  \t\tlogical,intent(in)::B(LDB,LDB2)\n 4916: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 4917  \t\tcall error_stop\n 4918  \tend subroutine\n ....\n 4922  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2)\n 4923  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4924: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4925  \t\tcall error_stop\n 4926  \tend subroutine\n ....\n 4932  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4933  \t\tinteger,intent(in)::B(LDB,LDB2)\n 4934: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4935  \t\tcall error_stop\n 4936  \tend subroutine\n ....\n 4940  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4941  \t\treal*4,intent(in)::B(LDB,LDB2)\n 4942: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4943  \t\tcall error_stop\n 4944  \tend subroutine\n ....\n 4948  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4949  \t\treal*8,intent(in)::B(LDB,LDB2)\n 4950: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4951  \t\tcall error_stop\n 4952  \tend subroutine\n ....\n 4956  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4957  \t\tcomplex*8,intent(in)::B(LDB,LDB2)\n 4958: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4959  \t\tcall error_stop\n 4960  \tend subroutine\n ....\n 4964  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4965  \t\tcomplex*16,intent(in)::B(LDB,LDB2)\n 4966: \t\tcall writemess('ERROR type when setting, logical=number ')\n 4967  \t\tcall error_stop\n 4968  \tend subroutine\n ....\n 4980  \t\tlogical,intent(inout)::A(LDA,LDA2)\n 4981  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2)\n 4982: \t\tcall writemess('ERROR type when setting, complex=character ')\n 4983  \t\tcall error_stop\n 4984  \tend subroutine\n ....\n 5114  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3)\n 5115  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5116: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 5117  \t\tcall error_stop\n 5118  \tend subroutine\n ....\n 5122  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3)\n 5123  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5124: \t\tcall writemess('ERROR type when setting, integer=character ')\n 5125  \t\tcall error_stop\n 5126  \tend subroutine\n ....\n 5172  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5173  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5174: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5175  \t\tcall error_stop\n 5176  \tend subroutine\n ....\n 5180  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5181  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5182: \t\tcall writemess('ERROR type when setting, real=character ')\n 5183  \t\tcall error_stop\n 5184  \tend subroutine\n ....\n 5230  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5231  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5232: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5233  \t\tcall error_stop\n 5234  \tend subroutine\n ....\n 5238  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5239  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5240: \t\tcall writemess('ERROR type when setting, real=character ')\n 5241  \t\tcall error_stop\n 5242  \tend subroutine\n ....\n 5288  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5289  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5290: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5291  \t\tcall error_stop\n 5292  \tend subroutine\n ....\n 5296  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3)\n 5297  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5298: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5299  \t\tcall error_stop\n 5300  \tend subroutine\n ....\n 5346  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5347  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3)\n 5348: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5349  \t\tcall error_stop\n 5350  \tend subroutine\n ....\n 5354  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3)\n 5355  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5356: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5357  \t\tcall error_stop\n 5358  \tend subroutine\t\n ....\n 5364  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5365  \t\tinteger,intent(in)::B(LDB,LDB2,LDB3)\n 5366: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5367  \t\tcall error_stop\t\t\n 5368  \tend subroutine\n ....\n 5372  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5373  \t\treal(kind=4),intent(in)::B(LDB,LDB2,LDB3)\n 5374: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5375  \t\tcall error_stop\t\t\n 5376  \tend subroutine\n ....\n 5380  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5381  \t\treal(kind=8),intent(in)::B(LDB,LDB2,LDB3)\n 5382: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5383  \t\tcall error_stop\t\t\n 5384  \tend subroutine\n ....\n 5388  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5389  \t\tcomplex(kind=4),intent(in)::B(LDB,LDB2,LDB3)\n 5390: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5391  \t\tcall error_stop\t\t\n 5392  \tend subroutine\n ....\n 5396  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5397  \t\tcomplex(kind=8),intent(in)::B(LDB,LDB2,LDB3)\n 5398: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5399  \t\tcall error_stop\t\t\n 5400  \tend subroutine\n ....\n 5412  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3)\n 5413  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3)\n 5414: \t\tcall writemess('ERROR type when setting, logical=character ')\n 5415  \t\tcall error_stop\n 5416  \tend subroutine\n ....\n 5556  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5557  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5558: \t\tcall writemess('ERROR type when setting, integer=logical ')\n 5559  \t\tcall error_stop\n 5560  \tend subroutine\n ....\n 5564  \t\tinteger,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5565  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5566: \t\tcall writemess('ERROR type when setting, integer=character ')\n 5567  \t\tcall error_stop\n 5568  \tend subroutine\n ....\n 5614  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5615  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5616: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5617  \t\tcall error_stop\n 5618  \tend subroutine\n ....\n 5622  \t\treal(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5623  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5624: \t\tcall writemess('ERROR type when setting, real=character ')\n 5625  \t\tcall error_stop\n 5626  \tend subroutine\n ....\n 5673  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5674  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5675: \t\tcall writemess('ERROR type when setting, real=logical ')\n 5676  \t\tcall error_stop\n 5677  \tend subroutine\n ....\n 5681  \t\treal(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5682  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5683: \t\tcall writemess('ERROR type when setting, real=character ')\n 5684  \t\tcall error_stop\n 5685  \tend subroutine\n ....\n 5732  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5733  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5734: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5735  \t\tcall error_stop\n 5736  \tend subroutine\n ....\n 5740  \t\tcomplex(kind=4),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5741  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5742: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5743  \t\tcall error_stop\n 5744  \tend subroutine\n ....\n 5791  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5792  \t\tlogical,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5793: \t\tcall writemess('ERROR type when setting, complex=logical ')\n 5794  \t\tcall error_stop\n 5795  \tend subroutine\n ....\n 5799  \t\tcomplex(kind=8),intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5800  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5801: \t\tcall writemess('ERROR type when setting, complex=character ')\n 5802  \t\tcall error_stop\n 5803  \tend subroutine\n ....\n 5810  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5811  \t\tinteger,intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5812: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5813  \t\tcall error_stop\n 5814  \tend subroutine\t\n ....\n 5818  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5819  \t\treal(kind=4),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5820: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5821  \t\tcall error_stop\n 5822  \tend subroutine\t\n ....\n 5826  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5827  \t\treal(kind=8),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5828: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5829  \t\tcall error_stop\n 5830  \tend subroutine\n ....\n 5834  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5835  \t\tcomplex(kind=4),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5836: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5837  \t\tcall error_stop\n 5838  \tend subroutine\n ....\n 5842  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5843  \t\tcomplex(kind=8),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5844: \t\tcall writemess('ERROR type when setting, logical=number ')\n 5845  \t\tcall error_stop\n 5846  \tend subroutine\n ....\n 5858  \t\tlogical,intent(inout)::A(LDA,LDA2,LDA3,LDA4)\n 5859  \t\tcharacter(len=*),intent(in)::B(LDB,LDB2,LDB3,LDB4)\n 5860: \t\tcall writemess('ERROR type when setting, logical=character ')\n 5861  \t\tcall error_stop\n 5862  \tend subroutine\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/OtherFunction.f90:\n  160  \t\tinteger::minm,minn,classType\n  161  \t\tif(A%getRank().ne.2)then\n  162: \t\t\tcall writemess('resetMatrixDim only work on matrix (rank=2)')\n  163  \t\t\tcall error_stop\n  164  \t\tend if\n  ...\n  249  \t\tp2=>outTensor\n  250  \t\tif(associated(p1,p2))then\n  251: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,input Tensor and output Tensor can not be the same one',-1)\n  252  \t\t\tcall error_stop\n  253  \t\tend if\n  ...\n  258  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  259  \t\tif(.not.ALLgoonFlag)then\n  260: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,the is no date in one or some Tensors',-1)\n  261  \t\t\tcall error_stop\n  262  \t\tend if\n  ...\n  268  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  269  \t\tif(.not.ALLgoonFlag)then\n  270: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,the Data type in the Tensors are not the sames',-1)\n  271  \t\t\tcall error_stop\n  272  \t\tend if\n  ...\n  278  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  279  \t\tif(.not.ALLgoonFlag)then\n  280: \t\t\tcall writemess('ERROR in ALLREDUCE_Tensor,the length od the Tensor is not the same',-1)\n  281  \t\t\tcall error_stop\n  282  \t\tend if\n  ...\n  348  \t\tp2=>outTensor\n  349  \t\tif(associated(p1,p2))then\n  350: \t\t\tcall writemess('ERROR in REDUCE_Tensor,input Tensor and output Tensor can not be the same one',-1)\n  351  \t\t\tcall error_stop\n  352  \t\tend if\n  ...\n  357  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  358  \t\tif(.not.ALLgoonFlag)then\n  359: \t\t\tcall writemess('ERROR in REDUCE_Tensor,the is no date in one or some Tensors',-1)\n  360  \t\t\tcall error_stop\n  361  \t\tend if\n  ...\n  367  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  368  \t\tif(.not.ALLgoonFlag)then\n  369: \t\t\tcall writemess('ERROR in REDUCE_Tensor,the Data type in the Tensors are not the sames',-1)\n  370  \t\t\tcall error_stop\n  371  \t\tend if\n  ...\n  377  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n  378  \t\tif(.not.ALLgoonFlag)then\n  379: \t\t\tcall writemess('ERROR in REDUCE_Tensor,the length od the Tensor is not the same',-1)\n  380  \t\t\tcall error_stop\n  381  \t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/parameter.f90:\n   77  \tend type\n   78  \t\n   79: \tpublic::writemess\n   80: \tinterface writemess\n   81  \t\tmodule procedure writeoparametemess\n   82  \tend interface\n   ..\n  117  \t\ttype(Tensor),intent(in)::A,B\n  118  \t\tif(A%getType().ne.7)then\n  119: \t\t\tcall writemess(' ERROR in constructor of list,list(A,B), A should be a Tensor of character',-1)\n  120  \t\t\tcall error_stop\n  121  \t\tend if\n  122  \t\tif(A%getTotalData().ne.B%getTotalData())then\n  123: \t\t\tcall writemess(' ERROR in constructor of list,list(A,B)',-1)\n  124  \t\t\tcall error_stop\n  125  \t\tend if\n  ...\n  134  \t\t\n  135  \t\tif(size(A).ne.B%getTotalData())then\n  136: \t\t\tcall writemess(' ERROR in constructor of list,list(A,B)',-1)\n  137  \t\t\tcall error_stop\n  138  \t\tend if\n  ...\n  151  \t\t\tdo j=i+1,p%name%gettotalData()\n  152  \t\t\t\tif(w.equ.p%name%ai(j))then\n  153: \t\t\t\t\tcall writemess('There are two element in the List have the same names')\n  154: \t\t\t\t\tcall writemess('the ith='+i+',and ith='+j+' are the same')\n  155  \t\t\t\t\tcall p%print()\n  156  \t\t\t\t\tcall error_stop\n  ...\n  203  \t\ttype(Tensor),intent(in)::arrayTensor(:)\n  204  \t\tif(size(arrayTensor).ne.2)then\n  205: \t\t\tcall writemess('ERROR in (=) for type(List)',-1)\n  206  \t\t\tcall error_stop\n  207  \t\tend if\n  208  \t\tif(arrayTensor(1)%getType().ne.7)then\n  209: \t\t\tcall writemess('ERROR in (=) for type(List), the name should be character',-1)\n  210  \t\t\tcall error_stop\n  211  \t\tend if\n  212  \t\tpinout%length=arrayTensor(1)%getTotalData()\n  213  \t\tif(pinout%length.ne.arrayTensor(2)%getTotalData())then\n  214: \t\t\tcall writemess('ERROR in (=) for type(List), ERROR LENGTH',-1)\n  215  \t\t\tcall error_stop\n  216  \t\tend if\n  ...\n  286  \t\tinteger,intent(in)::ith\n  287  \t\tif(val%getTotalData().ne.1)then\n  288: \t\t\tcall writemess('ERROR in setvalue to a list')\n  289: \t\t\tcall writemess('input a Tensor, the length should be 1')\n  290  \t\t\tcall error_stop\n  291  \t\tend if\n  ...\n  302  \t\tith=p%name%which(namei)\n  303  \t\tif(ith.eq.0)then\n  304: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  305: \t\t\tcall writemess('The Name is'+(' '+namei))\n  306  \t\t\tcall error_stop\n  307  \t\tend if\n  ...\n  317  \t\tith=p%name%which(namei)\n  318  \t\tif(ith.eq.0)then\n  319: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  320: \t\t\tcall writemess('The Name is'+(' '+namei))\n  321  \t\t\tcall error_stop\n  322  \t\tend if\n  ...\n  332  \t\tith=p%name%which(namei)\n  333  \t\tif(ith.eq.0)then\n  334: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  335: \t\t\tcall writemess('The Name is'+(' '+namei))\n  336  \t\t\tcall error_stop\n  337  \t\tend if\n  ...\n  347  \t\tith=p%name%which(namei)\n  348  \t\tif(ith.eq.0)then\n  349: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  350: \t\t\tcall writemess('The Name is'+(' '+namei))\n  351  \t\t\tcall error_stop\n  352  \t\tend if\n  ...\n  362  \t\tith=p%name%which(namei)\n  363  \t\tif(ith.eq.0)then\n  364: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  365: \t\t\tcall writemess('The Name is'+(' '+namei))\n  366  \t\t\tcall error_stop\n  367  \t\tend if\n  ...\n  377  \t\tith=p%name%which(namei)\n  378  \t\tif(ith.eq.0)then\n  379: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  380: \t\t\tcall writemess('The Name is'+(' '+namei))\n  381  \t\t\tcall error_stop\n  382  \t\tend if\n  ...\n  392  \t\tith=p%name%which(namei)\n  393  \t\tif(ith.eq.0)then\n  394: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  395: \t\t\tcall writemess('The Name is'+(' '+namei))\n  396  \t\t\tcall error_stop\n  397  \t\tend if\n  ...\n  407  \t\tith=p%name%which(namei)\n  408  \t\tif(ith.eq.0)then\n  409: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  410: \t\t\tcall writemess('The Name is'+(' '+namei))\n  411  \t\t\tcall error_stop\n  412  \t\tend if\n  413  \t\tif(val%getTotalData().ne.1)then\n  414: \t\t\tcall writemess('ERROR in setvalue to a list',-1)\n  415: \t\t\tcall writemess('input a Tensor, the length should be 1',-1)\n  416  \t\t\tcall error_stop\n  417  \t\tend if\n  ...\n  428  \t\tend if\n  429  \t\tif(p%length.ne.size(val))then\n  430: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  431  \t\t\tcall error_stop\n  432  \t\tend if\n  ...\n  443  \t\tend if\n  444  \t\tif(p%length.ne.size(val))then\n  445: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  446  \t\t\tcall error_stop\n  447  \t\tend if\n  ...\n  458  \t\tend if\n  459  \t\tif(p%length.ne.size(val))then\n  460: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  461  \t\t\tcall error_stop\n  462  \t\tend if\n  ...\n  473  \t\tend if\n  474  \t\tif(p%length.ne.size(val))then\n  475: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  476  \t\t\tcall error_stop\n  477  \t\tend if\n  ...\n  488  \t\tend if\n  489  \t\tif(p%length.ne.size(val))then\n  490: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  491  \t\t\tcall error_stop\n  492  \t\tend if\n  ...\n  503  \t\tend if\n  504  \t\tif(p%length.ne.size(val))then\n  505: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  506  \t\t\tcall error_stop\n  507  \t\tend if\n  ...\n  518  \t\tend if\n  519  \t\tif(p%length.ne.size(val))then\n  520: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  521  \t\t\tcall error_stop\n  522  \t\tend if\n  ...\n  533  \t\tend if\n  534  \t\tif(p%length.ne.val%getTotalData())then\n  535: \t\t\tcall writemess('ERROR in set value to a list',-1)\n  536  \t\t\tcall error_stop\n  537  \t\tend if\n  ...\n  544  \t\tcharacter(len=*),intent(in)::Allnamei(:)\n  545  \t\tif(p%length.eq.0)then\n  546: \t\t\tcall writemess('ERROR Name length in initial parameter,Do not allocate parameter yet',-1)\n  547  \t\t\tcall error_stop\n  548  \t\tend if\n  549  \t\tif(size(Allnamei).ne.p%length)then\n  550: \t\t\tcall writemess('ERROR Name length in initial parameter',-1)\n  551  \t\t\tcall error_stop\n  552  \t\tend if\n  ...\n  559  \t\tcharacter(len=*),intent(in)::Allnamei\n  560  \t\tif(ith.gt.p%length)then\n  561: \t\t\tcall writemess('ERROR Name length in initial parameter',-1)\n  562  \t\t\tcall error_stop\n  563  \t\tend if\n  564  \t\tif(ith.le.0)then\n  565: \t\t\tcall writemess('ERROR in setting Name integer list,ith<=0',-1)\n  566  \t\t\tcall error_stop\n  567  \t\tend if\n  ...\n  574  \t\tinteger::ith\n  575  \t\tif(.not.p%getFlag())then\n  576: \t\t\tcall writemess('The List is empty')\n  577  \t\t\tcall error_stop\n  578  \t\tend if\n  579  \t\tith=p%name%which(oldName)\n  580  \t\tif(ith.eq.0)then\n  581: \t\t\tcall writemess('Can not Find the name in the list')\n  582: \t\t\tcall writemess('name='+oldName)\n  583  \t\t\tcall error_stop\n  584  \t\tend if\n  ...\n  601  \t\tinteger::ith\n  602  \t\tif(.not.p%getFlag())then\n  603: \t\t\tcall writemess('The List is empty')\n  604  \t\t\tcall error_stop\n  605  \t\tend if\n  ...\n  620  \t\tinteger,intent(in)::ith\n  621  \t\tif(p%length.eq.0)then\n  622: \t\t\tcall writemess('The list is empty',-1)\n  623  \t\t\tcall error_stop\n  624  \t\tend if\n  ...\n  631  \t\tinteger::ith\n  632  \t\tif(p%length.eq.0)then\n  633: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  634: \t\t\tcall writemess('The Name is'+(' '+namei))\n  635: \t\t\tcall writemess('The list is empty')\n  636  \t\t\tcall error_stop\n  637  \t\tend if\n  638  \t\tith=p%name%which(namei)\n  639  \t\tif(ith.eq.0)then\n  640: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  641: \t\t\tcall writemess('The Name is'+(' '+namei))\n  642  \t\t\tcall error_stop\n  643  \t\tend if\n  ...\n  649  \t\tinteger,intent(in)::ith\n  650  \t\tif(p%length.eq.0)then\n  651: \t\t\tcall writemess('The list is empty')\n  652  \t\t\tcall error_stop\n  653  \t\tend if\n  ...\n  660  \t\tinteger::ith\n  661  \t\tif(p%length.eq.0)then\n  662: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  663: \t\t\tcall writemess('The Name is'+(' '+namei))\n  664: \t\t\tcall writemess('The list is empty')\n  665  \t\t\tcall error_stop\n  666  \t\tend if\n  667  \t\tith=p%name%which(namei)\n  668  \t\tif(ith.eq.0)then\n  669: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  670: \t\t\tcall writemess('The Name is'+(' '+namei))\n  671  \t\t\tcall error_stop\n  672  \t\tend if\n  ...\n  678  \t\tinteger,intent(in)::ith\n  679  \t\tif(p%length.eq.0)then\n  680: \t\t\tcall writemess('The list is empty')\n  681  \t\t\tcall error_stop\n  682  \t\tend if\n  ...\n  689  \t\tinteger::ith\n  690  \t\tif(p%length.eq.0)then\n  691: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  692: \t\t\tcall writemess('The Name is'+(' '+namei))\n  693: \t\t\tcall writemess('The list is empty')\n  694  \t\t\tcall error_stop\n  695  \t\tend if\n  696  \t\tith=p%name%which(namei)\n  697  \t\tif(ith.eq.0)then\n  698: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  699: \t\t\tcall writemess('The Name is'+(' '+namei))\n  700  \t\t\tcall error_stop\n  701  \t\tend if\n  ...\n  707  \t\tinteger,intent(in)::ith\n  708  \t\tif(p%length.eq.0)then\n  709: \t\t\tcall writemess('The list is empty')\n  710  \t\t\tcall error_stop\n  711  \t\tend if\n  ...\n  718  \t\tinteger::ith\n  719  \t\tif(p%length.eq.0)then\n  720: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  721: \t\t\tcall writemess('The Name is'+(' '+namei))\n  722: \t\t\tcall writemess('The list is empty')\n  723  \t\t\tcall error_stop\n  724  \t\tend if\n  725  \t\tith=p%name%which(namei)\n  726  \t\tif(ith.eq.0)then\n  727: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  728: \t\t\tcall writemess('The Name is'+(' '+namei))\n  729  \t\t\tcall error_stop\n  730  \t\tend if\n  ...\n  736  \t\tinteger,intent(in)::ith\n  737  \t\tif(p%length.eq.0)then\n  738: \t\t\tcall writemess('The list is empty')\n  739  \t\t\tcall error_stop\n  740  \t\tend if\n  ...\n  747  \t\tinteger::ith\n  748  \t\tif(p%length.eq.0)then\n  749: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  750: \t\t\tcall writemess('The Name is'+(' '+namei))\n  751: \t\t\tcall writemess('The list is empty')\n  752  \t\t\tcall error_stop\n  753  \t\tend if\n  754  \t\tith=p%name%which(namei)\n  755  \t\tif(ith.eq.0)then\n  756: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  757: \t\t\tcall writemess('The Name is'+(' '+namei))\n  758  \t\t\tcall error_stop\n  759  \t\tend if\n  ...\n  765  \t\tinteger,intent(in)::ith\n  766  \t\tif(p%length.eq.0)then\n  767: \t\t\tcall writemess('The list is empty')\n  768  \t\t\tcall error_stop\n  769  \t\tend if\n  ...\n  776  \t\tinteger::ith\n  777  \t\tif(p%length.eq.0)then\n  778: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  779: \t\t\tcall writemess('The Name is'+(' '+namei))\n  780: \t\t\tcall writemess('The list is empty')\n  781  \t\t\tcall error_stop\n  782  \t\tend if\n  783  \t\tith=p%name%which(namei)\n  784  \t\tif(ith.eq.0)then\n  785: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  786: \t\t\tcall writemess('The Name is'+(' '+namei))\n  787  \t\t\tcall error_stop\n  788  \t\tend if\n  ...\n  802  \t\tith=p%name%which(namei)\n  803  \t\tif(ith.eq.0)then\n  804: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  805: \t\t\tcall writemess('The Name is'+(' '+namei))\n  806  \t\t\tcall error_stop\n  807  \t\tend if\n  ...\n  814  \t\tinteger,intent(in)::ith\n  815  \t\tif(p%length.eq.0)then\n  816: \t\t\tcall writemess('The list is empty')\n  817  \t\t\tcall error_stop\n  818  \t\tend if\n  ...\n  825  \t\tinteger::ith\n  826  \t\tif(p%length.eq.0)then\n  827: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  828: \t\t\tcall writemess('The Name is'+(' '+namei))\n  829: \t\t\tcall writemess('The list is empty')\n  830  \t\t\tcall error_stop\n  831  \t\tend if\n  832  \t\tith=p%name%which(namei)\n  833  \t\tif(ith.eq.0)then\n  834: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n  835: \t\t\tcall writemess('The Name is'+(' '+namei))\n  836  \t\t\tcall error_stop\n  837  \t\tend if\n  ...\n 1020  \t\t\tcase(1)\n 1021  \t\t\t\tdo i=1,p%length\n 1022: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%ii(i),cpuInfo )\n 1023  \t\t\t\tend do\n 1024  \t\t\tcase(2)\n 1025  \t\t\t\tdo i=1,p%length\n 1026: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%si(i),cpuInfo )\n 1027  \t\t\t\tend do\n 1028  \t\t\tcase(3)\n 1029  \t\t\t\tdo i=1,p%length\n 1030: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%di(i),cpuInfo )\n 1031  \t\t\t\tend do\n 1032  \t\t\tcase(4)\n 1033  \t\t\t\tdo i=1,p%length\n 1034: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%ci(i),cpuInfo )\n 1035  \t\t\t\tend do\n 1036  \t\t\tcase(5)\n 1037  \t\t\t\tdo i=1,p%length\n 1038: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%zi(i),cpuInfo )\n 1039  \t\t\t\tend do\n 1040  \t\t\tcase(6)\n 1041  \t\t\t\tdo i=1,p%length\n 1042: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%li(i),cpuInfo )\n 1043  \t\t\t\tend do\n 1044  \t\t\tcase(7)\n 1045  \t\t\t\tdo i=1,p%length\n 1046: \t\t\t\t\tcall writemess(' '+p%name%ai(i)+'='+p%parameter%ai(i),cpuInfo )\n 1047  \t\t\t\tend do\n 1048  \t\tend select\n ....\n 1255  \t\tcharacter(len=max_len_of_char_in_TData)::namei\n 1256  \t\tif(p1%length.ne.p2%length)then\n 1257: \t\t\tcall writemess('The paramters have diferent length')\n 1258  \t\t\treturn\n 1259  \t\tend if\n 1260  \t\tptype=p1%parameter%getType()\n 1261  \t\tif(ptype.ne.p2%parameter%getType())then\n 1262: \t\t\tcall writemess('The paramters have diferent data type')\n 1263  \t\t\treturn\n 1264  \t\tend if\n ....\n 1267  \t\t\tith=p2%index(namei)\n 1268  \t\t\tif(ith.eq.0)then\n 1269: \t\t\t\tcall writemess('Can not find'+(' '+namei)+'in the secend parameter')\n 1270  \t\t\telse\t\n 1271  \t\t\t\tselect case(ptype)\n 1272  \t\t\t\t\tcase(1)\n 1273  \t\t\t\t\t\tif(p1%ii(i).ne.p2%ii(ith))then\n 1274: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%ii(i)+'-->'+p2%ii(ith))\n 1275  \t\t\t\t\t\tend if\n 1276  \t\t\t\t\tcase(2)\n 1277  \t\t\t\t\t\tif(p1%si(i).ne.p2%si(ith))then\n 1278: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%si(i)+'-->'+p2%si(ith))\n 1279  \t\t\t\t\t\tend if\n 1280  \t\t\t\t\tcase(3)\n 1281  \t\t\t\t\t\tif(p1%di(i).ne.p2%di(ith))then\n 1282: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%di(i)+'-->'+p2%di(ith))\n 1283  \t\t\t\t\t\tend if\n 1284  \t\t\t\t\tcase(4)\n 1285  \t\t\t\t\t\tif(p1%ci(i).ne.p2%ci(ith))then\n 1286: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%ci(i)+'-->'+p2%ci(ith))\n 1287  \t\t\t\t\t\tend if\n 1288  \t\t\t\t\tcase(5)\n 1289  \t\t\t\t\t\tif(p1%zi(i).ne.p2%zi(ith))then\n 1290: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%zi(i)+'-->'+p2%zi(ith))\n 1291  \t\t\t\t\t\tend if\n 1292  \t\t\t\t\tcase(6)\n 1293  \t\t\t\t\t\tif(p1%li(i).neqv.p2%li(ith))then\n 1294: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%li(i)+'-->'+p2%li(ith))\n 1295  \t\t\t\t\t\tend if\n 1296  \t\t\t\t\tcase(7)\n 1297  \t\t\t\t\t\tif(p1%ai(i).nequ.p2%ai(ith))then\n 1298: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+namei)+' ='+p1%ai(i)+'-->'+p2%ai(ith))\n 1299  \t\t\t\t\t\tend if\n 1300  \t\t\t\tend select\n ....\n 1310  \t\tClasstype=List1%parameter%getType()\n 1311  \t\tif(Classtype.ne.List2%parameter%getType())then\n 1312: \t\t\tcall writemess('Can not connect the List')\n 1313  \t\t\tcall error_stop\n 1314  \t\tend if\n ....\n 1330  \t\tsubLength=jth-ith+1\n 1331  \t\tif(subLength.le.0)then\n 1332: \t\t\tcall writemess('ERROR in subList, length<0,ith='+ith+',jth='+jth)\n 1333  \t\t\tcall error_stop\n 1334  \t\tend if\n ....\n 1346  \t\tith=L%name%which(namei)\n 1347  \t\tif(ith.eq.0)then\n 1348: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n 1349: \t\t\tcall writemess('The Name is'+(' '+namei))\n 1350  \t\t\tcall error_stop\n 1351  \t\tend if\n 1352  \t\tjth=L%name%which(namej)\n 1353  \t\tif(jth.eq.0)then\n 1354: \t\t\tcall writemess('Do not Find the name in parameter',-1)\n 1355: \t\t\tcall writemess('The Name is'+(' '+namej))\n 1356  \t\t\tcall error_stop\n 1357  \t\tend if\n 1358  \t\tif(ith.gt.ith)then\n 1359: \t\t\tcall writemess('ERROR in subList, length<0,ith='+ith+',jth='+jth)\n 1360: \t\t\tcall writemess('namei='+namei+'namej='+namej)\n 1361: \t\t\tcall writemess('The data in list are')\n 1362: \t\t\tcall writemess(L)\n 1363  \t\t\tcall error_stop\n 1364  \t\tend if\n ....\n 1387  \t\tptype=p%parameter%getType()\n 1388  \t\tif(ptype.ne.inp%parameter%getType())then\n 1389: \t\t\tcall writemess('Can not update the list, the data type are not the same')\n 1390  \t\t\tcall error_stop\n 1391  \t\tend if\n ....\n 1397  \t\t\t\t\tcase(1)\n 1398  \t\t\t\t\t\tif(p%ii(i).ne.inp%ii(ith))then\n 1399: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%ii(i)+'-->'+inp%ii(ith))\n 1400  \t\t\t\t\t\tend if\n 1401  \t\t\t\t\t\tcall p%setValue(i,inp%ii(ith))\n 1402  \t\t\t\t\tcase(2)\n 1403  \t\t\t\t\t\tif(p%si(i).ne.inp%si(ith))then\n 1404: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%si(i)+'-->'+inp%si(ith))\n 1405  \t\t\t\t\t\tend if\n 1406  \t\t\t\t\t\tcall p%setValue(i,inp%si(ith))\n 1407  \t\t\t\t\tcase(3)\n 1408  \t\t\t\t\t\tif(p%di(i).ne.inp%di(ith))then\n 1409: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%di(i)+'-->'+inp%di(ith))\n 1410  \t\t\t\t\t\tend if\n 1411  \t\t\t\t\t\tcall p%setValue(i,inp%di(ith))\n 1412  \t\t\t\t\tcase(4)\n 1413  \t\t\t\t\t\tif(p%ci(i).ne.inp%ci(ith))then\n 1414: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%ci(i)+'-->'+inp%ci(ith))\n 1415  \t\t\t\t\t\tend if\n 1416  \t\t\t\t\t\tcall p%setValue(i,inp%ci(ith))\n 1417  \t\t\t\t\tcase(5)\n 1418  \t\t\t\t\t\tif(p%zi(i).ne.inp%zi(ith))then\n 1419: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%zi(i)+'-->'+inp%zi(ith))\n 1420  \t\t\t\t\t\tend if\n 1421  \t\t\t\t\t\tcall p%setValue(i,inp%zi(ith))\n 1422  \t\t\t\t\tcase(6)\n 1423  \t\t\t\t\t\tif(p%li(i).neqv.inp%li(ith))then\n 1424: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%li(i)+'-->'+inp%li(ith))\n 1425  \t\t\t\t\t\tend if\n 1426  \t\t\t\t\t\tcall p%setValue(i,inp%li(ith))\n 1427  \t\t\t\t\tcase(7)\n 1428  \t\t\t\t\t\tif(p%ai(i).nequ.inp%ai(ith))then\n 1429: \t\t\t\t\t\t\tcall writemess('The parameter change:'+(' '+w)+' ='+p%ai(i)+'-->'+inp%ai(ith))\n 1430  \t\t\t\t\t\tend if\n 1431  \t\t\t\t\t\tcall p%setValue(i,inp%ai(ith))\n ....\n 1459  \t\t\t\tcounter=counter+1\n 1460  \t\t\t\tif(counter.gt.tempp%length)then\n 1461: \t\t\t\t\tcall writemess('ERROR in killData,parameter.f90')\n 1462  \t\t\t\t\tcall error_stop\n 1463  \t\t\t\tend if\n ....\n 1498  \t\t\t\tcounter=counter+1\n 1499  \t\t\t\tif(counter.gt.tempp%length)then\n 1500: \t\t\t\t\tcall writemess('ERROR in killData,parameter.f90')\n 1501  \t\t\t\t\tcall error_stop\n 1502  \t\t\t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/TData.f90:\n  194  \tend subroutine\n  195  \tsubroutine TData_memory_report()\n  196: \t\tcall writemess('The memory used in TData are:')\n  197  \t\tcall WorkingMemory%print()\n  198: \t\tcall writemess(' ')\n  199  \tend subroutine\t\n  200  \tsubroutine TData_memory_length(length)\n  ...\n  206  \t\tinteger,intent(inout)::inoutlen(:)\n  207  \t\tif(size(inoutlen).lt.7)then\n  208: \t\t\tcall writemess('ERROR in get length of the memory')\n  209  \t\t\tcall error_stop\n  210  \t\tend if\n  ...\n 3196  \t\t\t\tcall store_value_logi_i(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3197  \t\t\tcase default\n 3198: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3199  \t\t\t\tcall error_stop()\n 3200  \t\tend select\n ....\n 3220  \t\t\t\tcall store_value_logi_s(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3221  \t\t\tcase default\n 3222: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3223  \t\t\t\tcall error_stop()\n 3224  \t\tend select\n ....\n 3244  \t\t\t\tcall store_value_logi_d(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3245  \t\t\tcase default\n 3246: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3247  \t\t\t\tcall error_stop()\n 3248  \t\tend select\n ....\n 3268  \t\t\t\tcall store_value_logi_c(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3269  \t\t\tcase default\n 3270: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3271  \t\t\t\tcall error_stop()\n 3272  \t\tend select\n ....\n 3292  \t\t\t\tcall store_value_logi_z(T%ldata,Tdimen,ia,newdata,Ndimen,ib)\n 3293  \t\t\tcase default\n 3294: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3295  \t\t\t\tcall error_stop()\n 3296  \t\tend select\n ....\n 3318  \t\t\t\tcall store_value_char_l(T%adata,Tdimen,ia,newdata,Ndimen,ib)\n 3319  \t\t\tcase default\n 3320: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3321  \t\t\t\tcall error_stop()\n 3322  \t\tend select\n ....\n 3344  \t\t\t\tcall store_value_char_a(T%adata,Tdimen,ia,newdata,Ndimen,ib)\n 3345  \t\t\tcase default\n 3346: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3347  \t\t\t\tcall error_stop()\n 3348  \t\tend select\n ....\n 3370  \t\t\t\tcall modify_Some_TData_class1(T,Tdimen,ia,B%adata,Ndimen,ib)\n 3371  \t\t\tcase default\n 3372: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3373  \t\t\t\tcall error_stop()\n 3374  \t\tend select\n ....\n 3398  \t\t\t\tcall store_value2_char_i(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3399  \t\t\tcase default\n 3400: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3401  \t\t\t\tcall error_stop()\n 3402  \t\tend select\n ....\n 3424  \t\t\t\tcall store_value2_char_s(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3425  \t\t\tcase default\n 3426: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3427  \t\t\t\tcall error_stop()\n 3428  \t\tend select\n ....\n 3450  \t\t\t\tcall store_value2_char_d(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3451  \t\t\tcase default\n 3452: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3453  \t\t\t\tcall error_stop()\n 3454  \t\tend select\n ....\n 3476  \t\t\t\tcall store_value2_char_c(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3477  \t\t\tcase default\n 3478: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3479  \t\t\t\tcall error_stop()\n 3480  \t\tend select\n ....\n 3502  \t\t\t\tcall store_value2_char_z(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3503  \t\t\tcase default\n 3504: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3505  \t\t\t\tcall error_stop()\n 3506  \t\tend select\n ....\n 3528  \t\t\t\tcall store_value2_char_l(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3529  \t\t\tcase default\n 3530: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3531  \t\t\t\tcall error_stop()\n 3532  \t\tend select\n ....\n 3554  \t\t\t\tcall store_value2_char_a(T%adata,TD(1),TD(2),ia,ja,newdata,ND(1),ND(2),ib,jb)\n 3555  \t\t\tcase default\n 3556: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3557  \t\t\t\tcall error_stop()\n 3558  \t\tend select\n ....\n 3578  \t\t\t\t\t\tcall store_value2_int_z(T%idata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3579  \t\t\t\t\tcase default\n 3580: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3581  \t\t\t\t\t\tcall error_stop()\n 3582  \t\t\t\tend select\n ....\n 3595  \t\t\t\t\t\tcall store_value2_real4_z(T%sdata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3596  \t\t\t\t\tcase default\n 3597: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3598  \t\t\t\t\t\tcall error_stop()\n 3599  \t\t\t\tend select\n ....\n 3612  \t\t\t\t\t\tcall store_value2_real8_z(T%ddata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3613  \t\t\t\t\tcase default\n 3614: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3615  \t\t\t\t\t\tcall error_stop()\n 3616  \t\t\t\tend select\n ....\n 3629  \t\t\t\t\t\tcall store_value2_com4_z(T%cdata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3630  \t\t\t\t\tcase default\n 3631: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3632  \t\t\t\t\t\tcall error_stop()\n 3633  \t\t\t\tend select\t\n ....\n 3647  \t\t\t\t\t\tcall store_value2_com8_z(T%zdata,TD(1),TD(2),ia,ja,B%zdata,ND(1),ND(2),ib,jb)\n 3648  \t\t\t\t\tcase default\n 3649: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3650  \t\t\t\t\t\tcall error_stop()\n 3651  \t\t\t\tend select\t\n ....\n 3656  \t\t\t\t\t\tcall store_value2_logi_l(T%ldata,TD(1),TD(2),ia,ja,B%ldata,ND(1),ND(2),ib,jb)\n 3657  \t\t\t\t\tcase default\n 3658: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3659  \t\t\t\t\t\tcall error_stop()\n 3660  \t\t\t\tend select\t\n ....\n 3677  \t\t\t\t\t\tcall store_value2_char_a(T%adata,TD(1),TD(2),ia,ja,B%adata,ND(1),ND(2),ib,jb)\n 3678  \t\t\t\t\tcase default\n 3679: \t\t\t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3680  \t\t\t\t\t\tcall error_stop()\n 3681  \t\t\t\tend select\t\n 3682  \t\t\t\t\n 3683  \t\t\tcase default\n 3684: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3685  \t\t\t\tcall error_stop()\n 3686  \t\tend select\n ....\n 3714  \t\t\t\tcall store_value3_char_i(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3715  \t\t\tcase default\n 3716: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3717  \t\t\t\tcall error_stop()\n 3718  \t\tend select\n ....\n 3740  \t\t\t\tcall store_value3_char_s(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3741  \t\t\tcase default\n 3742: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3743  \t\t\t\tcall error_stop()\n 3744  \t\tend select\n ....\n 3766  \t\t\t\tcall store_value3_char_d(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3767  \t\t\tcase default\n 3768: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3769  \t\t\t\tcall error_stop()\n 3770  \t\tend select\n ....\n 3792  \t\t\t\tcall store_value3_char_c(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3793  \t\t\tcase default\n 3794: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3795  \t\t\t\tcall error_stop()\n 3796  \t\tend select\n ....\n 3818  \t\t\t\tcall store_value3_char_z(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3819  \t\t\tcase default\n 3820: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3821  \t\t\t\tcall error_stop()\n 3822  \t\tend select\n ....\n 3844  \t\t\t\tcall store_value3_char_l(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3845  \t\t\tcase default\n 3846: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3847  \t\t\t\tcall error_stop()\n 3848  \t\tend select\n ....\n 3870  \t\t\t\tcall store_value3_char_a(T%adata,TD(1),TD(2),TD(3),ia,ja,ka,newdata,ND(1),ND(2),ND(3),ib,jb,kb)\n 3871  \t\t\tcase default\n 3872: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3873  \t\t\t\tcall error_stop()\n 3874  \t\tend select\n ....\n 3896  \t\t\t\tcall store_value4_char_i(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3897  \t\t\tcase default\n 3898: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3899  \t\t\t\tcall error_stop()\n 3900  \t\tend select\n ....\n 3922  \t\t\t\tcall store_value4_char_s(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3923  \t\t\tcase default\n 3924: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3925  \t\t\t\tcall error_stop()\n 3926  \t\tend select\n ....\n 3948  \t\t\t\tcall store_value4_char_d(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3949  \t\t\tcase default\n 3950: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3951  \t\t\t\tcall error_stop()\n 3952  \t\tend select\n ....\n 3974  \t\t\t\tcall store_value4_char_c(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 3975  \t\t\tcase default\n 3976: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 3977  \t\t\t\tcall error_stop()\n 3978  \t\tend select\n ....\n 4000  \t\t\t\tcall store_value4_char_z(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 4001  \t\t\tcase default\n 4002: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 4003  \t\t\t\tcall error_stop()\n 4004  \t\tend select\n ....\n 4026  \t\t\t\tcall store_value4_char_l(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 4027  \t\t\tcase default\n 4028: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 4029  \t\t\t\tcall error_stop()\n 4030  \t\tend select\n ....\n 4052  \t\t\t\tcall store_value4_char_a(T%adata,TD(1),TD(2),TD(3),TD(4),ia,ja,ka,la,newdata,ND(1),ND(2),ND(3),ND(4),ib,jb,kb,la)\n 4053  \t\t\tcase default\n 4054: \t\t\t\tcall writemess('ERROR in classtype when set_value in Tdata.f90',-1)\n 4055  \t\t\t\tcall error_stop()\n 4056  \t\tend select\n ....\n 5146  \t\tlength=A%TotalData\n 5147  \t\tif(length.gt.Res%TotalData)then\n 5148: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5149  \t\t\tcall error_stop\n 5150  \t\tend if\n ....\n 5196  \t\tlength=A%TotalData\n 5197  \t\tif(length.gt.Res%TotalData)then\n 5198: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5199  \t\t\tcall error_stop\n 5200  \t\tend if\n ....\n 5246  \t\tlength=A%TotalData\n 5247  \t\tif(length.gt.Res%TotalData)then\n 5248: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5249  \t\t\tcall error_stop\n 5250  \t\tend if\n ....\n 5296  \t\tlength=A%TotalData\n 5297  \t\tif(length.gt.Res%TotalData)then\n 5298: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5299  \t\t\tcall error_stop\n 5300  \t\tend if\n ....\n 5346  \t\tlength=A%TotalData\n 5347  \t\tif(length.gt.Res%TotalData)then\n 5348: \t\t\tcall writemess(' ERROR in TDatamultiply_number_real8_par in TData.f90')\n 5349  \t\t\tcall error_stop\n 5350  \t\tend if\n ....\n 6238  \t\t\tcase default\n 6239  \t\t\t\n 6240: \t\t\t\tcall writemess('ERROR in product_MM_dim1_par',-1)\n 6241  \t\t\t\tcall error_stop\n 6242  \t\tend select\n ....\n 6336  \t\t\tcase default\n 6337  \t\t\t\n 6338: \t\t\t\tcall writemess('ERROR in product_MM_dim1_par',-1)\n 6339  \t\t\t\tcall error_stop\n 6340  \t\tend select\n ....\n 7989  \t\trank=dimen%Getrank()\n 7990  \t\tif(inde.gt.rank) then\n 7991: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 7992: \t\t\tcall writemess(\"index>rank\",-1)\n 7993  \t\t\tcall error_stop()\n 7994  \t\tend if\n 7995  \t\tif(inde.le.0) then\n 7996: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 7997: \t\t\tcall writemess(\"index=\"+inde,-1)\n 7998  \t\t\tcall error_stop()\n 7999  \t\tend if\n ....\n 8027  \t\trank=dimen%Getrank()\n 8028  \t\tif(inde.gt.rank) then\n 8029: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 8030: \t\t\tcall writemess(\"index>rank\",-1)\n 8031  \t\t\tcall error_stop()\n 8032  \t\tend if\n 8033  \t\tif(inde.le.0) then\n 8034: \t\t\tcall writemess(\"ERROR in function permutefo_data\",-1)\n 8035: \t\t\tcall writemess(\"index=\"+inde,-1)\n 8036  \t\t\tcall error_stop()\n 8037  \t\tend if\n ....\n 8141  \t\t\t\tcall sortData(inoutData%zdata,outindices%idata,realpart,increase)\n 8142  \t\t\tcase default\n 8143: \t\t\t\tcall writemess('ERROR type in sort Tensor',-1)\n 8144  \t\t\t\tcall error_stop\n 8145  \t\tend \tselect\n ....\n 8161  \t\t\t\tcall sortData(inoutData%zdata,realpart,increase)\n 8162  \t\t\tcase default\n 8163: \t\t\t\tcall writemess('ERROR type in sort Tensor',-1)\n 8164  \t\t\t\tcall error_stop\n 8165  \t\tend \tselect\n ....\n 8173  \t\ttotalData=A%totalData\n 8174  \t\tif(totalData.eq.0)then\n 8175: \t\t\tcall writemess(\" There is no data in Tensor, when checking if there is element is NAN\",-1)\n 8176  \t\t\tcall error_stop\n 8177  \t\tend if\n ....\n 8214  \t\t\t\tend do\n 8215  \t\t\tcase default\n 8216: \t\t\t\tcall writemess(\" ERROR in isnan\",-1)\n 8217  \t\t\t\tcall error_stop\n 8218  \t\tend select\n ....\n 8226  \t\ttotalData=A%totalData\n 8227  \t\tif(totalData.eq.0)then\n 8228: \t\t\tcall writemess(\" There is no data in Tensor, when checking if there is element Overflow\",-1)\n 8229  \t\t\tcall error_stop\n 8230  \t\tend if\n ....\n 8269  \t\t\t\tend do\n 8270  \t\t\tcase default\n 8271: \t\t\t\tcall writemess(\" ERROR in isOverflow,Tensor is not number type\",-1)\n 8272  \t\t\t\tcall error_stop\n 8273  \t\tend select\n ....\n 8280  \t\ttotalData=A%totalData\n 8281  \t\tif(totalData.eq.0)then\n 8282: \t\t\tcall writemess(\" There is no data in Tensor, when checking if all the element is 0\",-1)\n 8283  \t\t\tcall error_stop\n 8284  \t\tend if\n ....\n 8323  \t\t\t\tend do\n 8324  \t\t\tcase default\n 8325: \t\t\t\tcall writemess(\" ERROR in isZeroTData,Tensor is not number type(integer, real or complex)\",-1)\n 8326  \t\t\t\tcall error_stop\n 8327  \t\tend select\n ....\n 9646  \t\tinteger,pointer,intent(inout)::p(:)\n 9647  \t\tif(T%totalData.eq.0)then\n 9648: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9649  \t\t\tcall error_stop\n 9650  \t\tend if\n 9651  \t\tif(T%classtype.ne.1)then\n 9652: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 9653  \t\t\tcall error_stop\n 9654  \t\tend if\n ....\n 9662  \t\tinteger::length\n 9663  \t\tif(T%totalData.eq.0)then\n 9664: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9665  \t\t\tcall error_stop\n 9666  \t\tend if\n 9667  \t\tif(T%classtype.ne.1)then\n 9668: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 9669  \t\t\tcall error_stop\n 9670  \t\tend if\n 9671  \t\tlength=i1i2(2)-i1i2(1)+1\n 9672  \t\tif(length.gt.T%TotalData)then\n 9673: \t\t\tcall writemess('ERROR in pointing integer, pointer lenght larger than totoaldata',-1)\n 9674  \t\t\tcall error_stop\n 9675  \t\tend if\n ....\n 9681  \t\treal*4,pointer,intent(inout)::p(:)\n 9682  \t\tif(T%totalData.eq.0)then\n 9683: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9684  \t\t\tcall error_stop\n 9685  \t\tend if\n 9686  \t\tif(T%classtype.ne.2)then\n 9687: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 9688  \t\t\tcall error_stop\n 9689  \t\tend if\n ....\n 9697  \t\tinteger::length\n 9698  \t\tif(T%totalData.eq.0)then\n 9699: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9700  \t\t\tcall error_stop\n 9701  \t\tend if\n 9702  \t\tif(T%classtype.ne.2)then\n 9703: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 9704  \t\t\tcall error_stop\n 9705  \t\tend if\n 9706  \t\tlength=i1i2(2)-i1i2(1)+1\n 9707  \t\tif(length.gt.T%TotalData)then\n 9708: \t\t\tcall writemess('ERROR in pointing real*4, pointer lenght larger than totoaldata',-1)\n 9709  \t\t\tcall error_stop\n 9710  \t\tend if\n ....\n 9716  \t\treal*8,pointer,intent(inout)::p(:)\n 9717  \t\tif(T%totalData.eq.0)then\n 9718: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9719  \t\t\tcall error_stop\n 9720  \t\tend if\n 9721  \t\tif(T%classtype.ne.3)then\n 9722: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 9723  \t\t\tcall error_stop\n 9724  \t\tend if\n ....\n 9732  \t\tinteger::length\n 9733  \t\tif(T%totalData.eq.0)then\n 9734: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9735  \t\t\tcall error_stop\n 9736  \t\tend if\n 9737  \t\tif(T%classtype.ne.3)then\n 9738: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 9739  \t\t\tcall error_stop\n 9740  \t\tend if\n 9741  \t\tlength=i1i2(2)-i1i2(1)+1\n 9742  \t\tif(length.gt.T%TotalData)then\n 9743: \t\t\tcall writemess('ERROR in pointing real*8, pointer lenght larger than totoaldata',-1)\n 9744  \t\t\tcall error_stop\n 9745  \t\tend if\n ....\n 9751  \t\tcomplex(kind=4),pointer,intent(inout)::p(:)\n 9752  \t\tif(T%totalData.eq.0)then\n 9753: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9754  \t\t\tcall error_stop\n 9755  \t\tend if\n 9756  \t\tif(T%classtype.ne.4)then\n 9757: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 9758  \t\t\tcall error_stop\n 9759  \t\tend if\n ....\n 9767  \t\tinteger::length\n 9768  \t\tif(T%totalData.eq.0)then\n 9769: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9770  \t\t\tcall error_stop\n 9771  \t\tend if\n 9772  \t\tif(T%classtype.ne.4)then\n 9773: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 9774  \t\t\tcall error_stop\n 9775  \t\tend if\n 9776  \t\tlength=i1i2(2)-i1i2(1)+1\n 9777  \t\tif(length.gt.T%TotalData)then\n 9778: \t\t\tcall writemess('ERROR in pointing complex(kind=4), pointer lenght larger than totoaldata',-1)\n 9779  \t\t\tcall error_stop\n 9780  \t\tend if\n ....\n 9786  \t\tcomplex(kind=8),pointer,intent(inout)::p(:)\n 9787  \t\tif(T%totalData.eq.0)then\n 9788: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9789  \t\t\tcall error_stop\n 9790  \t\tend if\n 9791  \t\tif(T%classtype.ne.5)then\n 9792: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 9793  \t\t\tcall error_stop\n 9794  \t\tend if\n ....\n 9802  \t\tinteger::length\n 9803  \t\tif(T%totalData.eq.0)then\n 9804: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9805  \t\t\tcall error_stop\n 9806  \t\tend if\n 9807  \t\tif(T%classtype.ne.5)then\n 9808: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 9809  \t\t\tcall error_stop\n 9810  \t\tend if\n 9811  \t\tlength=i1i2(2)-i1i2(1)+1\n 9812  \t\tif(length.gt.T%TotalData)then\n 9813: \t\t\tcall writemess('ERROR in pointing complex(kind=8), pointer lenght larger than totoaldata',-1)\n 9814  \t\t\tcall error_stop\n 9815  \t\tend if\n ....\n 9821  \t\tlogical,pointer,intent(inout)::p(:)\n 9822  \t\tif(T%totalData.eq.0)then\n 9823: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9824  \t\t\tcall error_stop\n 9825  \t\tend if\n 9826  \t\tif(T%classtype.ne.6)then\n 9827: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 9828  \t\t\tcall error_stop\n 9829  \t\tend if\n ....\n 9837  \t\tinteger::length\n 9838  \t\tif(T%totalData.eq.0)then\n 9839: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9840  \t\t\tcall error_stop\n 9841  \t\tend if\n 9842  \t\tif(T%classtype.ne.6)then\n 9843: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 9844  \t\t\tcall error_stop\n 9845  \t\tend if\n 9846  \t\tlength=i1i2(2)-i1i2(1)+1\n 9847  \t\tif(length.gt.T%TotalData)then\n 9848: \t\t\tcall writemess('ERROR in pointing logical, pointer lenght larger than totoaldata',-1)\n 9849  \t\t\tcall error_stop\n 9850  \t\tend if\n ....\n 9856  \t\tcharacter(len=max_len_of_char_in_TData),pointer,intent(inout)::p(:)\n 9857  \t\tif(T%totalData.eq.0)then\n 9858: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9859  \t\t\tcall error_stop\n 9860  \t\tend if\n 9861  \t\tif(T%classtype.ne.7)then\n 9862: \t\t\tcall writemess('The type of Tensor is not  character(len=*)',-1)\n 9863  \t\t\tcall error_stop\n 9864  \t\tend if\n ....\n 9872  \t\tcharacter(len=max_len_of_char_in_TData),pointer,intent(inout)::p(:)\n 9873  \t\tif(T%totalData.eq.0)then\n 9874: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 9875  \t\t\tcall error_stop\n 9876  \t\tend if\n 9877  \t\tif(T%classtype.ne.7)then\n 9878: \t\t\tcall writemess('The type of Tensor is not  character(len=characterlen)',-1)\n 9879  \t\t\tcall error_stop\n 9880  \t\tend if\n 9881  \t\tlength=(i1i2(2)-i1i2(1)+1)\n 9882  \t\tif(length.gt.T%TotalData)then\n 9883: \t\t\tcall writemess('ERROR in pointing character(len=characterlen), pointer lenght larger than totoaldata',-1)\n 9884  \t\t\tcall error_stop\n 9885  \t\tend if\n ....\n 12299  \t\t\t\t\t\t\t\t\t\t\tinTData%totalData,MPI_double_precision,MPI_MAX,mpi_comm,ierr)\n 12300  \t\t\tcase default\n 12301: \t\t\t\tcall writemess('ERROR in MAX Tensor')\n 12302  \t\t\t\tcall error_stop\n 12303  \t\tend select\n .....\n 12329  \t\t\t\t\t\t\t\t\t\t\tinTData%totalData,MPI_double_precision,MPI_MIN,mpi_comm,ierr)\n 12330  \t\t\tcase default\n 12331: \t\t\t\tcall writemess('ERROR in MAX Tensor')\n 12332  \t\t\t\tcall error_stop\n 12333  \t\tend select\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tensor.f90:\n 1622  \t\tmodule procedure real8_le_T\n 1623  \tend interface\n 1624: \tpublic::writemess\n 1625: \tinterface writemess\n 1626: \t\tmodule procedure writemess_Tensor\n 1627: \t\tmodule procedure writemess_Tensor_form\n 1628  \tend interface\n 1629  \t\n ....\n 1779  \tpublic::out_and_set_seed!!set a random seed for the program,and then output the seed,seed=out_and_set_seed(),use to rebuild result\n 1780  \tpublic::set_writing_type!set_writing_type(chara,typ),chara=integer,real or some else,typ='(F25.8)','(I0)' or some else\n 1781: \tpublic::set_output_log_address!set the log file ,when use writemess\n 1782: \tpublic::set_output_log_unit!set the unit of log file ,when use writemess\n 1783: \tpublic::set_output_cpu!set the output cpu,when using writemess,by default , the output cpu is cpu0\n 1784  \tpublic::set_max_len_of_cha!define the max len of character when doing operation such as +\n 1785  \t\n ....\n 1898  \t\tTensorlength(1)=Tensorlength(1)+Workingdimension1%outlenDimData()+&\n 1899  \t\t\tWorkingdimension2%outlenDimData()+Workingdimension3%outlenDimData()\n 1900: \t\tcall writemess('The length of the memory used in Dimension, Tensor and TData are')\n 1901: \t\tcall writemess('integer         :'+Tensorlength(1))\n 1902: \t\tcall writemess('real(kind=4)    :'+Tensorlength(2))\n 1903: \t\tcall writemess('real(kind=8)    :'+Tensorlength(3))\n 1904: \t\tcall writemess('complex(kind=4) :'+Tensorlength(4))\n 1905: \t\tcall writemess('complex(kind=8) :'+Tensorlength(5))\n 1906: \t\tcall writemess('logical         :'+Tensorlength(6))\n 1907: \t\tcall writemess('character       :'+Tensorlength(7))\n 1908  \t\t\treturn\n 1909  \tend subroutine\t\n 1910  \tsubroutine Tensor_memory_report()\n 1911: \t\tcall writemess('The memory used in Tensor are:')\n 1912  \t\tcall WorkingMemory%print()\n 1913: \t\tcall writemess(' ')\n 1914: \t\tcall writemess('The length of the working Tensor are'+(WorkingTensor1%getTotalData()+&\n 1915  \t\t\tWorkingTensor2%getTotalData()))\n 1916: \t\tcall writemess('The length of the working Dimension are'+(Workingdimension1%outlenDimData()+&\n 1917  \t\t\tWorkingdimension2%outlenDimData()+Workingdimension3%outlenDimData()))\n 1918  \tend subroutine\t\n ....\n 1966  \t\tinteger::length\n 1967  \t\tif(getflag(T))then\n 1968: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 1969  \t\t\tcall error_stop\n 1970  \t\tend if\n ....\n 1987  \t\tinteger::length\n 1988  \t\tif(getflag(T))then\n 1989: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 1990  \t\t\tcall error_stop\n 1991  \t\tend if\n ....\n 2007  \t\tinteger::length\n 2008  \t\tif(getflag(T))then\n 2009: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2010  \t\t\tcall error_stop\n 2011  \t\tend if\n ....\n 2027  \t\tinteger::length\n 2028  \t\tif(getflag(T))then\n 2029: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2030  \t\t\tcall error_stop\n 2031  \t\tend if\n ....\n 2049  \t\tinteger::length\n 2050  \t\tif(getflag(T))then\n 2051: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2052  \t\t\tcall error_stop\n 2053  \t\tend if\n ....\n 2069  \t\tinteger::length\n 2070  \t\tif(getflag(T))then\n 2071: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2072  \t\t\tcall error_stop\n 2073  \t\tend if\n ....\n 2088  \t\tinteger::length\n 2089  \t\tif(getflag(T))then\n 2090: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2091  \t\t\tcall error_stop\n 2092  \t\tend if\n ....\n 2108  \t\tinteger::length\n 2109  \t\tif(getflag(T))then\n 2110: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2111  \t\t\tcall error_stop\n 2112  \t\tend if\n ....\n 2127  \t\tinteger::length\n 2128  \t\tif(getflag(T))then\n 2129: \t\t\tcall writemess('Can not allocate to a allocated Tensor')\n 2130  \t\t\tcall error_stop\n 2131  \t\tend if\n ....\n 2152  \t\tlength=dimen%size()\n 2153  \t\tif(length.le.0) then\n 2154: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2155  \t\t\tcall dimen%print()\n 2156  \t\t\tcall error_stop()\n ....\n 2170  \t\tlength=product(dimen)\n 2171  \t\tif(length.le.0) then\n 2172: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2173  \t\t\twrite(*,*)dimen\n 2174  \t\t\tcall error_stop()\n ....\n 2220  \t\tlength=product(dimen)\n 2221  \t\tif(length.le.0) then\n 2222: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2223  \t\t\twrite(*,*)dimen\n 2224  \t\t\tcall error_stop()\n ....\n 2251  \t\tlength=dimen%size()\n 2252  \t\tif(length.le.0) then\n 2253: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2254  \t\t\tcall dimen%print()\n 2255  \t\t\tcall error_stop()\n ....\n 2268  \t\tlength=product(dimen)\n 2269  \t\tif(length.le.0) then\n 2270: \t\t\tcall writemess(\"ERROR in allocatedTensor of input dimension, total length=0\",-1)\n 2271  \t\t\twrite(*,*)dimen\n 2272  \t\t\tcall error_stop()\n ....\n 2790  \t\t\tcall assignment_real4_Tdata_value(val,T%TData)\n 2791  \t\telse if(.not.T%getFlag())then\n 2792: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2793: \t\t\tcall writemess(\"The Tensor is a empty Tensor\",-1)\n 2794  \t\t\tcall error_stop()\n 2795  \t\telse\n 2796: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2797  \t\t\tcall T%print()\n 2798  \t\t\tcall error_stop()\n ....\n 2806  \t\t\tcall assignment_real8_Tdata_value(val,T%TData)\n 2807  \t\telse if(.not.T%getFlag())then\n 2808: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2809: \t\t\tcall writemess(\"The Tensor is a empty Tensor\",-1)\n 2810  \t\t\tcall error_stop()\n 2811  \t\telse\n 2812: \t\t\tcall writemess(\"ERROR in assignment for Tensor to real\",-1)\n 2813  \t\t\tcall T%print()\n 2814  \t\t\tcall error_stop()\n ....\n 2822  \t\t\tcall assignment_com4_Tdata_value(val,T%TData)\n 2823  \t\telse\n 2824: \t\t\tcall writemess(\"ERROR in assignment for Tensor to complex\",-1)\n 2825  \t\t\tcall error_stop()\n 2826  \t\tend if\n ....\n 3480  \t\tinteger::length\n 3481  \t\tif(.not.Vec%getFlag())then\n 3482: \t\t\tcall writemess(\"There is no data in input element, setValue(element)\",-1)\n 3483  \t\t\tcall error_stop()\n 3484  \t\tend if\t\n ....\n 3595  \t\tinteger::ia(2)\n 3596  \t\tif(ia(1).gt.ia(2))then\n 3597: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3598: \t\t\tcall writemess('ERROR:ia(1)>ia(2)'+',ia(1)='+ia(1)+',ia(2)='+ia(2),-1)\n 3599  \t\t\tcall error_stop\n 3600  \t\tend if\n 3601  \t\tif(ia(1).le.0)then\n 3602: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3603: \t\t\tcall writemess('ERROR:ia(1)<0'+',ia(1)='+ia(1))\n 3604  \t\t\tcall error_stop\n 3605  \t\tend if\n 3606  \t\tif(ia(2).gt.A%getToTalData())then\n 3607: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3608: \t\t\tcall writemess('ERROR:ia(2)>len of Tensor Data'+',ia(2)='+ia(2)+',TotalData='+A%getToTalData(),-1)\n 3609  \t\t\tcall error_stop\n 3610  \t\tend if\n ....\n 3614  \t\tinteger::ia(2),lenA\n 3615  \t\tif(ia(1).gt.ia(2))then\n 3616: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3617: \t\t\tcall writemess('ERROR:ia(1)>ia(2)'+',ia(1)='+ia(1)+',ia(2)='+ia(2),-1)\n 3618  \t\t\tcall error_stop\n 3619  \t\tend if\n 3620  \t\tif(ia(1).le.0)then\n 3621: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3622: \t\t\tcall writemess('ERROR:ia(1)<0'+',ia(1)='+ia(1),-1)\n 3623  \t\t\tcall error_stop\n 3624  \t\tend if\n 3625  \t\tif(ia(2).gt.lenA)then\n 3626: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3627: \t\t\tcall writemess('ERROR:ia(2)>len of lenA Data'+',ia(2)='+ia(2)+',TotalData='+lenA,-1)\n 3628  \t\t\tcall error_stop\n 3629  \t\tend if\n ....\n 3633  \t\tinteger::ia(2),ib(2)\n 3634  \t\tif((ia(2)-ia(1)).ne.(ib(2)-ib(1)))then\n 3635: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3636: \t\t\tcall writemess('ERROR: index do not match,ia(2)-ia(1)!=ib(2)-ib(1)',-1)\n 3637: \t\t\tcall writemess('ia(1)='+ia(1),-1)\n 3638: \t\t\tcall writemess('ia(2)='+ia(2),-1)\n 3639: \t\t\tcall writemess('ib(1)='+ib(1),-1)\n 3640: \t\t\tcall writemess('ib(2)='+ib(2),-1)\n 3641  \t\t\tcall error_stop\n 3642  \t\tend if\n ....\n 3649  \t\tn=ja(2)-ja(1)+1\n 3650  \t\tif((m*n).ne.total)then\n 3651: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3652: \t\t\tcall writemess('ERROR: index do not match,(ia(2)-ia(1))*(ja(2)-ja(1))!=total',-1)\n 3653: \t\t\tcall writemess('ia(1)='+ia(1),-1)\n 3654: \t\t\tcall writemess('ia(2)='+ia(2),-1)\n 3655: \t\t\tcall writemess('ja(1)='+ja(1),-1)\n 3656: \t\t\tcall writemess('ja(2)='+ja(2),-1)\n 3657: \t\t\tcall writemess('total='+total,-1)\n 3658  \t\t\tcall error_stop\n 3659  \t\tend if\n ....\n 3665  \t\tm=ia(2)-ia(1)\n 3666  \t\tif(m.ne.total)then\n 3667: \t\t\tcall writemess('ERROR in input parameter, when setvalue in Tensor.f90',-1)\n 3668: \t\t\tcall writemess('ERROR: index do not match,(ia(2)-ia(1))!=total',-1)\n 3669: \t\t\tcall writemess('ia(1)='+ia(1),-1)\n 3670: \t\t\tcall writemess('ia(2)='+ia(2),-1)\n 3671: \t\t\tcall writemess('total='+total,-1)\n 3672  \t\t\tcall error_stop\n 3673  \t\tend if\n ....\n 3775  \t\tinteger::Bdim(2),Adim(2)\n 3776  \t\tif(A%getRank().ne.2)then\n 3777: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3778: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3779  \t\t\tcall error_stop\n 3780  \t\tend if\n ....\n 3797  \t\tinteger::Bdim(2),Adim(2)\n 3798  \t\tif(A%getRank().ne.2)then\n 3799: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3800: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3801  \t\t\tcall error_stop\n 3802  \t\tend if\n ....\n 3819  \t\tinteger::Bdim(2),Adim(2)\n 3820  \t\tif(A%getRank().ne.2)then\n 3821: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3822: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3823  \t\t\tcall error_stop\n 3824  \t\tend if\n ....\n 3841  \t\tinteger::Bdim(2),Adim(2)\n 3842  \t\tif(A%getRank().ne.2)then\n 3843: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3844: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3845  \t\t\tcall error_stop\n 3846  \t\tend if\n ....\n 3863  \t\tinteger::Bdim(2),Adim(2)\n 3864  \t\tif(A%getRank().ne.2)then\n 3865: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3866: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3867  \t\t\tcall error_stop\n 3868  \t\tend if\n ....\n 3885  \t\tinteger::Bdim(2),Adim(2)\n 3886  \t\tif(A%getRank().ne.2)then\n 3887: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3888: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3889  \t\t\tcall error_stop\n 3890  \t\tend if\n ....\n 3907  \t\tinteger::Bdim(2),Adim(2)\n 3908  \t\tif(A%getRank().ne.2)then\n 3909: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3910: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3911  \t\t\tcall error_stop\n 3912  \t\tend if\n ....\n 3929  \t\tinteger::Bdim(2),Adim(2)\n 3930  \t\tif(A%getRank().ne.2)then\n 3931: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3932: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3933  \t\t\tcall error_stop\n 3934  \t\tend if\n 3935  \t\tif(B%getRank().ne.2)then\n 3936: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3937: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3938  \t\t\tcall error_stop\n 3939  \t\tend if\n ....\n 3956  \t\tinteger::Bdim(2),Adim(2),ib(2),jb(2),total\n 3957  \t\tif(A%getRank().ne.2)then\n 3958: \t\t\tcall writemess('ERROR in SETTing value in Tensor.f90',-1)\n 3959: \t\t\tcall writemess('The rank of the Tensor should be 2',-1)\n 3960  \t\t\tcall error_stop\n 3961  \t\tend if\n ....\n 5005  !**************************************************************************************************************\n 5006  \n 5007: \tsubroutine writemess_Tensor(mess,cpu_number)!overwrite writemess\n 5008  \t\ttype(Tensor),intent(in)::mess\n 5009  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 5018  \t\tw=''\n 5019  \t\tif(.not.mess%getFlag())then\n 5020: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5021  \t\t\treturn\n 5022  \t\tend if\n 5023  \t\ttotoal=mess%getTotalData()\n 5024  \t\tif(totoal.eq.0)then\n 5025: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5026  \t\t\treturn\n 5027  \t\tend if\n ....\n 5031  \t\t\t\tselect case(rank)\n 5032  \t\t\t\t\tcase(1)\n 5033: \t\t\t\t\t\tcall writemess(mess%ii(),cpu_number)\n 5034  \t\t\t\t\tcase(2)\n 5035  \t\t\t\t\t\tcall mess%pointer(idata2)\n 5036  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5037: \t\t\t\t\t\t\tcall writemess(idata2(i,:),cpu_number)\n 5038  \t\t\t\t\t\tend do\n 5039  \t\t\t\t\tcase(3)\n 5040  \t\t\t\t\t\tcall mess%pointer(idata3)\n 5041  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5042: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5043  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5044: \t\t\t\t\t\t\t\tcall writemess(idata3(i,:,j),cpu_number)\n 5045  \t\t\t\t\t\t\tend do\n 5046  \t\t\t\t\t\tend do\n ....\n 5049  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5050  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5051: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5052  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5053: \t\t\t\t\t\t\t\t\tcall writemess(idata4(i,:,j,k),cpu_number)\n 5054  \t\t\t\t\t\t\t\tend do\n 5055  \t\t\t\t\t\t\tend do\n 5056  \t\t\t\t\t\tend do\n 5057  \t\t\t\t\tcase default\n 5058: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5059: \t\t\t\t\t\tcall writemess(mess%ii(),cpu_number)\n 5060: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5061  \t\t\t\t\tend select\n 5062  \t\t\tcase(2)\n 5063  \t\t\t\tselect case(rank)\n 5064  \t\t\t\t\tcase(1)\n 5065: \t\t\t\t\t\tcall writemess(mess%si(),cpu_number)\n 5066  \t\t\t\t\tcase(2)\n 5067  \t\t\t\t\t\tcall mess%pointer(sdata2)\n 5068  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5069: \t\t\t\t\t\t\tcall writemess(sdata2(i,:),cpu_number)\n 5070  \t\t\t\t\t\tend do\n 5071  \t\t\t\t\tcase(3)\n 5072  \t\t\t\t\t\tcall mess%pointer(sdata3)\n 5073  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5074: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5075  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5076: \t\t\t\t\t\t\t\tcall writemess(sdata3(i,:,j),cpu_number)\n 5077  \t\t\t\t\t\t\tend do\n 5078  \t\t\t\t\t\tend do\n ....\n 5081  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5082  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5083: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5084  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5085: \t\t\t\t\t\t\t\t\tcall writemess(sdata4(i,:,j,k),cpu_number)\n 5086  \t\t\t\t\t\t\t\tend do\n 5087  \t\t\t\t\t\t\tend do\n 5088  \t\t\t\t\t\tend do\n 5089  \t\t\t\t\tcase default\n 5090: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5091: \t\t\t\t\t\tcall writemess(mess%si(),cpu_number)\n 5092: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5093  \t\t\t\t\tend select\n 5094  \t\t\tcase(3)\n 5095  \t\t\t\tselect case(rank)\n 5096  \t\t\t\t\tcase(1)\n 5097: \t\t\t\t\t\tcall writemess(mess%di(),cpu_number)\n 5098  \t\t\t\t\tcase(2)\n 5099  \t\t\t\t\t\tcall mess%pointer(ddata2)\n 5100  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5101: \t\t\t\t\t\t\tcall writemess(ddata2(i,:),cpu_number)\n 5102  \t\t\t\t\t\tend do\n 5103  \t\t\t\t\tcase(3)\n 5104  \t\t\t\t\t\tcall mess%pointer(ddata3)\n 5105  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5106: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5107  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5108: \t\t\t\t\t\t\t\tcall writemess(ddata3(i,:,j),cpu_number)\n 5109  \t\t\t\t\t\t\tend do\n 5110  \t\t\t\t\t\tend do\n ....\n 5113  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5114  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5115: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5116  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5117: \t\t\t\t\t\t\t\t\tcall writemess(ddata4(i,:,j,k),cpu_number)\n 5118  \t\t\t\t\t\t\t\tend do\n 5119  \t\t\t\t\t\t\tend do\n 5120  \t\t\t\t\t\tend do\n 5121  \t\t\t\t\tcase default\n 5122: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5123: \t\t\t\t\t\tcall writemess(mess%di(),cpu_number)\n 5124: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5125  \t\t\t\t\tend select\n 5126  \t\t\tcase(4)\n 5127  \t\t\t\tselect case(rank)\n 5128  \t\t\t\t\tcase(1)\n 5129: \t\t\t\t\t\tcall writemess(mess%ci(),cpu_number)\n 5130  \t\t\t\t\tcase(2)\n 5131  \t\t\t\t\t\tcall mess%pointer(cdata2)\n 5132  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5133: \t\t\t\t\t\t\tcall writemess(cdata2(i,:),cpu_number)\n 5134  \t\t\t\t\t\tend do\n 5135  \t\t\t\t\tcase(3)\n 5136  \t\t\t\t\t\tcall mess%pointer(cdata3)\n 5137  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5138: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5139  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5140: \t\t\t\t\t\t\t\tcall writemess(cdata3(i,:,j),cpu_number)\n 5141  \t\t\t\t\t\t\tend do\n 5142  \t\t\t\t\t\tend do\n ....\n 5145  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5146  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5147: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5148  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5149: \t\t\t\t\t\t\t\t\tcall writemess(cdata4(i,:,j,k),cpu_number)\n 5150  \t\t\t\t\t\t\t\tend do\n 5151  \t\t\t\t\t\t\tend do\n 5152  \t\t\t\t\t\tend do\n 5153  \t\t\t\t\tcase default\n 5154: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5155: \t\t\t\t\t\tcall writemess(mess%ci(),cpu_number)\n 5156: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5157  \t\t\t\t\tend select\n 5158  \t\t\tcase(5)\n 5159  \t\t\t\tselect case(rank)\n 5160  \t\t\t\t\tcase(1)\n 5161: \t\t\t\t\t\tcall writemess(mess%zi(),cpu_number)\n 5162  \t\t\t\t\tcase(2)\n 5163  \t\t\t\t\t\tcall mess%pointer(zdata2)\n 5164  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5165: \t\t\t\t\t\t\tcall writemess(zdata2(i,:),cpu_number)\n 5166  \t\t\t\t\t\tend do\n 5167  \t\t\t\t\tcase(3)\n 5168  \t\t\t\t\t\tcall mess%pointer(zdata3)\n 5169  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5170: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5171  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5172: \t\t\t\t\t\t\t\tcall writemess(zdata3(i,:,j),cpu_number)\n 5173  \t\t\t\t\t\t\tend do\n 5174  \t\t\t\t\t\tend do\n ....\n 5177  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5178  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5179: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5180  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5181: \t\t\t\t\t\t\t\t\tcall writemess(zdata4(i,:,j,k),cpu_number)\n 5182  \t\t\t\t\t\t\t\tend do\n 5183  \t\t\t\t\t\t\tend do\n 5184  \t\t\t\t\t\tend do\n 5185  \t\t\t\t\tcase default\n 5186: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5187: \t\t\t\t\t\tcall writemess(mess%zi(),cpu_number)\n 5188: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5189  \t\t\t\t\tend select\n 5190  \t\t\tcase(6)\n 5191  \t\t\t\tselect case(rank)\n 5192  \t\t\t\t\tcase(1)\n 5193: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5194  \t\t\t\t\tcase(2)\n 5195  \t\t\t\t\t\tcall mess%pointer(ldata2)\n 5196  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5197: \t\t\t\t\t\t\tcall writemess(ldata2(i,:),cpu_number)\n 5198  \t\t\t\t\t\tend do\n 5199  \t\t\t\t\tcase(3)\n 5200  \t\t\t\t\t\tcall mess%pointer(ldata3)\n 5201  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5202: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5203  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5204: \t\t\t\t\t\t\t\tcall writemess(ldata3(i,:,j),cpu_number)\n 5205  \t\t\t\t\t\t\tend do\n 5206  \t\t\t\t\t\tend do\n ....\n 5209  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5210  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5211: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5212  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5213: \t\t\t\t\t\t\t\t\tcall writemess(ldata4(i,:,j,k),cpu_number)\n 5214  \t\t\t\t\t\t\t\tend do\n 5215  \t\t\t\t\t\t\tend do\n 5216  \t\t\t\t\t\tend do\n 5217  \t\t\t\t\tcase default\n 5218: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5219: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5220: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5221  \t\t\t\t\tend select\n 5222  \t\t\tcase(7)\n ....\n 5225  \t\t\t\tend do\n 5226  \t\t\t\tw=w+mess%ai(totoal)\n 5227: \t\t\t\tcall writemess(w,cpu_number)\n 5228  \t\tend select\n 5229  \t\treturn\n 5230  \tend subroutine\n 5231  \n 5232: \tsubroutine writemess_Tensor_form(mess,form,cpu_number)!overwrite writemess\n 5233  \t\ttype(Tensor),intent(in)::mess\n 5234  \t\tcharacter(len=*),intent(in)::form\n ....\n 5244  \t\tw=''\n 5245  \t\tif(.not.mess%getFlag())then\n 5246: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5247  \t\t\treturn\n 5248  \t\tend if\n 5249  \t\ttotoal=mess%getTotalData()\n 5250  \t\tif(totoal.eq.0)then\n 5251: \t\t\tcall writemess('There is no data in the Tensor',cpu_number)\n 5252  \t\t\treturn\n 5253  \t\tend if\n ....\n 5257  \t\t\t\tselect case(rank)\n 5258  \t\t\t\t\tcase(1)\n 5259: \t\t\t\t\t\tcall writemess(mess%ii(),form,cpu_number)\n 5260  \t\t\t\t\tcase(2)\n 5261  \t\t\t\t\t\tcall mess%pointer(idata2)\n 5262  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5263: \t\t\t\t\t\t\tcall writemess(idata2(i,:),form,cpu_number)\n 5264  \t\t\t\t\t\tend do\n 5265  \t\t\t\t\tcase(3)\n 5266  \t\t\t\t\t\tcall mess%pointer(idata3)\n 5267  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5268: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5269  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5270: \t\t\t\t\t\t\t\tcall writemess(idata3(i,:,j),form,cpu_number)\n 5271  \t\t\t\t\t\t\tend do\n 5272  \t\t\t\t\t\tend do\n ....\n 5275  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5276  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5277: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5278  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5279: \t\t\t\t\t\t\t\t\tcall writemess(idata4(i,:,j,k),form,cpu_number)\n 5280  \t\t\t\t\t\t\t\tend do\n 5281  \t\t\t\t\t\t\tend do\n 5282  \t\t\t\t\t\tend do\n 5283  \t\t\t\t\tcase default\n 5284: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5285: \t\t\t\t\t\tcall writemess(mess%ii(),form,cpu_number)\n 5286: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5287  \t\t\t\t\tend select\n 5288  \t\t\tcase(2)\n 5289  \t\t\t\tselect case(rank)\n 5290  \t\t\t\t\tcase(1)\n 5291: \t\t\t\t\t\tcall writemess(mess%si(),form,cpu_number)\n 5292  \t\t\t\t\tcase(2)\n 5293  \t\t\t\t\t\tcall mess%pointer(sdata2)\n 5294  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5295: \t\t\t\t\t\t\tcall writemess(sdata2(i,:),form,cpu_number)\n 5296  \t\t\t\t\t\tend do\n 5297  \t\t\t\t\tcase(3)\n 5298  \t\t\t\t\t\tcall mess%pointer(sdata3)\n 5299  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5300: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5301  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5302: \t\t\t\t\t\t\t\tcall writemess(sdata3(i,:,j),form,cpu_number)\n 5303  \t\t\t\t\t\t\tend do\n 5304  \t\t\t\t\t\tend do\n ....\n 5307  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5308  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5309: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5310  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5311: \t\t\t\t\t\t\t\t\tcall writemess(sdata4(i,:,j,k),form,cpu_number)\n 5312  \t\t\t\t\t\t\t\tend do\n 5313  \t\t\t\t\t\t\tend do\n 5314  \t\t\t\t\t\tend do\n 5315  \t\t\t\t\tcase default\n 5316: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5317: \t\t\t\t\t\tcall writemess(mess%si(),form,cpu_number)\n 5318: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5319  \t\t\t\t\tend select\n 5320  \t\t\tcase(3)\n 5321  \t\t\t\tselect case(rank)\n 5322  \t\t\t\t\tcase(1)\n 5323: \t\t\t\t\t\tcall writemess(mess%di(),form,cpu_number)\n 5324  \t\t\t\t\tcase(2)\n 5325  \t\t\t\t\t\tcall mess%pointer(ddata2)\n 5326  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5327: \t\t\t\t\t\t\tcall writemess(ddata2(i,:),form,cpu_number)\n 5328  \t\t\t\t\t\tend do\n 5329  \t\t\t\t\tcase(3)\n 5330  \t\t\t\t\t\tcall mess%pointer(ddata3)\n 5331  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5332: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5333  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5334: \t\t\t\t\t\t\t\tcall writemess(ddata3(i,:,j),form,cpu_number)\n 5335  \t\t\t\t\t\t\tend do\n 5336  \t\t\t\t\t\tend do\n ....\n 5339  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5340  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5341: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5342  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5343: \t\t\t\t\t\t\t\t\tcall writemess(ddata4(i,:,j,k),form,cpu_number)\n 5344  \t\t\t\t\t\t\t\tend do\n 5345  \t\t\t\t\t\t\tend do\n 5346  \t\t\t\t\t\tend do\n 5347  \t\t\t\t\tcase default\n 5348: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5349: \t\t\t\t\t\tcall writemess(mess%di(),form,cpu_number)\n 5350: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5351  \t\t\t\t\tend select\n 5352  \t\t\tcase(4)\n 5353  \t\t\t\tselect case(rank)\n 5354  \t\t\t\t\tcase(1)\n 5355: \t\t\t\t\t\tcall writemess(mess%ci(),form,cpu_number)\n 5356  \t\t\t\t\tcase(2)\n 5357  \t\t\t\t\t\tcall mess%pointer(cdata2)\n 5358  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5359: \t\t\t\t\t\t\tcall writemess(cdata2(i,:),form,cpu_number)\n 5360  \t\t\t\t\t\tend do\n 5361  \t\t\t\t\tcase(3)\n 5362  \t\t\t\t\t\tcall mess%pointer(cdata3)\n 5363  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5364: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5365  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5366: \t\t\t\t\t\t\t\tcall writemess(cdata3(i,:,j),form,cpu_number)\n 5367  \t\t\t\t\t\t\tend do\n 5368  \t\t\t\t\t\tend do\n ....\n 5371  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5372  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5373: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5374  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5375: \t\t\t\t\t\t\t\t\tcall writemess(cdata4(i,:,j,k),form,cpu_number)\n 5376  \t\t\t\t\t\t\t\tend do\n 5377  \t\t\t\t\t\t\tend do\n 5378  \t\t\t\t\t\tend do\n 5379  \t\t\t\t\tcase default\n 5380: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5381: \t\t\t\t\t\tcall writemess(mess%ci(),form,cpu_number)\n 5382: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5383  \t\t\t\t\tend select\n 5384  \t\t\tcase(5)\n 5385  \t\t\t\tselect case(rank)\n 5386  \t\t\t\t\tcase(1)\n 5387: \t\t\t\t\t\tcall writemess(mess%zi(),form,cpu_number)\n 5388  \t\t\t\t\tcase(2)\n 5389  \t\t\t\t\t\tcall mess%pointer(zdata2)\n 5390  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5391: \t\t\t\t\t\t\tcall writemess(zdata2(i,:),form,cpu_number)\n 5392  \t\t\t\t\t\tend do\n 5393  \t\t\t\t\tcase(3)\n 5394  \t\t\t\t\t\tcall mess%pointer(zdata3)\n 5395  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5396: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5397  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5398: \t\t\t\t\t\t\t\tcall writemess(zdata3(i,:,j),form,cpu_number)\n 5399  \t\t\t\t\t\t\tend do\n 5400  \t\t\t\t\t\tend do\n ....\n 5403  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5404  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5405: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5406  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5407: \t\t\t\t\t\t\t\t\tcall writemess(zdata4(i,:,j,k),form,cpu_number)\n 5408  \t\t\t\t\t\t\t\tend do\n 5409  \t\t\t\t\t\t\tend do\n 5410  \t\t\t\t\t\tend do\n 5411  \t\t\t\t\tcase default\n 5412: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5413: \t\t\t\t\t\tcall writemess(mess%zi(),form,cpu_number)\n 5414: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5415  \t\t\t\t\tend select\n 5416  \t\t\tcase(6)\n 5417  \t\t\t\tselect case(rank)\n 5418  \t\t\t\t\tcase(1)\n 5419: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5420  \t\t\t\t\tcase(2)\n 5421  \t\t\t\t\t\tcall mess%pointer(ldata2)\n 5422  \t\t\t\t\t\tdo i=1,mess%dim(1)\n 5423: \t\t\t\t\t\t\tcall writemess(ldata2(i,:),cpu_number)\n 5424  \t\t\t\t\t\tend do\n 5425  \t\t\t\t\tcase(3)\n 5426  \t\t\t\t\t\tcall mess%pointer(ldata3)\n 5427  \t\t\t\t\t\tdo j=1,mess%dim(3)\n 5428: \t\t\t\t\t\t\tcall writemess('(*,*,'+j+')') \n 5429  \t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5430: \t\t\t\t\t\t\t\tcall writemess(ldata3(i,:,j),cpu_number)\n 5431  \t\t\t\t\t\t\tend do\n 5432  \t\t\t\t\t\tend do\n ....\n 5435  \t\t\t\t\t\tdo k=1,mess%dim(4)\n 5436  \t\t\t\t\t\t\tdo j=1,mess%dim(3)\n 5437: \t\t\t\t\t\t\t\tcall writemess('(*,*,'+j+','+k+')') \n 5438  \t\t\t\t\t\t\t\tdo i=1,mess%dim(2)\n 5439: \t\t\t\t\t\t\t\t\tcall writemess(ldata4(i,:,j,k),cpu_number)\n 5440  \t\t\t\t\t\t\t\tend do\n 5441  \t\t\t\t\t\t\tend do\n 5442  \t\t\t\t\t\tend do\n 5443  \t\t\t\t\tcase default\n 5444: \t\t\t\t\t\tcall writemess('The Tensor Data are:',cpu_number)\n 5445: \t\t\t\t\t\tcall writemess(mess%li(),cpu_number)\n 5446: \t\t\t\t\t\tcall writemess(mess%TenDim,cpu_number)\n 5447  \t\t\t\t\tend select\n 5448  \t\t\tcase(7)\n ....\n 5451  \t\t\t\tend do\n 5452  \t\t\t\tw=w+mess%ai(totoal)\n 5453: \t\t\t\tcall writemess(w,cpu_number)\n 5454  \t\tend select\n 5455  \t\treturn\n ....\n 5666  \t\tread(uni,*)notused\n 5667  \t\tif(notused.ne.'readable')then\n 5668: \t\t\tcall writemess(\"error in reading\",-1)\n 5669  \t\t\tcall error_stop()\n 5670  \t\tend if\n ....\n 5739  \t\tlogical,pointer::ldata(:,:),lldata(:)\n 5740  \t\tif(T%getRank().gt.2)then\n 5741: \t\t\tcall writemess('ERROR in reading data, only allow for rank<=2 Tensor',-1)\n 5742  \t\t\tcall error_stop\n 5743  \t\tend if\n ....\n 5758  \t\t\t\t\tnullify(dddata)\n 5759  \t\t\t\tcase(4)\n 5760: \t\t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5761: \t\t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5762: \t\t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5763: \t\t\t\t\tcall writemess('for example:A and B are real*4 Tensor.',-1)\n 5764: \t\t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5765: \t\t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5766: \t\t\t\t\tcall writemess(' C=cmplex(A,B).',-1)\n 5767  \t\t\t\t\tcall error_stop\n 5768  \t\t\t\tcase(5)\n 5769: \t\t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5770: \t\t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5771: \t\t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5772: \t\t\t\t\tcall writemess('for example:A and B are real*8 Tensor.',-1)\n 5773: \t\t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5774: \t\t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5775: \t\t\t\t\tcall writemess(' C=dcmplex(A,B).',-1)\n 5776  \t\t\t\t\tcall error_stop\n 5777  \t\t\t\tcase(6)\n ....\n 5809  \t\t\t\tnullify(ddata)\n 5810  \t\t\tcase(4)\n 5811: \t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5812: \t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5813: \t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5814: \t\t\t\tcall writemess('for example:A and B are real*4 Tensor.',-1)\n 5815: \t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5816: \t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5817: \t\t\t\tcall writemess(' C=cmplex(A,B).',-1)\n 5818  \t\t\t\tcall error_stop\n 5819  \t\t\tcase(5)\n 5820: \t\t\t\tcall writemess('ERROR in reading data, Tensor',-1)\n 5821: \t\t\t\tcall writemess('Do not finished for complex data yet',-1)\n 5822: \t\t\t\tcall writemess('You can real two real data and combine them into a complex one',-1)\n 5823: \t\t\t\tcall writemess('for example:A and B are real*8 Tensor.',-1)\n 5824: \t\t\t\tcall writemess(' call A%readData(unit1).',-1)\n 5825: \t\t\t\tcall writemess(' call B%readData(unit2).',-1)\n 5826: \t\t\t\tcall writemess(' C=dcmplex(A,B).',-1)\n 5827  \t\t\t\tcall error_stop\n 5828  \t\t\tcase(6)\n ....\n 6228  \t\tCHARACTER(len=*),optional,intent(in)::words\n 6229  \t\tCHARACTER(len=20)::classTypeChar\n 6230: \t\tcall writemess(\"==================\",-1)\n 6231: \t\tcall writemess(\"------------------\",-1)\n 6232: \t\tcall writemess(words)\n 6233  \t\tif(getflag(T)) then!if1\n 6234: \t\t\tcall writemess(\"*** START ***\",-1)\n 6235  \t\t\tclassTypeChar=getclassType(T)\n 6236  \t\t\tif(ifDynamic(T))then\n 6237: \t\t\t\tcall writemess('Dynamic class Tensor,data type is '+(' '+classTypeChar),-1)\n 6238  \t\t\telse\n 6239: \t\t\t\tcall writemess('static class Tensor,data type is '+(' '+classTypeChar),-1)\n 6240  \t\t\tend if\n 6241: \t\t\tcall writemess(\"The rank of the Tensor is\",-1)\n 6242: \t\t\tcall writemess(''+T%rank)\n 6243: \t\t\tcall writemess(\"The number of  data of the Tensor is\",-1)\n 6244: \t\t\tcall writemess(''+getTotalData(T),-1)\n 6245  \t\t\tcall T%TenDim%print()\n 6246: \t\t\tcall writemess( \"***end***\",-1)\n 6247: \t\t\tcall writemess(\"\",-1)\n 6248  \t\telse!if1\n 6249: \t\t\tcall writemess(\"There is no data\",-1)\n 6250  \t\tend if!if1\n 6251  \t\treturn\n ....\n 6297  \t\tinteger,intent(in) :: inde\n 6298  \t\tif(.not.T%getFlag())then\n 6299: \t\t\tcall writemess('There is no data in the Tensor, when getting the ith dimension. ith='+inde,-1)\n 6300  \t\t\tcall error_stop()\n 6301  \t\tend if\n ....\n 6308  \t\tinteger :: inde\n 6309  \t\tif(.not.T%getFlag())then\n 6310: \t\t\tcall writemess('There is no data in the Tensor, when getting the dimension whose name is :'+w,-1)\n 6311  \t\t\tcall error_stop()\n 6312  \t\tend if\n ....\n 6322  \t\tclass(Tensor),intent(in) :: T\n 6323  \t\tif(.not.T%getFlag())then\n 6324: \t\t\tcall writemess('There is no data in the Tensor, when getting type(dimension)',-1)\n 6325  \t\t\tcall error_stop()\n 6326  \t\tend if\n ....\n 6332  \t\tclass(Tensor),intent(in) :: T\n 6333  \t\tif(.not.T%getFlag())then\n 6334: \t\t\tcall writemess('There is no data in the Tensor, when getting dimension',-1)\n 6335  \t\t\tcall error_stop()\n 6336  \t\tend if\n ....\n 6343  \t\tinteger,intent(in)::inde\n 6344  \t\tif(.not.T%getFlag())then\n 6345: \t\t\tcall writemess('There is no data in the Tensor, when getting sub type(dimension)',-1)\n 6346  \t\t\tcall error_stop()\n 6347  \t\tend if\n ....\n 6353  \t\tinteger,intent(in)::inde(2)\n 6354  \t\tif(.not.T%getFlag())then\n 6355: \t\t\tcall writemess('There is no data in the Tensor, when getting sub type(dimension)',-1)\n 6356  \t\t\tcall error_stop()\n 6357  \t\tend if\n ....\n 6364  \t\tinteger::inde\n 6365  \t\tif(.not.T%getFlag())then\n 6366: \t\t\tcall writemess('There is no data in the Tensor, when getting type(dimension)',-1)\n 6367  \t\t\tcall error_stop()\n 6368  \t\tend if\n ....\n 6668  \t\tif(T%rank.eq.1)then\n 6669  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6670: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6671  \t\t\t\tcall error_stop()\n 6672  \t\t\tend if\n ....\n 6676  \t\tif(T%rank.eq.2)then\n 6677  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6678: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6679  \t\t\t\tcall error_stop()\n 6680  \t\t\tend if\n ....\n 6684  \t\tif(T%rank.eq.3)then\n 6685  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6686: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6687  \t\t\t\tcall error_stop()\n 6688  \t\t\tend if\n ....\n 6692  \t\tif(T%rank.eq.4)then\n 6693  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6694: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6695  \t\t\t\tcall error_stop()\n 6696  \t\t\tend if\n ....\n 6700  \t\tinde=addressToIndes(T,Tdim)\n 6701  \t\tif(inde.gt.getTotalData(T))Then\n 6702: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6703  \t\t\tcall error_stop()\n 6704  \t\tend if\n ....\n 6716  \t\tif(T%rank.eq.1)then\n 6717  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6718: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6719  \t\t\t\tcall error_stop()\n 6720  \t\t\tend if\n ....\n 6724  \t\tif(T%rank.eq.2)then\n 6725  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6726: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6727  \t\t\t\tcall error_stop()\n 6728  \t\t\tend if\n ....\n 6732  \t\tif(T%rank.eq.3)then\n 6733  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6734: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6735  \t\t\t\tcall error_stop()\n 6736  \t\t\tend if\n ....\n 6740  \t\tif(T%rank.eq.4)then\n 6741  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6742: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6743  \t\t\t\tcall error_stop()\n 6744  \t\t\tend if\n ....\n 6748  \t\tinde=addressToIndes(T,Tdim)\n 6749  \t\tif(inde.gt.getTotalData(T))Then\n 6750: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6751  \t\t\tcall error_stop()\n 6752  \t\tend if\n ....\n 6764  \t\tif(T%rank.eq.1)then\n 6765  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6766: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6767  \t\t\t\tcall error_stop()\n 6768  \t\t\tend if\n ....\n 6772  \t\tif(T%rank.eq.2)then\n 6773  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6774: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6775  \t\t\t\tcall error_stop()\n 6776  \t\t\tend if\n ....\n 6780  \t\tif(T%rank.eq.3)then\n 6781  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6782: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6783  \t\t\t\tcall error_stop()\n 6784  \t\t\tend if\n ....\n 6788  \t\tif(T%rank.eq.4)then\n 6789  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6790: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6791  \t\t\t\tcall error_stop()\n 6792  \t\t\tend if\n ....\n 6796  \t\tinde=addressToIndes(T,Tdim)\n 6797  \t\tif(inde.gt.getTotalData(T))Then\n 6798: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6799  \t\t\tcall error_stop()\n 6800  \t\tend if\n ....\n 6813  \t\tif(T%rank.eq.1)then\n 6814  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6815: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6816  \t\t\t\tcall error_stop()\n 6817  \t\t\tend if\n ....\n 6821  \t\tif(T%rank.eq.2)then\n 6822  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6823: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6824  \t\t\t\tcall error_stop()\n 6825  \t\t\tend if\n ....\n 6829  \t\tif(T%rank.eq.3)then\n 6830  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6831: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6832  \t\t\t\tcall error_stop()\n 6833  \t\t\tend if\n ....\n 6837  \t\tif(T%rank.eq.4)then\n 6838  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6839: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6840  \t\t\t\tcall error_stop()\n 6841  \t\t\tend if\n ....\n 6845  \t\tinde=addressToIndes(T,Tdim)\n 6846  \t\tif(inde.gt.getTotalData(T))Then\n 6847: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6848  \t\t\tcall error_stop()\n 6849  \t\tend if\n ....\n 6861  \t\tif(T%rank.eq.1)then\n 6862  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6863: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6864: \t\t\t\tcall writemess(\"you have input:\"+Tdim(1))\n 6865  \t\t\t\tcall error_stop()\n 6866  \t\t\tend if\n ....\n 6870  \t\tif(T%rank.eq.2)then\n 6871  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6872: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6873: \t\t\t\tcall writemess(\"you have input:(\"+Tdim(1)+\",\"+Tdim(2)+\")\")\n 6874: \t\t\t\tcall writemess(\"dimension of T is input:(\"+(T.dim.1)+\",\"+(T.dim.2)+\")\")\n 6875  \t\t\t\tcall error_stop()\n 6876  \t\t\tend if\n ....\n 6880  \t\tif(T%rank.eq.3)then\n 6881  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6882: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6883  \t\t\t\tcall error_stop()\n 6884  \t\t\tend if\n ....\n 6888  \t\tif(T%rank.eq.4)then\n 6889  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6890: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6891  \t\t\t\tcall error_stop()\n 6892  \t\t\tend if\n ....\n 6896  \t\tinde=addressToIndes(T,Tdim)\n 6897  \t\tif(inde.gt.getTotalData(T))Then\n 6898: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6899  \t\t\tcall error_stop()\n 6900  \t\tend if\n ....\n 6912  \t\tif(T%rank.eq.1)then\n 6913  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6914: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6915  \t\t\t\tcall error_stop()\n 6916  \t\t\tend if\n ....\n 6920  \t\tif(T%rank.eq.2)then\n 6921  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6922: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6923  \t\t\t\tcall error_stop()\n 6924  \t\t\tend if\n ....\n 6928  \t\tif(T%rank.eq.3)then\n 6929  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6930: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6931  \t\t\t\tcall error_stop()\n 6932  \t\t\tend if\n ....\n 6936  \t\tif(T%rank.eq.4)then\n 6937  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6938: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6939  \t\t\t\tcall error_stop()\n 6940  \t\t\tend if\n ....\n 6944  \t\tinde=addressToIndes(T,Tdim)\n 6945  \t\tif(inde.gt.getTotalData(T))Then\n 6946: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6947  \t\t\tcall error_stop()\n 6948  \t\tend if\n ....\n 6961  \t\tif(T%rank.eq.1)then\n 6962  \t\t\tif(Tdim(1).gt.getTotalData(T))Then\n 6963: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6964  \t\t\t\tcall error_stop()\n 6965  \t\t\tend if\n ....\n 6969  \t\tif(T%rank.eq.2)then\n 6970  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)) )Then\n 6971: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6972  \t\t\t\tcall error_stop()\n 6973  \t\t\tend if\n ....\n 6977  \t\tif(T%rank.eq.3)then\n 6978  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt. (T.dim.2)).or. (Tdim(3).gt.(T.dim.3)))Then\n 6979: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6980  \t\t\t\tcall error_stop()\n 6981  \t\t\tend if\n ....\n 6985  \t\tif(T%rank.eq.4)then\n 6986  \t\t\tif( (Tdim(1).gt.(T.dim.1)) .or. (Tdim(2).gt.(T.dim.2)).or.(Tdim(3).gt.(T.dim.3)).or.(Tdim(4).gt.(T.dim.4)) )Then\n 6987: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6988  \t\t\t\tcall error_stop()\n 6989  \t\t\tend if\n ....\n 6993  \t\tinde=addressToIndes(T,Tdim)\n 6994  \t\tif(inde.gt.getTotalData(T))Then\n 6995: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(T),-1)\n 6996  \t\t\tcall error_stop()\n 6997  \t\tend if\n ....\n 7018  \t\t\t\tElement=T%ai(Tdim)\n 7019  \t\t\tcase default\n 7020: \t\t\t\tcall writemess(\"ERROR in TElement\",-1)\n 7021  \t\t\t\tcall error_stop()\n 7022  \t\tend select\n ....\n 7042  \t\t\t\tElement=T%ai(Tdim)\n 7043  \t\t\tcase default\n 7044: \t\t\t\tcall writemess(\"ERROR in TElement\",-1)\n 7045  \t\t\t\tcall error_stop()\n 7046  \t\tend select\n ....\n 7640  \t\tlens=getTotalData(s)\n 7641  \t\tif(s%getRank().ne.1)then\n 7642: \t\t\tcall writemess('ERROR in eye(T), input T should be a vector(rank=1)')\n 7643  \t\t\tcall s%diminfo()\n 7644  \t\t\tcall error_stop\n ....\n 7663  \t\trank=T%getRank()\n 7664  \t\tif(rank.ne.2)then\n 7665: \t\t\tcall writemess(\"ERROR in set eye in Tensor,input should be a matrix\",-1)\n 7666  \t\t\tcall error_stop()\n 7667  \t\tend if\n ....\n 7845  \t\tif(Ten%rank.eq.1) then\n 7846  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 7847: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7848  \t\t\t\tcall error_stop()\n 7849  \t\t\tend if\n ....\n 7855  \t\tif(Ten%rank.eq.2) then\n 7856  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 7857: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7858  \t\t\t\tcall error_stop()\n 7859  \t\t\tend if\n ....\n 7865  \t\tif(Ten%rank.eq.3) then\n 7866  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 7867: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7868  \t\t\t\tcall error_stop()\n 7869  \t\t\tend if\n ....\n 7876  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 7877  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 7878: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7879  \t\t\t\tcall error_stop()\n 7880  \t\t\tend if\n ....\n 7886  \t\taddre=addressToIndes(Ten,dimen)\n 7887  \t\tif(addre.gt.getTotalData(Ten))Then\n 7888: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7889  \t\t\tcall error_stop()\n 7890  \t\tend if\n ....\n 7901  \t\tif(Ten%rank.eq.1) then\n 7902  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 7903: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7904  \t\t\t\tcall error_stop()\n 7905  \t\t\tend if\n ....\n 7911  \t\tif(Ten%rank.eq.2) then\n 7912  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 7913: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7914  \t\t\t\tcall error_stop()\n 7915  \t\t\tend if\n ....\n 7921  \t\tif(Ten%rank.eq.3) then\n 7922  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 7923: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7924  \t\t\t\tcall error_stop()\n 7925  \t\t\tend if\n ....\n 7932  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 7933  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 7934: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7935  \t\t\t\tcall error_stop()\n 7936  \t\t\tend if\n ....\n 7942  \t\taddre=addressToIndes(Ten,dimen)\n 7943  \t\tif(addre.gt.getTotalData(Ten))Then\n 7944: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7945  \t\t\tcall error_stop()\n 7946  \t\tend if\n ....\n 7957  \t\tif(Ten%rank.eq.1) then\n 7958  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 7959: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7960  \t\t\t\tcall error_stop()\n 7961  \t\t\tend if\n ....\n 7967  \t\tif(Ten%rank.eq.2) then\n 7968  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 7969: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7970  \t\t\t\tcall error_stop()\n 7971  \t\t\tend if\n ....\n 7977  \t\tif(Ten%rank.eq.3) then\n 7978  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 7979: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7980  \t\t\t\tcall error_stop()\n 7981  \t\t\tend if\n ....\n 7988  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 7989  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 7990: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 7991  \t\t\t\tcall error_stop()\n 7992  \t\t\tend if\n ....\n 7998  \t\taddre=addressToIndes(Ten,dimen)\n 7999  \t\tif(addre.gt.getTotalData(Ten))Then\n 8000: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8001  \t\t\tcall error_stop()\n 8002  \t\tend if\n ....\n 8013  \t\tif(Ten%rank.eq.1) then\n 8014  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8015: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8016  \t\t\t\tcall error_stop()\n 8017  \t\t\tend if\n ....\n 8023  \t\tif(Ten%rank.eq.2) then\n 8024  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8025: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8026  \t\t\t\tcall error_stop()\n 8027  \t\t\tend if\n ....\n 8033  \t\tif(Ten%rank.eq.3) then\n 8034  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8035: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8036  \t\t\t\tcall error_stop()\n 8037  \t\t\tend if\n ....\n 8044  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8045  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8046: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8047  \t\t\t\tcall error_stop()\n 8048  \t\t\tend if\n ....\n 8054  \t\taddre=addressToIndes(Ten,dimen)\n 8055  \t\tif(addre.gt.getTotalData(Ten))Then\n 8056: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8057  \t\t\tcall error_stop()\n 8058  \t\tend if\n ....\n 8069  \t\tif(Ten%rank.eq.1) then\n 8070  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8071: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8072  \t\t\t\tcall error_stop()\n 8073  \t\t\tend if\n ....\n 8079  \t\tif(Ten%rank.eq.2) then\n 8080  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8081: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8082  \t\t\t\tcall error_stop()\n 8083  \t\t\tend if\n ....\n 8089  \t\tif(Ten%rank.eq.3) then\n 8090  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8091: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8092  \t\t\t\tcall error_stop()\n 8093  \t\t\tend if\n ....\n 8100  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8101  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8102: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8103  \t\t\t\tcall error_stop()\n 8104  \t\t\tend if\n ....\n 8110  \t\taddre=addressToIndes(Ten,dimen)\n 8111  \t\tif(addre.gt.getTotalData(Ten))Then\n 8112: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8113  \t\t\tcall error_stop()\n 8114  \t\tend if\n ....\n 8125  \t\tif(Ten%rank.eq.1) then\n 8126  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8127: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8128  \t\t\t\tcall error_stop()\n 8129  \t\t\tend if\n ....\n 8135  \t\tif(Ten%rank.eq.2) then\n 8136  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8137: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8138  \t\t\t\tcall error_stop()\n 8139  \t\t\tend if\n ....\n 8145  \t\tif(Ten%rank.eq.3) then\n 8146  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8147: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8148  \t\t\t\tcall error_stop()\n 8149  \t\t\tend if\n ....\n 8156  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8157  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8158: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8159  \t\t\t\tcall error_stop()\n 8160  \t\t\tend if\n ....\n 8166  \t\taddre=addressToIndes(Ten,dimen)\n 8167  \t\tif(addre.gt.getTotalData(Ten))Then\n 8168: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8169  \t\t\tcall error_stop()\n 8170  \t\tend if\n ....\n 8181  \t\tif(Ten%rank.eq.1) then\n 8182  \t\t\tif(dimen(1).gt.getTotalData(Ten))Then\n 8183: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8184  \t\t\t\tcall error_stop()\n 8185  \t\t\tend if\n ....\n 8191  \t\tif(Ten%rank.eq.2) then\n 8192  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt.(Ten.dim.2)))Then\n 8193: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8194  \t\t\t\tcall error_stop()\n 8195  \t\t\tend if\n ....\n 8201  \t\tif(Ten%rank.eq.3) then\n 8202  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3)))Then\n 8203: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8204  \t\t\t\tcall error_stop()\n 8205  \t\t\tend if\n ....\n 8212  \t\t\tif( (dimen(1).gt.(Ten.dim.1)) .or. (dimen(2).gt. (Ten.dim.2)).or. (dimen(3).gt.(Ten.dim.3))&\n 8213  \t\t\t\t.or.(dimen(4).gt.(Ten.dim.4)))Then\n 8214: \t\t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8215  \t\t\t\tcall error_stop()\n 8216  \t\t\tend if\n ....\n 8222  \t\taddre=addressToIndes(Ten,dimen)\n 8223  \t\tif(addre.gt.getTotalData(Ten))Then\n 8224: \t\t\tcall writemess(\"Index is larger than the len of Tensor,totalData=\"+getTotalData(Ten),-1)\n 8225  \t\t\tcall error_stop()\n 8226  \t\tend if\n ....\n 8236  \t\ttype(Tensor),intent(in)::val\n 8237  \t\tif(val%getTotalData().ne.1)then\n 8238: \t\t\tcall writemess(\"Do no finished this case, in modifyTen_val_Tensor\",-1)\n 8239  \t\t\tcall error_stop()\n 8240  \t\tend if\n 8241  \t\tif(.not.val%getFlag())then\n 8242: \t\t\tcall writemess(\"There is no data in input element, setValue(element)\",-1)\n 8243  \t\t\tcall error_stop()\n 8244  \t\tend if\t\n ....\n 8259  \t\t\t\tcall modifyTen_val_class_a(Ten,dimen,val%ai(1))\n 8260  \t\t\tcase default\n 8261: \t\t\t\tcall writemess(\"ERROR in modifyTen_val_Tensor\",-1)\n 8262  \t\t\t\tcall error_stop()\n 8263  \t\tend select\n ....\n 8370  \t\tclass(Tensor),intent(in)::val\n 8371  \t\tif(val%getTotalData().ne.1)then\n 8372: \t\t\tcall writemess(\"Do no finished this case, in modifyTen_val_Tensor\",-1)\n 8373  \t\t\tcall error_stop()\n 8374  \t\tend if\n ....\n 8389  \t\t\t\tcall modifyTen_val_class(Ten,(/dimen/),val%ai(1))\n 8390  \t\t\tcase default\n 8391: \t\t\t\tcall writemess(\"ERROR in modifyTen_val_Tensor\",-1)\n 8392  \t\t\t\tcall error_stop()\n 8393  \t\tend select\n ....\n 8429  \t\tinteger::classtype\n 8430  \t\tif((.not.T1%getflag()).or.(.not.T2%getflag()))then\n 8431: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8432  \t\t\tcall error_stop()\n 8433  \t\tend if\n ....\n 8435  \t\tdim2=T2%TenDim\n 8436  \t\tif(T1%getTotalData().ne.T2%getTotalData()) then\n 8437: \t\t\tcall writemess(\"The totalData of T1 and T2 are not the same,(+)\",-1)\n 8438: \t\t\tcall writemess(T1%getTotalData()+','+T2%getTotalData(),-1)\n 8439: \t\t\tcall writemess(\"The program will stop\",-1)\n 8440  \t\t\tcall error_stop()\n 8441  \t\tend if\n ....\n 8451  \t\tinteger::classtype\n 8452  \t\tif(.not.T1%getflag())then\n 8453: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8454  \t\t\tcall error_stop()\n 8455  \t\tend if\n ....\n 8465  \t\tinteger::classtype\n 8466  \t\tif(.not.T1%getflag())then\n 8467: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8468  \t\t\tcall error_stop()\n 8469  \t\tend if\n ....\n 8479  \t\tinteger::classtype\n 8480  \t\tif(.not.T1%getflag())then\n 8481: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8482  \t\t\tcall error_stop()\n 8483  \t\tend if\n ....\n 8493  \t\tinteger::classtype\n 8494  \t\tif(.not.T1%getflag())then\n 8495: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8496  \t\t\tcall error_stop()\n 8497  \t\tend if\n ....\n 8507  \t\tinteger::classtype\n 8508  \t\tif(.not.T1%getflag())then\n 8509: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8510  \t\t\tcall error_stop()\n 8511  \t\tend if\n ....\n 8521  \t\tinteger::classtype\n 8522  \t\tif(.not.T1%getflag())then\n 8523: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8524  \t\t\tcall error_stop()\n 8525  \t\tend if\n ....\n 8535  \t\tinteger::classtype\n 8536  \t\tif(.not.T1%getflag())then\n 8537: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8538  \t\t\tcall error_stop()\n 8539  \t\tend if\n ....\n 8549  \t\tinteger::classtype\n 8550  \t\tif(.not.T1%getflag())then\n 8551: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8552  \t\t\tcall error_stop()\n 8553  \t\tend if\n ....\n 8563  \t\tinteger::classtype\n 8564  \t\tif(.not.T1%getflag())then\n 8565: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8566  \t\t\tcall error_stop()\n 8567  \t\tend if\n ....\n 8577  \t\tinteger::classtype\n 8578  \t\tif(.not.T1%getflag())then\n 8579: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8580  \t\t\tcall error_stop()\n 8581  \t\tend if\n ....\n 8591  \t\tinteger::classtype\n 8592  \t\tif(.not.T1%getflag())then\n 8593: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8594  \t\t\tcall error_stop()\n 8595  \t\tend if\n ....\n 8605  \t\tinteger::classtype\n 8606  \t\tif(.not.T1%getflag())then\n 8607: \t\t\tcall writemess(\"There is no data in the Tensor,(+)\",-1)\n 8608  \t\t\tcall error_stop()\n 8609  \t\tend if\n ....\n 8618  \t\tinteger::classtype\n 8619  \t\tif((.not.T1%getflag()).or.(.not.T2%getflag()))then\n 8620: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8621  \t\t\tcall error_stop()\n 8622  \t\tend if\n ....\n 8624  \t\tdim2=T2%TenDim\n 8625  \t\tif(.not.(dim1.equ.dim2)) then\n 8626: \t\t\tcall writemess(\"The dimension of T1 and T2 are not the same,in (-)\")\n 8627: \t\t\tcall writemess(\"The program will stop\")\n 8628  \t\t\tcall error_stop()\n 8629  \t\tend if\n ....\n 8639  \t\tinteger::classtype\n 8640  \t\tif(.not.T1%getflag())then\n 8641: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\")\n 8642  \t\t\tcall error_stop()\n 8643  \t\tend if\n ....\n 8653  \t\tinteger::classtype\n 8654  \t\tif(.not.T1%getflag())then\n 8655: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\")\n 8656  \t\t\tcall error_stop()\n 8657  \t\tend if\n ....\n 8667  \t\tinteger::classtype\n 8668  \t\tif(.not.T1%getflag())then\n 8669: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\")\n 8670  \t\t\tcall error_stop()\n 8671  \t\tend if\n ....\n 8681  \t\tinteger::classtype\n 8682  \t\tif(.not.T1%getflag())then\n 8683: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8684  \t\t\tcall error_stop()\n 8685  \t\tend if\n ....\n 8695  \t\tinteger::classtype\n 8696  \t\tif(.not.T1%getflag())then\n 8697: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8698  \t\t\tcall error_stop()\n 8699  \t\tend if\n ....\n 8709  \t\tinteger::classtype\n 8710  \t\tif(.not.T1%getflag())then\n 8711: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8712  \t\t\tcall error_stop()\n 8713  \t\tend if\n ....\n 8723  \t\tinteger::classtype\n 8724  \t\tif(.not.T1%getflag())then\n 8725: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8726  \t\t\tcall error_stop()\n 8727  \t\tend if\n ....\n 8737  \t\tinteger::classtype\n 8738  \t\tif(.not.T1%getflag())then\n 8739: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8740  \t\t\tcall error_stop()\n 8741  \t\tend if\n ....\n 8751  \t\tinteger::classtype\n 8752  \t\tif(.not.T1%getflag())then\n 8753: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8754  \t\t\tcall error_stop()\n 8755  \t\tend if\n ....\n 8765  \t\tinteger::classtype\n 8766  \t\tif(.not.T1%getflag())then\n 8767: \t\t\tcall writemess(\"There is no data in the Tensor,(-)\",-1)\n 8768  \t\t\tcall error_stop()\n 8769  \t\tend if\n ....\n 8780  \t\tinteger::classtype\n 8781  \t\tif(.not.T1%getflag())then\n 8782: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8783  \t\t\tcall error_stop()\n 8784  \t\tend if\n ....\n 8793  \t\tinteger::classtype\n 8794  \t\tif(.not.T1%getflag())then\n 8795: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8796  \t\t\tcall error_stop()\n 8797  \t\tend if\n ....\n 8806  \t\tinteger::classtype\n 8807  \t\tif(.not.T1%getflag())then\n 8808: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8809  \t\t\tcall error_stop()\n 8810  \t\tend if\n ....\n 8819  \t\tinteger::classtype\n 8820  \t\tif(.not.T1%getflag())then\n 8821: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8822  \t\t\tcall error_stop()\n 8823  \t\tend if\n ....\n 8832  \t\tinteger::classtype\n 8833  \t\tif(.not.T1%getflag())then\n 8834: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8835  \t\t\tcall error_stop()\n 8836  \t\tend if\n ....\n 8846  \t\tinteger::classtype\n 8847  \t\tif(.not.T1%getflag())then\n 8848: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8849  \t\t\tcall error_stop()\n 8850  \t\tend if\n ....\n 8859  \t\tinteger::classtype\n 8860  \t\tif(.not.T1%getflag())then\n 8861: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8862  \t\t\tcall error_stop()\n 8863  \t\tend if\n ....\n 8872  \t\tinteger::classtype\n 8873  \t\tif(.not.T1%getflag())then\n 8874: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8875  \t\t\tcall error_stop()\n 8876  \t\tend if\n ....\n 8885  \t\tinteger::classtype\n 8886  \t\tif(.not.T1%getflag())then\n 8887: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8888  \t\t\tcall error_stop()\n 8889  \t\tend if\n ....\n 8898  \t\tinteger::classtype\n 8899  \t\tif(.not.T1%getflag())then\n 8900: \t\t\tcall writemess(\"There is no data in the Tensor,(*)\",-1)\n 8901  \t\t\tcall error_stop()\n 8902  \t\tend if\n ....\n 8914  \t\tinteger::classtype\n 8915  \t\tif(T%getTotalData().ne.1)then\n 8916: \t\t\tcall writemess(\"ERROR in T1/T2, T2 should be lengh=1\",-1)\n 8917  \t\t\tcall error_stop()\n 8918  \t\tend if\n ....\n 8927  \t\tinteger::classtype,Aclasstype\n 8928  \t\tif(T%getTotalData().ne.1)then\n 8929: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8930  \t\t\tcall error_stop()\n 8931  \t\tend if\n ....\n 8941  \t\tinteger::classtype,Aclasstype\n 8942  \t\tif(T%getTotalData().ne.1)then\n 8943: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8944  \t\t\tcall error_stop()\n 8945  \t\tend if\n ....\n 8955  \t\tinteger::classtype,Aclasstype\n 8956  \t\tif(T%getTotalData().ne.1)then\n 8957: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8958  \t\t\tcall error_stop()\n 8959  \t\tend if\n ....\n 8969  \t\tinteger::classtype,Aclasstype\n 8970  \t\tif(T%getTotalData().ne.1)then\n 8971: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8972  \t\t\tcall error_stop()\n 8973  \t\tend if\n ....\n 8983  \t\tinteger::classtype,Aclasstype\n 8984  \t\tif(T%getTotalData().ne.1)then\n 8985: \t\t\tcall writemess(\"ERROR in number/T, T should be lengh=1\",-1)\n 8986  \t\t\tcall error_stop()\n 8987  \t\tend if\n ....\n 8997  \t\tinteger::classtype\n 8998  \t\tif(.not.T1%getflag())then\n 8999: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9000  \t\t\tcall error_stop()\n 9001  \t\tend if\n ....\n 9010  \t\tinteger::classtype\n 9011  \t\tif(.not.T1%getflag())then\n 9012: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9013  \t\t\tcall error_stop()\n 9014  \t\tend if\n ....\n 9023  \t\tinteger::classtype\n 9024  \t\tif(.not.T1%getflag())then\n 9025: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9026  \t\t\tcall error_stop()\n 9027  \t\tend if\n ....\n 9036  \t\tinteger::classtype\n 9037  \t\tif(.not.T1%getflag())then\n 9038: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9039  \t\t\tcall error_stop()\n 9040  \t\tend if\n ....\n 9049  \t\tinteger::classtype\n 9050  \t\tif(.not.T1%getflag())then\n 9051: \t\t\tcall writemess(\"There is no data in the Tensor,(/)\",-1)\n 9052  \t\t\tcall error_stop()\n 9053  \t\tend if\n ....\n 9137  \t\t\t\t\t\telse \n 9138  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9139: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9140  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9141  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9143  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9144  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9145: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9146  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9147  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9166  \t\t\t\t\t\t\telse\n 9167  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9168: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9169  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9170  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9172  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9173  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9174: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9175  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9176  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9189  \t\t\t\t\t\t\tend if\n 9190  \t\t\t\t\telse\n 9191: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9192  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9193  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9198  \t\t\t\tT2n=T2.dim.1\n 9199  \t\t\t\tif(T1m.ne.T2n) then\n 9200: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9201  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9202  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9214  \t\t\t\tT2n=D2.i.2\n 9215  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9216: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9217  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9218  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9234  \t\t\t\tT1n=D1.i.2\n 9235  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 9236: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 9237  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9238  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9256  \t\t\t\tend if\n 9257  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 9258: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 9259  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9260  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9309  \t\tT2p=>T2\n 9310  \t\tif(associated(Resp,T1p).or.associated(Resp,T2p))then\n 9311: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 9312: \t\t\tcall writemess('error in call T%ProductTensorRoutine(Res,T1,T2,alpha,beta)')\n 9313: \t\t\tcall writemess('Res and T1, or Res and T2, can not be a same variable')\n 9314  \t\t\tcall error_stop\n 9315  \t\tend if\n ....\n 9391  \t\t\t\t\t\telse \n 9392  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9393: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9394  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9395  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9397  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9398  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9399: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9400  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9401  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9426  \t\t\t\t\t\t\telse\n 9427  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9428: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9429  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9430  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9432  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9433  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9434: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9435  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9436  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9452  \t\t\t\t\t\t\tend if\n 9453  \t\t\t\t\telse\n 9454: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9455  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9456  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9461  \t\t\t\tT2n=T2.dim.1\n 9462  \t\t\t\tif(T1m.ne.T2n) then\n 9463: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9464  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9465  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9480  \t\t\t\tT2n=D2.i.2\n 9481  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9482: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9483  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9484  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9503  \t\t\t\tT1n=D1.i.2\n 9504  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 9505: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 9506  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9507  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9528  \t\t\t\tend if\n 9529  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 9530: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 9531  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9532  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9582  \t\tT2p=>T2\n 9583  \t\tif(associated(Resp,T1p).or.associated(Resp,T2p))then\n 9584: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 9585: \t\t\tcall writemess('error in call T%ProductTensorRoutine(Res,T1,T2,alpha,beta)')\n 9586: \t\t\tcall writemess('Res and T1, or Res and T2, can not be a same variable')\n 9587  \t\t\tcall error_stop\n 9588  \t\tend if\n ....\n 9648  \t\t\t\t\t\telse \n 9649  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9650: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9651  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9652  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9654  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9655  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9656: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9657  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9658  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9677  \t\t\t\t\t\t\telse\n 9678  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9679: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9680  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9681  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9683  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9684  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9685: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9686  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9687  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9700  \t\t\t\t\t\t\tend if\n 9701  \t\t\t\t\telse\n 9702: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9703  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9704  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9709  \t\t\t\tT2n=T2.dim.1\n 9710  \t\t\t\tif(T1m.ne.T2n) then\n 9711: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9712  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9713  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9725  \t\t\t\tT2n=D2.i.2\n 9726  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9727: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9728  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9729  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9745  \t\t\t\tT1n=D1.i.2\n 9746  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 9747: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 9748  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9749  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9767  \t\t\t\tend if\n 9768  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 9769: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 9770  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9771  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9822  \t\tT2p=>T2\n 9823  \t\tif(associated(Resp,T1p).or.associated(Resp,T2p))then\n 9824: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 9825: \t\t\tcall writemess('error in call T%ProductTensorRoutine(Res,T1,T2,alpha,beta)')\n 9826: \t\t\tcall writemess('Res and T1, or Res and T2, can not be a same variable')\n 9827  \t\t\tcall error_stop\n 9828  \t\tend if\n ....\n 9904  \t\t\t\t\t\telse \n 9905  \t\t\t\t\t\t\tif(rank2.eq.1)then!Tensor*number,(1,1) *(3)\n 9906: \t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -1,stop\",-1)\n 9907  \t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9908  \t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9910  \t\t\t\t\t\t\telse!Tensor*Tensor,(1,1) *(1,2,1,2)\n 9911  \t\t\t\t\t\t\t\tif(T2%dim(1).ne.1)then\n 9912: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -2,stop\",-1)\n 9913  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9914  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9939  \t\t\t\t\t\t\telse\n 9940  \t\t\t\t\t\t\t\tif(rank1.eq.1)then!Tensor*number,(3)*(1,1)\n 9941: \t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -3,stop\",-1)\n 9942  \t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9943  \t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9945  \t\t\t\t\t\t\t\telse!Tensor*Tensor,(1,2,2,1) *(1,1)\n 9946  \t\t\t\t\t\t\t\t\tif(T1%dim(rank1).ne.1)then\n 9947: \t\t\t\t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -4,stop\",-1)\n 9948  \t\t\t\t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9949  \t\t\t\t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9965  \t\t\t\t\t\t\tend if\n 9966  \t\t\t\t\telse\n 9967: \t\t\t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case -5,stop\",-1)\n 9968  \t\t\t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9969  \t\t\t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9974  \t\t\t\tT2n=T2.dim.1\n 9975  \t\t\t\tif(T1m.ne.T2n) then\n 9976: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 1,stop\",-1)\n 9977  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9978  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 9993  \t\t\t\tT2n=D2.i.2\n 9994  \t\t\t\tif((D1.i.1) .ne. T2m) then\n 9995: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 2,stop\",-1)\n 9996  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 9997  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n ....\n 10016  \t\t\t\tT1n=D1.i.2\n 10017  \t\t\t\tif((D2.i.1) .ne. T1n) then\n 10018: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 3,stop\",-1)\n 10019  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 10020  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n .....\n 10041  \t\t\t\tend if\n 10042  \t\t\t\tif((D1.i.2).ne.(D2.i.1)) then\n 10043: \t\t\t\t\tcall writemess(\"ERROR in ProductTensor,case 4,stop\",-1)\n 10044  \t\t\t\t\tcall T1%diminfo('dimension of T1')\n 10045  \t\t\t\t\tcall T2%diminfo('dimension of T2')\n .....\n 10136  \t\ttype(Tensor),intent(in)::this1,this2\n 10137  \t\tif(this1%gettype().gt.3)then\n 10138: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10139  \t\t\tcall error_stop()\n 10140  \t\tend if\n 10141  \t\tif(this2%getType().gt.3)then\n 10142: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10143  \t\t\tcall error_stop()\n 10144  \t\tend if\n 10145  \t\tif(this1%gettotalData().ne.this2%gettotalData())then\n 10146: \t\t\tcall writemess(\"error in cmplx,totaldata\",-1)\n 10147  \t\t\tcall error_stop()\n 10148  \t\tend if\n .....\n 10154  \t\ttype(Tensor),intent(in)::this1,this2\n 10155  \t\tif(this1%gettype().gt.3)then\n 10156: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10157  \t\t\tcall error_stop()\n 10158  \t\tend if\n 10159  \t\tif(this2%getType().gt.3)then\n 10160: \t\t\tcall writemess(\"error in cmplx\",-1)\n 10161  \t\t\tcall error_stop()\n 10162  \t\tend if\n 10163  \t\tif(this1%gettotalData().ne.this2%gettotalData())then\n 10164: \t\t\tcall writemess(\"error in cmplx,totaldata\",-1)\n 10165  \t\t\tcall error_stop()\n 10166  \t\tend if\n .....\n 10175  \t\t\t\tcall  charTdata(charTensor%TData,this%TData)\n 10176  \t\telse\n 10177: \t\t\tcall writemess(\"ERROR in charTensor\",-1)\n 10178  \t\t\tstop\n 10179  \t\tend if\n .....\n 10229  \t\t\t\tTmaxElement=dcmplxmaxElement(T)\n 10230  \t\t\tcase default\n 10231: \t\t\t\tcall writemess(\"ERROR in type of input Tensor,(max)\",-1)\n 10232  \t\t\t\tcall error_stop()\n 10233  \t\tend select\n .....\n 10274  \t\t\t\tTminElement=dcmplxminElement(T)\n 10275  \t\t\tcase default\n 10276: \t\t\t\tcall writemess(\"ERROR in type of input Tensor,(min)\",-1)\n 10277  \t\t\t\tcall error_stop()\n 10278  \t\tend select\n .....\n 10401  \t\t\t\tTmaxminElement=d\n 10402  \t\t\tcase default\n 10403: \t\t\t\tcall writemess(\"ERROR in type of input Tensor,(maxmin)\",-1)\n 10404  \t\t\t\tcall error_stop()\n 10405  \t\tend select\n .....\n 10473  \t\tinteger,intent(in)::dimen(:)\n 10474  \t\tif(product(dimen).ne.Ten%getTotaldata()) then\n 10475: \t\t\tcall writemess(\"ERROR in resetdim1\",-1)\n 10476: \t\t\tcall writemess(product(dimen)+','+Ten%getTotaldata(),-1)\n 10477  \t\t\tcall Ten%diminfo(\"\")\n 10478: \t\t\tcall writemess(\"stop\",-1)\n 10479  \t\t\tcall error_stop()\n 10480  \t\tend if\n .....\n 10487  \t\ttype(dimension),intent(in)::dimen\n 10488  \t\tif(dimen%size().ne.Ten%getTotaldata()) then\n 10489: \t\t\tcall writemess(\"ERROR in resetdim2\",-1)\n 10490: \t\t\tcall writemess(dimen%size()+','+Ten%getTotaldata(),-1)\n 10491  \t\t\tcall Ten%diminfo(\"\")\n 10492: \t\t\tcall writemess(\"stop\",-1)\n 10493  \t\t\tcall error_stop()\n 10494  \t\tend if\n .....\n 10747  \t\ttype(Dimension)::dimen\t\t\n 10748  \t\tif(.not.T%getflag())then\n 10749: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10750  \t\t\tcall error_stop()\n 10751  \t\tend if\n .....\n 10776  \t\ttype(Dimension)::dimen\t\t\n 10777  \t\tif(.not.T%getflag())then\n 10778: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10779  \t\t\tcall error_stop()\n 10780  \t\tend if\n .....\n 10805  \t\ttype(Dimension)::dimen\t\t\n 10806  \t\tif(.not.T%getflag())then\n 10807: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10808  \t\t\tcall error_stop()\n 10809  \t\tend if\n .....\n 10839  \t\ttype(Dimension)::dimen\t\t\n 10840  \t\tif(.not.T%getflag())then\n 10841: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10842  \t\t\tcall error_stop()\n 10843  \t\tend if\n .....\n 10864  \t\t\t\tend do\n 10865  \t\t\tcase default\n 10866: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 10867  \t\t\t\tcall error_Stop()\n 10868  \t\tend select\n .....\n 10893  \t\ttype(Dimension)::dimen\t\t\n 10894  \t\tif(.not.T%getflag())then\n 10895: \t\t\tcall writemess(\"There is no data in the Tensor,(permutation)\",-1)\n 10896  \t\t\tcall error_stop()\n 10897  \t\tend if\n 10898  \t\tif(.not.if_original_dim(T%Tendim))then\n 10899: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 10900  \t\t\tcall error_stop()\n 10901  \t\tend if\n .....\n 10926  \t\ttype(Tensor),intent(in)::Tenorder\n 10927  \t\tif(.not.T%getflag())then\n 10928: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 10929  \t\t\tcall error_stop()\n 10930  \t\tend if\n 10931  \t\tif(.not.if_original_dim(T%Tendim))then\n 10932: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 10933  \t\t\tcall error_stop()\n 10934  \t\tend if\n .....\n 10939  \t\t\t\tcall permutation_name_routine(T,Tenorder%ai())\n 10940  \t\t\tcase default\n 10941: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 10942  \t\t\t\tcall error_Stop()\t\n 10943  \t\tend select\n .....\n 10954  \t\trank=getRank(T)\n 10955  \t\tif(inde.gt.rank) then\n 10956: \t\t\tcall writemess(\"ERROR in function permutefo\",-1)\n 10957: \t\t\tcall writemess(inde+','+rank,-1)\n 10958  \t\t\tcall error_stop()\n 10959  \t\tend if\n 10960  \t\tif(inde.le.0) then\n 10961: \t\t\tcall writemess(\"ERROR in function permutefo\",-1)\n 10962: \t\t\tcall writemess(\"index=\"+inde,-1)\n 10963  \t\t\tcall error_stop()\n 10964  \t\tend if\n .....\n 10985  \t\tinteger,intent(in)::inde\n 10986  \t\tif(.not.T%getflag())then\n 10987: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 10988  \t\t\tcall error_stop()\n 10989  \t\tend if\n .....\n 11000  \t\t\tinde=T%TenDim%FindOrder(indechar)\n 11001  \t\t\tif(inde.gt.rank) then\n 11002: \t\t\t\tcall writemess(\"ERROR in function permutefo\",-1)\n 11003: \t\t\t\tcall writemess(inde+','+rank,-1)\n 11004  \t\t\t\tcall error_stop()\n 11005  \t\t\tend if\n 11006  \t\t\tif(inde.le.0) then\n 11007: \t\t\t\tcall writemess(\"ERROR in function permutefo_name,Can not find the name\",-1)\n 11008: \t\t\t\tcall writemess(\"stop\",-1)\n 11009  \t\t\t\tcall error_stop()\n 11010  \t\t\tend if\n 11011  \t\t\tif(.not.if_original_dim(T%Tendim))then\n 11012: \t\t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11013  \t\t\t\tcall error_stop()\n 11014  \t\t\tend if\n .....\n 11042  \t\tcharacter(len=*),intent(in)::indechar\n 11043  \t\tif(.not.T%getflag())then\n 11044: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 11045  \t\t\tcall error_stop()\n 11046  \t\tend if\n 11047  \t\tif(.not.if_original_dim(T%Tendim))then\n 11048: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11049  \t\t\tcall error_stop()\n 11050  \t\tend if\n .....\n 11076  \t\tinteger::vec(size(vec_))\n 11077  \t\tif(.not.T%getflag())then\n 11078: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 11079  \t\t\tcall error_stop()\n 11080  \t\tend if\n .....\n 11098  \t\tinteger,pointer::vec(:)\n 11099  \t\tif(.not.T%getflag())then\n 11100: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec)\",-1)\n 11101  \t\t\tcall error_stop()\n 11102  \t\tend if\n .....\n 11122  \t\tinteger,pointer::vec(:)\n 11123  \t\tif(.not.T%getflag())then\n 11124: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11125  \t\t\tcall error_stop()\n 11126  \t\tend if\n 11127  \t\tif(.not.if_original_dim(T%Tendim))then\n 11128: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11129  \t\t\tcall error_stop()\n 11130  \t\tend if\n .....\n 11152  \t\tinteger,pointer::indeint(:)\n 11153  \t\tif(.not.T%getflag())then\n 11154: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11155  \t\t\tcall error_stop()\n 11156  \t\tend if\n 11157  \t\tif(.not.if_original_dim(T%Tendim))then\n 11158: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11159  \t\t\tcall error_stop()\n 11160  \t\tend if\n .....\n 11172  \t\t\t\tpermutefo=permutefo_vec_name(T,indechar)\n 11173  \t\t\tcase default\n 11174: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11175  \t\t\t\tcall error_Stop()\t\n 11176  \t\tend select\n .....\n 11184  \t\tinteger,pointer::vec(:)\n 11185  \t\tif(.not.T%getflag())then\n 11186: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11187  \t\t\tcall error_stop()\n 11188  \t\tend if\n 11189  \t\tif(.not.if_original_dim(T%Tendim))then\n 11190: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11191  \t\t\tcall error_stop()\n 11192  \t\tend if\n .....\n 11213  \t\tinteger,pointer::indeint(:)\n 11214  \t\tif(.not.T%getflag())then\n 11215: \t\t\tcall writemess(\"There is no data in the Tensor,(permutefo_vec_name)\",-1)\n 11216  \t\t\tcall error_stop()\n 11217  \t\tend if\n 11218  \t\tif(.not.if_original_dim(T%Tendim))then\n 11219: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11220  \t\t\tcall error_stop()\n 11221  \t\tend if\n .....\n 11233  \t\t\t\tcall permutefo_vec_name_routine(T,indechar)\n 11234  \t\t\tcase default\n 11235: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11236  \t\t\t\tcall error_Stop()\t\n 11237  \t\tend select\n .....\n 11247  \t\tinteger::rank\n 11248  \t\tif(.not.T%getflag())then\n 11249: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback)\",-1)\n 11250  \t\t\tcall error_stop()\n 11251  \t\tend if\n 11252  \t\trank=getRank(T)\n 11253  \t\tif(inde.gt.rank) then\n 11254: \t\t\tcall writemess(\"ERROR in function permuteback\",-1)\n 11255: \t\t\tcall writemess(\"stop\",-1)\n 11256  \t\t\tcall error_stop()\n 11257  \t\tend if\n 11258  \t\tif(inde.le.0) then\n 11259: \t\t\tcall writemess(\"ERROR in function permuteback,Can not find the name\",-1)\n 11260: \t\t\tcall writemess(\"index\"+'='+inde,-1)\n 11261  \t\t\tcall error_stop()\n 11262  \t\tend if\n .....\n 11283  \t\tinteger,intent(in)::inde\n 11284  \t\tif(.not.T%getflag())then\n 11285: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback_vec)\",-1)\n 11286  \t\t\tcall error_stop()\n 11287  \t\tend if\n .....\n 11295  \t\tcharacter(len=len_of_Name)::indexname\n 11296  \t\tif(.not.T%getflag())then\n 11297: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback_vec)\",-1)\n 11298  \t\t\tcall error_stop()\n 11299  \t\tend if\n 11300  \t\tif(.not.if_original_dim(T%Tendim))then\n 11301: \t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11302  \t\t\tcall error_stop()\n 11303  \t\tend if\n .....\n 11324  \t\tinteger::rank\n 11325  \t\tif(.not.T%getflag())then\n 11326: \t\t\tcall writemess(\"There is no data in the Tensor,(permuteback_name)\",-1)\n 11327  \t\t\tcall error_stop()\n 11328  \t\tend if\n 11329  \t\tif(long_Name_logi(indechar))then\n 11330  \t\t\tif(.not.if_original_dim(T%Tendim))then\n 11331: \t\t\t\tcall writemess(\"split dimension before calling permuation on name\",-1)\n 11332  \t\t\t\tcall error_stop()\n 11333  \t\t\tend if\n .....\n 11335  \t\t\tinde=T%TenDim%FindOrder(indechar)\n 11336  \t\t\tif(inde.gt.rank) then\n 11337: \t\t\t\tcall writemess(\"ERROR in function permuteback_name\",-1)\n 11338: \t\t\t\tcall writemess(\"stop\",-1)\n 11339  \t\t\t\tcall error_stop()\n 11340  \t\t\tend if\n 11341  \t\t\tif(inde.le.0) then\n 11342: \t\t\t\tcall writemess(\"ERROR in function permuteback_name,Can not find the name\",-1)\n 11343: \t\t\t\tcall writemess(\"stop\",-1)\n 11344  \t\t\t\tcall error_stop()\n 11345  \t\t\tend if\n .....\n 11454  \t\t\t\tpermutefo=permuteback_vec_name(T,indechar)\n 11455  \t\t\tcase default\n 11456: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11457  \t\t\t\tcall error_Stop()\t\n 11458  \t\tend select\n .....\n 11544  \t\t\t\tcall permuteback_vec_name_routine(T,indechar)\n 11545  \t\t\tcase default\n 11546: \t\t\t\tcall writemess('error in permutation, the data type of order',-1)\n 11547  \t\t\t\tcall error_Stop()\t\n 11548  \t\tend select\n .....\n 11747  \t\tinteger::leni1,leni2,rank1,rank2\n 11748  \t\tif(.not.T1_%getFlag())then\n 11749: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11750  \t\t\tcall error_stop()\n 11751  \t\tend if\n 11752  \t\tif(.not.T2_%getFlag())then\n 11753: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11754  \t\t\tcall error_stop()\n 11755  \t\tend if\n .....\n 11781  \t\tinteger,intent(in) :: i1,i2\n 11782  \t\tif(.not.T1_%getFlag())then\n 11783: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11784  \t\t\tcall error_stop()\n 11785  \t\tend if\n 11786  \t\tif(.not.T2_%getFlag())then\n 11787: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11788  \t\t\tcall error_stop()\n 11789  \t\tend if\n .....\n 11804  \t\tinteger::leni1,leni2,rank1,rank2\n 11805  \t\tif(.not.T1_%getFlag())then\n 11806: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11807  \t\t\tcall error_stop()\n 11808  \t\tend if\n 11809  \t\tif(.not.T2_%getFlag())then\n 11810: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11811  \t\t\tcall error_stop()\n 11812  \t\tend if\n .....\n 11840  \t\tcharacter(len=*),intent(in)::name1,name2\n 11841  \t\tif(.not.T1_%getFlag())then\n 11842: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11843  \t\t\tcall error_stop()\n 11844  \t\tend if\n 11845  \t\tif(.not.T2_%getFlag())then\n 11846: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11847  \t\t\tcall error_stop()\n 11848  \t\tend if\n .....\n 11872  \t\t\t\t\tk=k+1\n 11873  \t\t\t\t\tif(k.gt.sizeSameName)then\n 11874: \t\t\t\t\t\tcall writemess('ERROR in finding the same name, maybe something wrong in the tensorname',-1)\n 11875: \t\t\t\t\t\tcall writemess('You can diminfo to see if the tensor names are right')\n 11876: \t\t\t\t\t\tcall writemess('It is not allow to have two or more same name in one tensor')\n 11877  \t\t\t\t\t\tcall error_stop()\n 11878  \t\t\t\t\tend if\n .....\n 11891  \t\tinteger::lenofname,rank1,rank2\n 11892  \t\tif(.not.T1_%getFlag())then\n 11893: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11894  \t\t\tcall error_stop()\n 11895  \t\tend if\n 11896  \t\tif(.not.T2_%getFlag())then\n 11897: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11898  \t\t\tcall error_stop()\n 11899  \t\tend if\n .....\n 11930  \t\tinteger::leni1,leni2,rank1,rank2\n 11931  \t\tif(.not.T1_%getFlag())then\n 11932: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11933  \t\t\tcall error_stop()\n 11934  \t\tend if\n 11935  \t\tif(.not.T2_%getFlag())then\n 11936: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11937  \t\t\tcall error_stop()\n 11938  \t\tend if\n .....\n 11960  \t\tinteger :: i1,i2\n 11961  \t\tif(.not.T1_%getFlag())then\n 11962: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11963  \t\t\tcall error_stop()\n 11964  \t\tend if\n 11965  \t\tif(.not.T2_%getFlag())then\n 11966: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11967  \t\t\tcall error_stop()\n 11968  \t\tend if\n .....\n 11986  \t\tinteger::leni1,leni2,rank1,rank2\n 11987  \t\tif(.not.T1_%getFlag())then\n 11988: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 11989  \t\t\tcall error_stop()\n 11990  \t\tend if\n 11991  \t\tif(.not.T2_%getFlag())then\n 11992: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 11993  \t\t\tcall error_stop()\n 11994  \t\tend if\n .....\n 12022  \t\tinteger,intent(in)::i1\n 12023  \t\tif(.not.T1_%getFlag())then\n 12024: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12025  \t\t\tcall error_stop()\n 12026  \t\tend if\n 12027  \t\tif(.not.T2_%getFlag())then\n 12028: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12029  \t\t\tcall error_stop()\n 12030  \t\tend if\n .....\n 12044  \t\tinteger::leni1,leni2,rank1,rank2\n 12045  \t\tif(.not.T1_%getFlag())then\n 12046: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12047  \t\t\tcall error_stop()\n 12048  \t\tend if\n 12049  \t\tif(.not.T2_%getFlag())then\n 12050: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12051  \t\t\tcall error_stop()\n 12052  \t\tend if\n .....\n 12073  \t\tinteger :: i2\n 12074  \t\tif(.not.T1_%getFlag())then\n 12075: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12076  \t\t\tcall error_stop()\n 12077  \t\tend if\n 12078  \t\tif(.not.T2_%getFlag())then\n 12079: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12080  \t\t\tcall error_stop()\n 12081  \t\tend if\n .....\n 12098  \t\tinteger::leni1,leni2,rank1,rank2\n 12099  \t\tif(.not.T1_%getFlag())then\n 12100: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12101  \t\t\tcall error_stop()\n 12102  \t\tend if\n 12103  \t\tif(.not.T2_%getFlag())then\n 12104: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12105  \t\t\tcall error_stop()\n 12106  \t\tend if\n .....\n 12134  \t\tinteger,intent(in)::i2\n 12135  \t\tif(.not.T1_%getFlag())then\n 12136: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12137  \t\t\tcall error_stop()\n 12138  \t\tend if\n 12139  \t\tif(.not.T2_%getFlag())then\n 12140: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12141  \t\t\tcall error_stop()\n 12142  \t\tend if\n .....\n 12156  \t\tinteger::leni1,leni2,rank1,rank2\n 12157  \t\tif(.not.T1_%getFlag())then\n 12158: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12159  \t\t\tcall error_stop()\n 12160  \t\tend if\n 12161  \t\tif(.not.T2_%getFlag())then\n 12162: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12163  \t\t\tcall error_stop()\n 12164  \t\tend if\n .....\n 12185  \t\tinteger :: i1\n 12186  \t\tif(.not.T1_%getFlag())then\n 12187: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12188  \t\t\tcall error_stop()\n 12189  \t\tend if\n 12190  \t\tif(.not.T2_%getFlag())then\n 12191: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12192  \t\t\tcall error_stop()\n 12193  \t\tend if\n .....\n 12210  \t\tinteger::leni1,leni2,i1(size(i1_)),i2(size(i2_))\n 12211  \t\tif(.not.T1_%getFlag())then\n 12212: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12213  \t\t\tcall error_stop()\n 12214  \t\tend if\n 12215  \t\tif(.not.T2_%getFlag())then\n 12216: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12217  \t\t\tcall error_stop()\n 12218  \t\tend if\n .....\n 12287  \t\tclass(Tensor),pointer::pT,pT1,pT2\n 12288  \t\tif(.not.T1%getFlag())then\n 12289: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12290  \t\t\tcall error_stop()\n 12291  \t\tend if\n 12292  \t\tif(.not.T2%getFlag())then\n 12293: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12294  \t\t\tcall error_stop()\n 12295  \t\tend if\n 12296  \t\tif(.not.(if_original_dim(T1%TenDim).and.if_original_dim(T2%TenDim))) then\n 12297: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12298: \t\t\tcall writemess(\"stop\",-1)\n 12299  \t\t\tcall error_stop()\n 12300  \t\tend if\n .....\n 12303  \t\tpT2=>T2\n 12304  \t\tif(associated(pT,pT1).or.associated(pT,pT2).or.associated(pT1,pT2))then\n 12305: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12306: \t\t\tcall writemess('error in call T%contract(A,[names],B,[names])')\n 12307: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12308  \t\t\tcall error_stop\n 12309  \t\tend if\n .....\n 12340  \t\tclass(Tensor),pointer::pT,pT2\n 12341  \t\tif(.not.T%getFlag())then\n 12342: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12343  \t\t\tcall error_stop()\n 12344  \t\tend if\n 12345  \t\tif(.not.T2%getFlag())then\n 12346: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12347  \t\t\tcall error_stop()\n 12348  \t\tend if\n .....\n 12355  \t\tpT2=>T2\n 12356  \t\tif(associated(pT,pT2))then\n 12357: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12358: \t\t\tcall writemess('error in call T%contract([names],B,[names])')\n 12359: \t\t\tcall writemess('T and B can not be a same variable')\n 12360  \t\t\tcall error_stop\n 12361  \t\tend if\n .....\n 12390  \t\tclass(Tensor),pointer::pT,pT1\n 12391  \t\tif(.not.T1%getFlag())then\n 12392: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12393  \t\t\tcall error_stop()\n 12394  \t\tend if\n 12395  \t\tif(.not.T%getFlag())then\n 12396: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12397  \t\t\tcall error_stop()\n 12398  \t\tend if\n .....\n 12405  \t\tpT1=>T1\n 12406  \t\tif(associated(pT,pT1))then\n 12407: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12408: \t\t\tcall writemess('error in call T%contract(A,[names],[names])')\n 12409: \t\t\tcall writemess('T and A can not be a same variable')\n 12410  \t\t\tcall error_stop\n 12411  \t\tend if\n .....\n 12437  \t\tclass(Tensor),pointer::pT,pT1,pT2\n 12438  \t\tif(.not.T1%getFlag())then\n 12439: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12440  \t\t\tcall error_stop()\n 12441  \t\tend if\n 12442  \t\tif(.not.T2%getFlag())then\n 12443: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12444  \t\t\tcall error_stop()\n 12445  \t\tend if\n 12446  \t\tif(.not.(if_original_dim(T1%TenDim).and.if_original_dim(T2%TenDim))) then\n 12447: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12448: \t\t\tcall writemess(\"stop\",-1)\n 12449  \t\t\tcall error_stop()\n 12450  \t\tend if\n .....\n 12453  \t\tpT2=>T2\n 12454  \t\tif(associated(pT,pT1).or.associated(pT,pT2).or.associated(pT1,pT2))then\n 12455: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12456: \t\t\tcall writemess('error in call T%contract(A,name1,B,name2)')\n 12457: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12458  \t\t\tcall error_stop\n 12459  \t\tend if\n .....\n 12472  \t\tclass(Tensor),pointer::pT,pT2\n 12473  \t\tif(.not.T%getFlag())then\n 12474: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12475  \t\t\tcall error_stop()\n 12476  \t\tend if\n 12477  \t\tif(.not.T2%getFlag())then\n 12478: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12479  \t\t\tcall error_stop()\n 12480  \t\tend if\n 12481  \t\tif(.not.(if_original_dim(T2%TenDim))) then\n 12482: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12483: \t\t\tcall writemess(\"stop\",-1)\n 12484  \t\t\tcall error_stop()\n 12485  \t\tend if\n .....\n 12487  \t\tpT2=>T2\n 12488  \t\tif(associated(pT,pT2))then\n 12489: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12490: \t\t\tcall writemess('error in call T%contract(name1,B,name2)')\n 12491: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12492  \t\t\tcall error_stop\n 12493  \t\tend if\n .....\n 12505  \t\tclass(Tensor),pointer::pT,pT1\n 12506  \t\tif(.not.T1%getFlag())then\n 12507: \t\t\tcall writemess('There is no data in the first Tensor, when contracting Tensor',-1)\n 12508  \t\t\tcall error_stop()\n 12509  \t\tend if\n 12510  \t\tif(.not.T%getFlag())then\n 12511: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12512  \t\t\tcall error_stop()\n 12513  \t\tend if\n 12514  \t\tif(.not.(if_original_dim(T1%TenDim))) then\n 12515: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12516: \t\t\tcall writemess(\"stop\",-1)\n 12517  \t\t\tcall error_stop()\n 12518  \t\tend if\n .....\n 12520  \t\tpT1=>T1\n 12521  \t\tif(associated(pT,pT1))then\n 12522: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 12523: \t\t\tcall writemess('error in call T%contract(A,name1,name2)')\n 12524: \t\t\tcall writemess('T, A and B can not be a same variable')\n 12525  \t\t\tcall error_stop\n 12526  \t\tend if\n .....\n 12545  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12546  \t\tif(.not.T%getFlag())then\n 12547: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12548  \t\t\tcall error_stop()\n 12549  \t\tend if\n 12550  \t\tif(.not.(if_original_dim(T%TenDim))) then\n 12551: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12552: \t\t\tcall writemess(\"stop\",-1)\n 12553  \t\t\tcall error_stop()\n 12554  \t\tend if\n .....\n 12563  \t\tdim1=pT%dim(1)\n 12564  \t\tif(dim1.ne.pT%dim(2))then\n 12565: \t\t\tcall writemess(' ERROR in contract(name1,name2), dimension')\n 12566  \t\t\tcall error_stop\n 12567  \t\tend if\n .....\n 12619  \t\t\t\tend do\n 12620  \t\t\tcase default\n 12621: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12622  \t\t\t\tcall error_stop\n 12623  \t\tend select\n .....\n 12636  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12637  \t\tif(.not.T%getFlag())then\n 12638: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12639  \t\t\tcall error_stop()\n 12640  \t\tend if\n .....\n 12649  \t\tdim1=pT%dim(1)\n 12650  \t\tif(dim1.ne.pT%dim(2))then\n 12651: \t\t\tcall writemess(' ERROR in contract(ith1,ith2), dimension')\n 12652  \t\t\tcall error_stop\n 12653  \t\tend if\n .....\n 12705  \t\t\t\tend do\n 12706  \t\t\tcase default\n 12707: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12708  \t\t\t\tcall error_stop\n 12709  \t\tend select\n .....\n 12722  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12723  \t\tif(.not.Tin%getFlag())then\n 12724: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12725  \t\t\tcall error_stop()\n 12726  \t\tend if\n .....\n 12735  \t\tdim1=pT%dim(1)\n 12736  \t\tif(dim1.ne.pT%dim(2))then\n 12737: \t\t\tcall writemess(' ERROR in contract(ith1,ith2), dimension')\n 12738  \t\t\tcall error_stop\n 12739  \t\tend if\n .....\n 12791  \t\t\t\tend do\n 12792  \t\t\tcase default\n 12793: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12794  \t\t\t\tcall error_stop\n 12795  \t\tend select\n .....\n 12809  \t\tcomplex*16,pointer::zdata(:,:,:),newzdata(:)\n 12810  \t\tif(.not.Tin%getFlag())then\n 12811: \t\t\tcall writemess('There is no data in the second Tensor, when contracting Tensor',-1)\n 12812  \t\t\tcall error_stop()\n 12813  \t\tend if\n 12814  \t\tif(.not.(if_original_dim(Tin%TenDim))) then\n 12815: \t\t\tcall writemess(\"ERROR in contract with TensorName, one can not fuse any legs of the Tensor to use this function\",-1)\n 12816: \t\t\tcall writemess(\"stop\",-1)\n 12817  \t\t\tcall error_stop()\n 12818  \t\tend if\n .....\n 12827  \t\tdim1=pT%dim(1)\n 12828  \t\tif(dim1.ne.pT%dim(2))then\n 12829: \t\t\tcall writemess(' ERROR in contract(ith1,ith2), dimension')\n 12830  \t\t\tcall error_stop\n 12831  \t\tend if\n .....\n 12883  \t\t\t\tend do\n 12884  \t\t\tcase default\n 12885: \t\t\t\tcall writemess(' ERROR in contract(name1,name2), clasee type')\n 12886  \t\t\t\tcall error_stop\n 12887  \t\tend select\n .....\n 13008  \t\ttype(dimension)::newdim\n 13009  \t\tif(A%getRank().le.1)then\n 13010: \t\t\tcall writemess('ERROR in subTensor, the rank should be larger than or equal to 2')\n 13011  \t\t\tcall error_stop\n 13012  \t\tend if\n .....\n 13051  \t\ttype(dimension)::newdim\n 13052  \t\tif(A%getRank().le.1)then\n 13053: \t\t\tcall writemess('ERROR in subTensor, the rank should be larger than or equal to 2')\n 13054  \t\t\tcall error_stop\n 13055  \t\tend if\n .....\n 13058  \t\tnewDim2=legith(2)-legith(1)+1\n 13059  \t\tif(newDim2.le.0)then\n 13060: \t\t\tcall writemess('ERROR in subTensor, legith=('+legith(1)+','+legith(2)+')')\n 13061  \t\t\tcall error_stop\n 13062  \t\tend if\n 13063  \t\tif(newDim2.gt.T%dim(rank))then\n 13064: \t\t\tcall writemess('ERROR in subTensor, legith=('+legith(1)+','+legith(2)+')')\n 13065: \t\t\tcall writemess('New dimension is larger than original one, dimen='+T%dim(rank))\n 13066  \t\t\tcall error_stop\n 13067  \t\tend if\n .....\n 13115  \t\tend if\n 13116  \t\tif(D.gt.newD)then\n 13117: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13118: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13119  \t\t\tcall error_stop\n 13120  \t\tend if\n 13121  \t\tif(.not.T%getFlag())then\n 13122: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13123  \t\t\tcall error_stop\n 13124  \t\tend if\n 13125  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13126: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13127  \t\t\tcall error_stop\n 13128  \t\tend if\n .....\n 13159  \t\tend if\n 13160  \t\tif(D.gt.newD)then\n 13161: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13162: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13163  \t\t\tcall error_stop\n 13164  \t\tend if\n 13165  \t\tif(.not.T%getFlag())then\n 13166: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13167  \t\t\tcall error_stop\n 13168  \t\tend if\n 13169  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13170: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13171  \t\t\tcall error_stop\n 13172  \t\tend if\n .....\n 13214  \t\trank=inoutT%getRank()\n 13215  \t\tif(D.gt.newD)then\n 13216: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13217: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13218  \t\t\tcall error_stop\n 13219  \t\tend if\n 13220  \t\tif(.not.inoutT%getFlag())then\n 13221: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13222  \t\t\tcall error_stop\n 13223  \t\tend if\n 13224  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13225: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13226  \t\t\tcall error_stop\n 13227  \t\tend if\n .....\n 13260  \t\trank=inoutT%getRank()\n 13261  \t\tif(D.gt.newD)then\n 13262: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13263: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13264  \t\t\tcall error_stop\n 13265  \t\tend if\n 13266  \t\tif(.not.inoutT%getFlag())then\n 13267: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13268  \t\t\tcall error_stop\n 13269  \t\tend if\n 13270  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13271: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13272  \t\t\tcall error_stop\n 13273  \t\tend if\n .....\n 13315  \t\tend if\n 13316  \t\tif(D.gt.newD)then\n 13317: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13318: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13319  \t\t\tcall error_stop\n 13320  \t\tend if\n 13321  \t\tif(.not.T%getFlag())then\n 13322: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13323  \t\t\tcall error_stop\n 13324  \t\tend if\n 13325  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13326: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13327  \t\t\tcall error_stop\n 13328  \t\tend if\n .....\n 13358  \t\tend if\n 13359  \t\tif(D.gt.newD)then\n 13360: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13361: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13362  \t\t\tcall error_stop\n 13363  \t\tend if\n 13364  \t\tif(.not.T%getFlag())then\n 13365: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13366  \t\t\tcall error_stop\n 13367  \t\tend if\n 13368  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13369: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13370  \t\t\tcall error_stop\n 13371  \t\tend if\n .....\n 13413  \t\t\n 13414  \t\tif(D.gt.newD)then\n 13415: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13416: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13417  \t\t\tcall error_stop\n 13418  \t\tend if\n 13419  \t\tif(.not.inoutT%getFlag())then\n 13420: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13421  \t\t\tcall error_stop\n 13422  \t\tend if\n 13423  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13424: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13425  \t\t\tcall error_stop\n 13426  \t\tend if\n .....\n 13459  \t\t\n 13460  \t\tif(D.gt.newD)then\n 13461: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13462: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13463  \t\t\tcall error_stop\n 13464  \t\tend if\n 13465  \t\tif(.not.inoutT%getFlag())then\n 13466: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13467  \t\t\tcall error_stop\n 13468  \t\tend if\n 13469  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13470: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13471  \t\t\tcall error_stop\n 13472  \t\tend if\n .....\n 13513  \t\tend if\n 13514  \t\tif(D.gt.newD)then\n 13515: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13516: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13517  \t\t\tcall error_stop\n 13518  \t\tend if\n 13519  \t\tif(.not.T%getFlag())then\n 13520: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13521  \t\t\tcall error_stop\n 13522  \t\tend if\n 13523  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13524: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13525  \t\t\tcall error_stop\n 13526  \t\tend if\n .....\n 13556  \t\tend if\n 13557  \t\tif(D.gt.newD)then\n 13558: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13559: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13560  \t\t\tcall error_stop\n 13561  \t\tend if\n 13562  \t\tif(.not.T%getFlag())then\n 13563: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13564  \t\t\tcall error_stop\n 13565  \t\tend if\n 13566  \t\tif(.not.T%TenDim%if_simple_dimension())then\n 13567: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13568  \t\t\tcall error_stop\n 13569  \t\tend if\n .....\n 13610  \t\trank=T%getRank()\n 13611  \t\tif(D.gt.newD)then\n 13612: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13613: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13614  \t\t\tcall error_stop\n 13615  \t\tend if\n 13616  \t\tif(.not.inoutT%getFlag())then\n 13617: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13618  \t\t\tcall error_stop\n 13619  \t\tend if\n 13620  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13621: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13622  \t\t\tcall error_stop\n 13623  \t\tend if\n .....\n 13655  \t\trank=T%getRank()\n 13656  \t\tif(D.gt.newD)then\n 13657: \t\t\tcall writemess('The input dimension is smaller the one in the Tensor',-1)\n 13658: \t\t\tcall writemess('ERROR in enlargeTensor',-1)\n 13659  \t\t\tcall error_stop\n 13660  \t\tend if\n 13661  \t\tif(.not.inoutT%getFlag())then\n 13662: \t\t\tcall writemess('There is no data in the tensor when enlarge D')\n 13663  \t\t\tcall error_stop\n 13664  \t\tend if\n 13665  \t\tif(.not.inoutT%TenDim%if_simple_dimension())then\n 13666: \t\t\tcall writemess('enlarge D work only on the simple dimension(you can not fuse the Tensor)')\n 13667  \t\t\tcall error_stop\n 13668  \t\tend if\n .....\n 13703  \t\tinteger::d(2)\n 13704  \t\tif(T%gettotalData().eq.0)then\n 13705: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13706  \t\t\tcall error_stop\n 13707  \t\tend if\n 13708  \t\tif(T%getType().ne.1)then\n 13709: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 13710  \t\t\tcall error_stop\n 13711  \t\tend if\n 13712  \t\tif(T%getRank().ne.2)then\n 13713: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13714  \t\t\tcall error_stop\n 13715  \t\tend if\n .....\n 13723  \t\tinteger::d(2)\n 13724  \t\tif(T%gettotalData().eq.0)then\n 13725: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13726  \t\t\tcall error_stop\n 13727  \t\tend if\n 13728  \t\tif(T%getType().ne.1)then\n 13729: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 13730  \t\t\tcall error_stop\n 13731  \t\tend if\n 13732  \t\tif(T%getRank().ne.2)then\n 13733: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13734  \t\t\tcall error_stop\n 13735  \t\tend if\n .....\n 13744  \t\tinteger::d(2)\n 13745  \t\tif(T%gettotalData().eq.0)then\n 13746: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13747  \t\t\tcall error_stop\n 13748  \t\tend if\n 13749  \t\tif(T%getType().ne.2)then\n 13750: \t\t\tcall writemess('The Tensor is of real*4, one should use the real*4 pointer',-1)\n 13751  \t\t\tcall error_stop\n 13752  \t\tend if\n 13753  \t\tif(T%getRank().ne.2)then\n 13754: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13755  \t\t\tcall error_stop\n 13756  \t\tend if\n .....\n 13764  \t\tinteger::d(2)\n 13765  \t\tif(T%gettotalData().eq.0)then\n 13766: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13767  \t\t\tcall error_stop\n 13768  \t\tend if\n 13769  \t\tif(T%getType().ne.2)then\n 13770: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 13771  \t\t\tcall error_stop\n 13772  \t\tend if\n 13773  \t\tif(T%getRank().ne.2)then\n 13774: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13775  \t\t\tcall error_stop\n 13776  \t\tend if\n .....\n 13785  \t\tinteger::d(2)\n 13786  \t\tif(T%gettotalData().eq.0)then\n 13787: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13788  \t\t\tcall error_stop\n 13789  \t\tend if\n 13790  \t\tif(T%getType().ne.3)then\n 13791: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 13792  \t\t\tcall error_stop\n 13793  \t\tend if\n 13794  \t\tif(T%getRank().ne.2)then\n 13795: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13796  \t\t\tcall error_stop\n 13797  \t\tend if\n .....\n 13805  \t\tinteger::d(2)\n 13806  \t\tif(T%gettotalData().eq.0)then\n 13807: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13808  \t\t\tcall error_stop\n 13809  \t\tend if\n 13810  \t\tif(T%getType().ne.3)then\n 13811: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 13812  \t\t\tcall error_stop\n 13813  \t\tend if\n 13814  \t\tif(T%getRank().ne.2)then\n 13815: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13816  \t\t\tcall error_stop\n 13817  \t\tend if\n .....\n 13826  \t\tinteger::d(2)\n 13827  \t\tif(T%gettotalData().eq.0)then\n 13828: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13829  \t\t\tcall error_stop\n 13830  \t\tend if\n 13831  \t\tif(T%getType().ne.4)then\n 13832: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 13833  \t\t\tcall error_stop\n 13834  \t\tend if\n 13835  \t\tif(T%getRank().ne.2)then\n 13836: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13837  \t\t\tcall error_stop\n 13838  \t\tend if\n .....\n 13846  \t\tinteger::d(2)\n 13847  \t\tif(T%gettotalData().eq.0)then\n 13848: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13849  \t\t\tcall error_stop\n 13850  \t\tend if\n 13851  \t\tif(T%getType().ne.4)then\n 13852: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 13853  \t\t\tcall error_stop\n 13854  \t\tend if\n 13855  \t\tif(T%getRank().ne.2)then\n 13856: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13857  \t\t\tcall error_stop\n 13858  \t\tend if\n .....\n 13867  \t\tinteger::d(2)\n 13868  \t\tif(T%gettotalData().eq.0)then\n 13869: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13870  \t\t\tcall error_stop\n 13871  \t\tend if\n 13872  \t\tif(T%getType().ne.5)then\n 13873: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 13874  \t\t\tcall error_stop\n 13875  \t\tend if\n 13876  \t\tif(T%getRank().ne.2)then\n 13877: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13878  \t\t\tcall error_stop\n 13879  \t\tend if\n .....\n 13887  \t\tinteger::d(2)\n 13888  \t\tif(T%gettotalData().eq.0)then\n 13889: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13890  \t\t\tcall error_stop\n 13891  \t\tend if\n 13892  \t\tif(T%getType().ne.5)then\n 13893: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 13894  \t\t\tcall error_stop\n 13895  \t\tend if\n 13896  \t\tif(T%getRank().ne.2)then\n 13897: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13898  \t\t\tcall error_stop\n 13899  \t\tend if\n .....\n 13908  \t\tinteger::d(2)\n 13909  \t\tif(T%gettotalData().eq.0)then\n 13910: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13911  \t\t\tcall error_stop\n 13912  \t\tend if\n 13913  \t\tif(T%getType().ne.6)then\n 13914: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 13915  \t\t\tcall error_stop\n 13916  \t\tend if\n 13917  \t\tif(T%getRank().ne.2)then\n 13918: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13919  \t\t\tcall error_stop\n 13920  \t\tend if\n .....\n 13928  \t\tinteger::d(2)\n 13929  \t\tif(T%gettotalData().eq.0)then\n 13930: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13931  \t\t\tcall error_stop\n 13932  \t\tend if\n 13933  \t\tif(T%getType().ne.6)then\n 13934: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 13935  \t\t\tcall error_stop\n 13936  \t\tend if\n 13937  \t\tif(T%getRank().ne.2)then\n 13938: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13939  \t\t\tcall error_stop\n 13940  \t\tend if\n .....\n 13949  \t\tinteger::d(2)\n 13950  \t\tif(T%gettotalData().eq.0)then\n 13951: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13952  \t\t\tcall error_stop\n 13953  \t\tend if\n 13954  \t\tif(T%getType().ne.7)then\n 13955: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 13956  \t\t\tcall error_stop\n 13957  \t\tend if\n 13958  \t\tif(T%getRank().ne.2)then\n 13959: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13960  \t\t\tcall error_stop\n 13961  \t\tend if\n .....\n 13969  \t\tinteger::d(2)\n 13970  \t\tif(T%gettotalData().eq.0)then\n 13971: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13972  \t\t\tcall error_stop\n 13973  \t\tend if\n 13974  \t\tif(T%getType().ne.7)then\n 13975: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 13976  \t\t\tcall error_stop\n 13977  \t\tend if\n 13978  \t\tif(T%getRank().ne.2)then\n 13979: \t\t\tcall writemess('The rank of the Tensor is not 2, input error dimension pointer',-1)\n 13980  \t\t\tcall error_stop\n 13981  \t\tend if\n .....\n 13992  \t\tinteger::d(3)\n 13993  \t\tif(T%gettotalData().eq.0)then\n 13994: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 13995  \t\t\tcall error_stop\n 13996  \t\tend if\n 13997  \t\tif(T%getType().ne.1)then\n 13998: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 13999  \t\t\tcall error_stop\n 14000  \t\tend if\n 14001  \t\tif(T%getRank().ne.3)then\n 14002: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14003  \t\t\tcall error_stop\n 14004  \t\tend if\n .....\n 14012  \t\tinteger::d(3)\n 14013  \t\tif(T%gettotalData().eq.0)then\n 14014: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14015  \t\t\tcall error_stop\n 14016  \t\tend if\n 14017  \t\tif(T%getType().ne.1)then\n 14018: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 14019  \t\t\tcall error_stop\n 14020  \t\tend if\n 14021  \t\tif(T%getRank().ne.3)then\n 14022: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14023  \t\t\tcall error_stop\n 14024  \t\tend if\n .....\n 14034  \t\tinteger::d(3)\n 14035  \t\tif(T%gettotalData().eq.0)then\n 14036: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14037  \t\t\tcall error_stop\n 14038  \t\tend if\n 14039  \t\tif(T%getType().ne.2)then\n 14040: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14041  \t\t\tcall error_stop\n 14042  \t\tend if\n 14043  \t\tif(T%getRank().ne.3)then\n 14044: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14045  \t\t\tcall error_stop\n 14046  \t\tend if\n .....\n 14054  \t\tinteger::d(3)\n 14055  \t\tif(T%gettotalData().eq.0)then\n 14056: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14057  \t\t\tcall error_stop\n 14058  \t\tend if\n 14059  \t\tif(T%getType().ne.2)then\n 14060: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14061  \t\t\tcall error_stop\n 14062  \t\tend if\n 14063  \t\tif(T%getRank().ne.3)then\n 14064: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14065  \t\t\tcall error_stop\n 14066  \t\tend if\n .....\n 14075  \t\tinteger::d(3)\n 14076  \t\tif(T%gettotalData().eq.0)then\n 14077: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14078  \t\t\tcall error_stop\n 14079  \t\tend if\n 14080  \t\tif(T%getType().ne.3)then\n 14081: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14082  \t\t\tcall error_stop\n 14083  \t\tend if\n 14084  \t\tif(T%getRank().ne.3)then\n 14085: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14086  \t\t\tcall error_stop\n 14087  \t\tend if\n .....\n 14095  \t\tinteger::d(3)\n 14096  \t\tif(T%gettotalData().eq.0)then\n 14097: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14098  \t\t\tcall error_stop\n 14099  \t\tend if\n 14100  \t\tif(T%getType().ne.3)then\n 14101: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14102  \t\t\tcall error_stop\n 14103  \t\tend if\n 14104  \t\tif(T%getRank().ne.3)then\n 14105: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14106  \t\t\tcall error_stop\n 14107  \t\tend if\n .....\n 14117  \t\tinteger::d(3)\n 14118  \t\tif(T%gettotalData().eq.0)then\n 14119: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14120  \t\t\tcall error_stop\n 14121  \t\tend if\n 14122  \t\tif(T%getType().ne.4)then\n 14123: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14124  \t\t\tcall error_stop\n 14125  \t\tend if\n 14126  \t\tif(T%getRank().ne.3)then\n 14127: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14128  \t\t\tcall error_stop\n 14129  \t\tend if\n .....\n 14137  \t\tinteger::d(3)\n 14138  \t\tif(T%gettotalData().eq.0)then\n 14139: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14140  \t\t\tcall error_stop\n 14141  \t\tend if\n 14142  \t\tif(T%getType().ne.4)then\n 14143: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14144  \t\t\tcall error_stop\n 14145  \t\tend if\n 14146  \t\tif(T%getRank().ne.3)then\n 14147: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14148  \t\t\tcall error_stop\n 14149  \t\tend if\n .....\n 14159  \t\tinteger::d(3)\n 14160  \t\tif(T%gettotalData().eq.0)then\n 14161: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14162  \t\t\tcall error_stop\n 14163  \t\tend if\n 14164  \t\tif(T%getType().ne.5)then\n 14165: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14166  \t\t\tcall error_stop\n 14167  \t\tend if\n 14168  \t\tif(T%getRank().ne.3)then\n 14169: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14170  \t\t\tcall error_stop\n 14171  \t\tend if\n .....\n 14179  \t\tinteger::d(3)\n 14180  \t\tif(T%gettotalData().eq.0)then\n 14181: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14182  \t\t\tcall error_stop\n 14183  \t\tend if\n 14184  \t\tif(T%getType().ne.5)then\n 14185: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14186  \t\t\tcall error_stop\n 14187  \t\tend if\n 14188  \t\tif(T%getRank().ne.3)then\n 14189: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14190  \t\t\tcall error_stop\n 14191  \t\tend if\n .....\n 14201  \t\tinteger::d(3)\n 14202  \t\tif(T%gettotalData().eq.0)then\n 14203: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14204  \t\t\tcall error_stop\n 14205  \t\tend if\n 14206  \t\tif(T%getType().ne.6)then\n 14207: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14208  \t\t\tcall error_stop\n 14209  \t\tend if\n 14210  \t\tif(T%getRank().ne.3)then\n 14211: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14212  \t\t\tcall error_stop\n 14213  \t\tend if\n .....\n 14221  \t\tinteger::d(3)\n 14222  \t\tif(T%gettotalData().eq.0)then\n 14223: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14224  \t\t\tcall error_stop\n 14225  \t\tend if\n 14226  \t\tif(T%getType().ne.6)then\n 14227: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14228  \t\t\tcall error_stop\n 14229  \t\tend if\n 14230  \t\tif(T%getRank().ne.3)then\n 14231: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14232  \t\t\tcall error_stop\n 14233  \t\tend if\n .....\n 14243  \t\tinteger::d(3)\n 14244  \t\tif(T%gettotalData().eq.0)then\n 14245: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14246  \t\t\tcall error_stop\n 14247  \t\tend if\n 14248  \t\tif(T%getType().ne.7)then\n 14249: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 14250  \t\t\tcall error_stop\n 14251  \t\tend if\n 14252  \t\tif(T%getRank().ne.3)then\n 14253: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14254  \t\t\tcall error_stop\n 14255  \t\tend if\n .....\n 14263  \t\tinteger::d(3)\n 14264  \t\tif(T%gettotalData().eq.0)then\n 14265: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14266  \t\t\tcall error_stop\n 14267  \t\tend if\n 14268  \t\tif(T%getType().ne.7)then\n 14269: \t\t\tcall writemess('The type of Tensor is not  character(len=max_len_of_char_in_TData)',-1)\n 14270  \t\t\tcall error_stop\n 14271  \t\tend if\n 14272  \t\tif(T%getRank().ne.3)then\n 14273: \t\t\tcall writemess('The rank of the Tensor is not 3, input error dimension pointer',-1)\n 14274  \t\t\tcall error_stop\n 14275  \t\tend if\n .....\n 14285  \t\tinteger::d(4)\n 14286  \t\tif(T%gettotalData().eq.0)then\n 14287: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14288  \t\t\tcall error_stop\n 14289  \t\tend if\n 14290  \t\tif(T%getType().ne.1)then\n 14291: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 14292  \t\t\tcall error_stop\n 14293  \t\tend if\n 14294  \t\tif(T%getRank().ne.4)then\n 14295: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14296  \t\t\tcall error_stop\n 14297  \t\tend if\n .....\n 14305  \t\tinteger::d(4)\n 14306  \t\tif(T%gettotalData().eq.0)then\n 14307: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14308  \t\t\tcall error_stop\n 14309  \t\tend if\n 14310  \t\tif(T%getType().ne.1)then\n 14311: \t\t\tcall writemess('The type of Tensor is not  integer',-1)\n 14312  \t\t\tcall error_stop\n 14313  \t\tend if\n 14314  \t\tif(T%getRank().ne.4)then\n 14315: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14316  \t\t\tcall error_stop\n 14317  \t\tend if\n .....\n 14327  \t\tinteger::d(4)\n 14328  \t\tif(T%gettotalData().eq.0)then\n 14329: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14330  \t\t\tcall error_stop\n 14331  \t\tend if\n 14332  \t\tif(T%getType().ne.2)then\n 14333: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14334  \t\t\tcall error_stop\n 14335  \t\tend if\n 14336  \t\tif(T%getRank().ne.4)then\n 14337: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14338  \t\t\tcall error_stop\n 14339  \t\tend if\n .....\n 14347  \t\tinteger::d(4)\n 14348  \t\tif(T%gettotalData().eq.0)then\n 14349: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14350  \t\t\tcall error_stop\n 14351  \t\tend if\n 14352  \t\tif(T%getType().ne.2)then\n 14353: \t\t\tcall writemess('The type of Tensor is not  real*4',-1)\n 14354  \t\t\tcall error_stop\n 14355  \t\tend if\n 14356  \t\tif(T%getRank().ne.4)then\n 14357: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14358  \t\t\tcall error_stop\n 14359  \t\tend if\n .....\n 14369  \t\tinteger::d(4)\n 14370  \t\tif(T%gettotalData().eq.0)then\n 14371: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14372  \t\t\tcall error_stop\n 14373  \t\tend if\n 14374  \t\tif(T%getType().ne.3)then\n 14375: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14376  \t\t\tcall error_stop\n 14377  \t\tend if\n 14378  \t\tif(T%getRank().ne.4)then\n 14379: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14380  \t\t\tcall error_stop\n 14381  \t\tend if\n .....\n 14389  \t\tinteger::d(4)\n 14390  \t\tif(T%gettotalData().eq.0)then\n 14391: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14392  \t\t\tcall error_stop\n 14393  \t\tend if\n 14394  \t\tif(T%getType().ne.3)then\n 14395: \t\t\tcall writemess('The type of Tensor is not  real*8',-1)\n 14396  \t\t\tcall error_stop\n 14397  \t\tend if\n 14398  \t\tif(T%getRank().ne.4)then\n 14399: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14400  \t\t\tcall error_stop\n 14401  \t\tend if\n .....\n 14411  \t\tinteger::d(4)\n 14412  \t\tif(T%gettotalData().eq.0)then\n 14413: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14414  \t\t\tcall error_stop\n 14415  \t\tend if\n 14416  \t\tif(T%getType().ne.4)then\n 14417: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14418  \t\t\tcall error_stop\n 14419  \t\tend if\n 14420  \t\tif(T%getRank().ne.4)then\n 14421: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14422  \t\t\tcall error_stop\n 14423  \t\tend if\n .....\n 14431  \t\tinteger::d(4)\n 14432  \t\tif(T%gettotalData().eq.0)then\n 14433: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14434  \t\t\tcall error_stop\n 14435  \t\tend if\n 14436  \t\tif(T%getType().ne.4)then\n 14437: \t\t\tcall writemess('The type of Tensor is not  complex(kind=4)',-1)\n 14438  \t\t\tcall error_stop\n 14439  \t\tend if\n 14440  \t\tif(T%getRank().ne.4)then\n 14441: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14442  \t\t\tcall error_stop\n 14443  \t\tend if\n .....\n 14452  \t\tinteger::d(4)\n 14453  \t\tif(T%gettotalData().eq.0)then\n 14454: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14455  \t\t\tcall error_stop\n 14456  \t\tend if\n 14457  \t\tif(T%getType().ne.5)then\n 14458: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14459  \t\t\tcall error_stop\n 14460  \t\tend if\n 14461  \t\tif(T%getRank().ne.4)then\n 14462: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14463  \t\t\tcall error_stop\n 14464  \t\tend if\n .....\n 14472  \t\tinteger::d(4)\n 14473  \t\tif(T%gettotalData().eq.0)then\n 14474: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14475  \t\t\tcall error_stop\n 14476  \t\tend if\n 14477  \t\tif(T%getType().ne.5)then\n 14478: \t\t\tcall writemess('The type of Tensor is not  complex(kind=8)',-1)\n 14479  \t\t\tcall error_stop\n 14480  \t\tend if\n 14481  \t\tif(T%getRank().ne.4)then\n 14482: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14483  \t\t\tcall error_stop\n 14484  \t\tend if\n .....\n 14493  \t\tinteger::d(4)\n 14494  \t\tif(T%gettotalData().eq.0)then\n 14495: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14496  \t\t\tcall error_stop\n 14497  \t\tend if\n 14498  \t\tif(T%getType().ne.6)then\n 14499: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14500  \t\t\tcall error_stop\n 14501  \t\tend if\n 14502  \t\tif(T%getRank().ne.4)then\n 14503: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14504  \t\t\tcall error_stop\n 14505  \t\tend if\n .....\n 14513  \t\tinteger::d(4)\n 14514  \t\tif(T%gettotalData().eq.0)then\n 14515: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14516  \t\t\tcall error_stop\n 14517  \t\tend if\n 14518  \t\tif(T%getType().ne.6)then\n 14519: \t\t\tcall writemess('The type of Tensor is not  logical',-1)\n 14520  \t\t\tcall error_stop\n 14521  \t\tend if\n 14522  \t\tif(T%getRank().ne.4)then\n 14523: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14524  \t\t\tcall error_stop\n 14525  \t\tend if\n .....\n 14534  \t\tinteger::d(4)\n 14535  \t\tif(T%gettotalData().eq.0)then\n 14536: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14537  \t\t\tcall error_stop\n 14538  \t\tend if\n 14539  \t\tif(T%getType().ne.7)then\n 14540: \t\t\tcall writemess('The type of Tensor is not  character(len=characterLen)',-1)\n 14541  \t\t\tcall error_stop\n 14542  \t\tend if\n 14543  \t\tif(T%getRank().ne.4)then\n 14544: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14545  \t\t\tcall error_stop\n 14546  \t\tend if\n .....\n 14554  \t\tinteger::d(4)\n 14555  \t\tif(T%gettotalData().eq.0)then\n 14556: \t\t\tcall writemess('There is no data in the Tensor',-1)\n 14557  \t\t\tcall error_stop\n 14558  \t\tend if\n 14559  \t\tif(T%getType().ne.7)then\n 14560: \t\t\tcall writemess('The type of Tensor is not  character(len=characterLen)',-1)\n 14561  \t\t\tcall error_stop\n 14562  \t\tend if\n 14563  \t\tif(T%getRank().ne.4)then\n 14564: \t\t\tcall writemess('The rank of the Tensor is not 4, input error dimension pointer',-1)\n 14565  \t\t\tcall error_stop\n 14566  \t\tend if\n .....\n 14642  \t\t\t\tend do\n 14643  \t\t\tcase default\n 14644: \t\t\t\tcall writemess('The Tensor is integer, input type error, (which)',-1)\n 14645  \t\t\t\tcall error_stop\n 14646  \t\tend select\n .....\n 14661  \t\t\t\tend do\n 14662  \t\t\tcase default\n 14663: \t\t\t\tcall writemess('The Tensor is real, input type error, (which)',-1)\n 14664  \t\t\t\tcall error_stop\n 14665  \t\tend select\n .....\n 14681  \t\t\t\tend do\n 14682  \t\t\tcase default\n 14683: \t\t\t\tcall writemess('The Tensor is real*8, input type error, (which)',-1)\n 14684  \t\t\t\tcall error_stop\n 14685  \t\tend select\n .....\n 14701  \t\t\t\tend do\n 14702  \t\t\tcase default\n 14703: \t\t\t\tcall writemess('The Tensor is complex(kind=4), input type error, (which)',-1)\n 14704  \t\t\t\tcall error_stop\n 14705  \t\tend select\n .....\n 14721  \t\t\t\tend do\n 14722  \t\t\tcase default\n 14723: \t\t\t\tcall writemess('The Tensor is complex(kind=4), input type error, (which)',-1)\n 14724  \t\t\t\tcall error_stop\n 14725  \t\tend select\n .....\n 14740  \t\t\t\tend do\n 14741  \t\t\tcase default\n 14742: \t\t\t\tcall writemess('The Tensor is character, input type error, (which)',-1)\n 14743  \t\t\t\tcall error_stop\n 14744  \t\tend select\n .....\n 14761  \t\t\t\tend do\n 14762  \t\t\tcase default\n 14763: \t\t\t\tcall writemess('The Tensor is character, input type error, (which)',-1)\n 14764  \t\t\t\tcall error_stop\n 14765  \t\tend select\n .....\n 14773  \t\ttype(Tensor),intent(in) :: T\n 14774  \t\tif(.not.T%getFlag())then\n 14775: \t\t\tcall writemess('There is no data in T1,(sqrt)',-1)\n 14776  \t\t\tcall error_stop()\n 14777  \t\tend if\n 14778  \t\tif(T%gettotalData().gt.1)then\n 14779: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(sqrt)!!\",-1)\n 14780  \t\t\tcall error_stop()\n 14781  \t\tend if\n .....\n 14792  \t\t\t\tRes=cdsqrt(T%zi(1))\n 14793  \t\t\tcase default\n 14794: \t\t\t\tcall writemess(\"ERROR in sqrt,error type\",-1)\n 14795  \t\t\t\tcall error_stop()\n 14796  \t\tend select\n .....\n 14810  \t\tequal_of_Tensor=.true.\n 14811  \t\tif(.not.T1%getFlag())then\n 14812: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14813  \t\t\tcall error_stop()\n 14814  \t\tend if\n 14815  \t\tif(.not.T2%getFlag())then\n 14816: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14817  \t\t\tcall error_stop()\n 14818  \t\tend if\n .....\n 14847  \t\tinteger,intent(in)::num\n 14848  \t\tif(.not.T%getFlag())then\n 14849: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14850  \t\t\tcall error_stop()\n 14851  \t\tend if\n .....\n 14861  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14862  \t\t\tcase default\n 14863: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14864  \t\t\t\tcall error_stop()\n 14865  \t\tend select\n .....\n 14870  \t\tinteger,intent(in)::num\n 14871  \t\tif(.not.T%getFlag())then\n 14872: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14873  \t\t\tcall error_stop()\n 14874  \t\tend if\n .....\n 14884  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14885  \t\t\tcase default\n 14886: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14887  \t\t\t\tcall error_stop()\n 14888  \t\tend select\n .....\n 14893  \t\treal(kind=4),intent(in)::num\n 14894  \t\tif(.not.T%getFlag())then\n 14895: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14896  \t\t\tcall error_stop()\n 14897  \t\tend if\n .....\n 14907  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14908  \t\t\tcase default\n 14909: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14910  \t\t\t\tcall error_stop()\n 14911  \t\tend select\n .....\n 14916  \t\treal(kind=4),intent(in)::num\n 14917  \t\tif(.not.T%getFlag())then\n 14918: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14919  \t\t\tcall error_stop()\n 14920  \t\tend if\n .....\n 14930  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14931  \t\t\tcase default\n 14932: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14933  \t\t\t\tcall error_stop()\n 14934  \t\tend select\n .....\n 14939  \t\treal(kind=8),intent(in)::num\n 14940  \t\tif(.not.T%getFlag())then\n 14941: \t\t\tcall writemess('There is no data in T1,(.eq.)',-1)\n 14942  \t\t\tcall error_stop()\n 14943  \t\tend if\n .....\n 14953  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14954  \t\t\tcase default\n 14955: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14956  \t\t\t\tcall error_stop()\n 14957  \t\tend select\n .....\n 14962  \t\treal(kind=8),intent(in)::num\n 14963  \t\tif(.not.T%getFlag())then\n 14964: \t\t\tcall writemess('There is no data in T2,(.eq.)',-1)\n 14965  \t\t\tcall error_stop()\n 14966  \t\tend if\n .....\n 14976  \t\t\t\tT_eq_int=T%di(1).eq.num\n 14977  \t\t\tcase default\n 14978: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.eq.)!\",-1)\n 14979  \t\t\t\tcall error_stop()\n 14980  \t\tend select\n .....\n 14986  \t\tinteger :: l\n 14987  \t\tif(.not.T1%getFlag())then\n 14988: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 14989  \t\t\tcall error_stop()\n 14990  \t\tend if\n 14991  \t\tif(.not.T2%getFlag())then\n 14992: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 14993  \t\t\tcall error_stop()\n 14994  \t\tend if\n 14995  \t\tif(T1%gettotalData().gt.1)then\n 14996: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.le.)!!\",-1)\n 14997  \t\t\tcall error_stop()\n 14998  \t\tend if\n 14999  \t\tif(T1%gettotalData().gt.1)then\n 15000: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.le.)!!\",-1)\n 15001  \t\t\tcall error_stop()\n 15002  \t\tend if\n 15003  \t\tif(T1%getType().gt.3)then\n 15004: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15005  \t\t\tcall error_stop()\n 15006  \t\tend if\n 15007  \t\tif(T2%getType().gt.3)then\n 15008: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15009  \t\t\tcall error_stop()\n 15010  \t\tend if\n .....\n 15017  \t\tinteger,intent(in)::num\n 15018  \t\tif(.not.T%getFlag())then\n 15019: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15020  \t\t\tcall error_stop()\n 15021  \t\tend if\n 15022  \t\tif(T%gettotalData().gt.1)then\n 15023: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15024  \t\t\tcall error_stop()\n 15025  \t\tend if\n .....\n 15032  \t\t\t\tT_eq_int=T%di(1).le.num\n 15033  \t\t\tcase default\n 15034: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15035  \t\t\t\tcall error_stop()\n 15036  \t\tend select\n .....\n 15041  \t\tinteger,intent(in)::num\n 15042  \t\tif(.not.T%getFlag())then\n 15043: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15044  \t\t\tcall error_stop()\n 15045  \t\tend if\n 15046  \t\tif(T%gettotalData().gt.1)then\n 15047: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15048  \t\t\tcall error_stop()\n 15049  \t\tend if\n .....\n 15056  \t\t\t\tT_eq_int=num.le.T%di(1)\n 15057  \t\t\tcase default\n 15058: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15059  \t\t\t\tcall error_stop()\n 15060  \t\tend select\n .....\n 15066  \t\treal(kind=4),intent(in)::num\n 15067  \t\tif(.not.T%getFlag())then\n 15068: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15069  \t\t\tcall error_stop()\n 15070  \t\tend if\n 15071  \t\tif(T%gettotalData().gt.1)then\n 15072: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15073  \t\t\tcall error_stop()\n 15074  \t\tend if\n .....\n 15081  \t\t\t\tT_eq_int=T%di(1).le.num\n 15082  \t\t\tcase default\n 15083: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15084  \t\t\t\tcall error_stop()\n 15085  \t\tend select\n .....\n 15090  \t\treal(kind=4),intent(in)::num\n 15091  \t\tif(.not.T%getFlag())then\n 15092: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15093  \t\t\tcall error_stop()\n 15094  \t\tend if\n 15095  \t\tif(T%gettotalData().gt.1)then\n 15096: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15097  \t\t\tcall error_stop()\n 15098  \t\tend if\n .....\n 15105  \t\t\t\tT_eq_int=num.le.T%di(1)\n 15106  \t\t\tcase default\n 15107: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15108  \t\t\t\tcall error_stop()\n 15109  \t\tend select\n .....\n 15114  \t\treal(kind=8),intent(in)::num\n 15115  \t\tif(.not.T%getFlag())then\n 15116: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15117  \t\t\tcall error_stop()\n 15118  \t\tend if\n 15119  \t\tif(T%gettotalData().gt.1)then\n 15120: \t\t\tcall writemess('There is no data in T1,(.le.)',-1)\n 15121  \t\t\tcall error_stop()\n 15122  \t\tend if\n .....\n 15129  \t\t\t\tT_eq_int=T%di(1).le.num\n 15130  \t\t\tcase default\n 15131: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15132  \t\t\t\tcall error_stop()\n 15133  \t\tend select\n .....\n 15138  \t\treal(kind=8),intent(in)::num\n 15139  \t\tif(.not.T%getFlag())then\n 15140: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15141  \t\t\tcall error_stop()\n 15142  \t\tend if\n 15143  \t\tif(T%gettotalData().gt.1)then\n 15144: \t\t\tcall writemess('There is no data in T2,(.le.)',-1)\n 15145  \t\t\tcall error_stop()\n 15146  \t\tend if\n .....\n 15153  \t\t\t\tT_eq_int=num.le.T%di(1)\n 15154  \t\t\tcase default\n 15155: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.le.)!\",-1)\n 15156  \t\t\t\tcall error_stop()\n 15157  \t\tend select\n .....\n 15163  \t\tinteger :: l\n 15164  \t\tif(.not.T1%getFlag())then\n 15165: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15166  \t\t\tcall error_stop()\n 15167  \t\tend if\n 15168  \t\tif(.not.T2%getFlag())then\n 15169: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15170  \t\t\tcall error_stop()\n 15171  \t\tend if\n 15172  \t\tif(T1%gettotalData().gt.1)then\n 15173: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.lt.)!!\",-1)\n 15174  \t\t\tcall error_stop()\n 15175  \t\tend if\n 15176  \t\tif(T1%gettotalData().gt.2)then\n 15177: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.lt.)!!\",-1)\n 15178  \t\t\tcall error_stop()\n 15179  \t\tend if\n 15180  \t\tif(T1%getType().gt.3)then\n 15181: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15182  \t\t\tcall error_stop()\n 15183  \t\tend if\n 15184  \t\tif(T2%getType().gt.3)then\n 15185: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15186  \t\t\tcall error_stop()\n 15187  \t\tend if\n .....\n 15194  \t\tinteger,intent(in)::num\n 15195  \t\tif(.not.T%getFlag())then\n 15196: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15197  \t\t\tcall error_stop()\n 15198  \t\tend if\n 15199  \t\tif(T%gettotalData().gt.1)then\n 15200: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15201  \t\t\tcall error_stop()\n 15202  \t\tend if\n .....\n 15209  \t\t\t\tT_eq_int=T%di(1).lt.num\n 15210  \t\t\tcase default\n 15211: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15212  \t\t\t\tcall error_stop()\n 15213  \t\tend select\n .....\n 15218  \t\tinteger,intent(in)::num\n 15219  \t\tif(.not.T%getFlag())then\n 15220: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15221  \t\t\tcall error_stop()\n 15222  \t\tend if\n 15223  \t\tif(T%gettotalData().gt.1)then\n 15224: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15225  \t\t\tcall error_stop()\n 15226  \t\tend if\n .....\n 15233  \t\t\t\tT_eq_int=num.lt.T%di(1)\n 15234  \t\t\tcase default\n 15235: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15236  \t\t\t\tcall error_stop()\n 15237  \t\tend select\n .....\n 15243  \t\treal(kind=4),intent(in)::num\n 15244  \t\tif(.not.T%getFlag())then\n 15245: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15246  \t\t\tcall error_stop()\n 15247  \t\tend if\n 15248  \t\tif(T%gettotalData().gt.1)then\n 15249: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15250  \t\t\tcall error_stop()\n 15251  \t\tend if\n .....\n 15258  \t\t\t\tT_eq_int=T%di(1).lt.num\n 15259  \t\t\tcase default\n 15260: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15261  \t\t\t\tcall error_stop()\n 15262  \t\tend select\n .....\n 15267  \t\treal(kind=4),intent(in)::num\n 15268  \t\tif(.not.T%getFlag())then\n 15269: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15270  \t\t\tcall error_stop()\n 15271  \t\tend if\n 15272  \t\tif(T%gettotalData().gt.1)then\n 15273: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15274  \t\t\tcall error_stop()\n 15275  \t\tend if\n .....\n 15282  \t\t\t\tT_eq_int=num.lt.T%di(1)\n 15283  \t\t\tcase default\n 15284: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15285  \t\t\t\tcall error_stop()\n 15286  \t\tend select\n .....\n 15291  \t\treal(kind=8),intent(in)::num\n 15292  \t\tif(.not.T%getFlag())then\n 15293: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15294  \t\t\tcall error_stop()\n 15295  \t\tend if\n 15296  \t\tif(T%gettotalData().gt.1)then\n 15297: \t\t\tcall writemess('There is no data in T1,(.lt.)',-1)\n 15298  \t\t\tcall error_stop()\n 15299  \t\tend if\n .....\n 15306  \t\t\t\tT_eq_int=T%di(1).lt.num\n 15307  \t\t\tcase default\n 15308: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15309  \t\t\t\tcall error_stop()\n 15310  \t\tend select\n .....\n 15315  \t\treal(kind=8),intent(in)::num\n 15316  \t\tif(.not.T%getFlag())then\n 15317: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15318  \t\t\tcall error_stop()\n 15319  \t\tend if\n 15320  \t\tif(T%gettotalData().gt.1)then\n 15321: \t\t\tcall writemess('There is no data in T2,(.lt.)',-1)\n 15322  \t\t\tcall error_stop()\n 15323  \t\tend if\n .....\n 15330  \t\t\t\tT_eq_int=num.lt.T%di(1)\n 15331  \t\t\tcase default\n 15332: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.lt.)!\",-1)\n 15333  \t\t\t\tcall error_stop()\n 15334  \t\tend select\n .....\n 15341  \t\tinteger :: l\n 15342  \t\tif(.not.T1%getFlag())then\n 15343: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15344  \t\t\tcall error_stop()\n 15345  \t\tend if\n 15346  \t\tif(.not.T2%getFlag())then\n 15347: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15348  \t\t\tcall error_stop()\n 15349  \t\tend if\n 15350  \t\tif(T1%gettotalData().gt.1)then\n 15351: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.ge.)!!\",-1)\n 15352  \t\t\tcall error_stop()\n 15353  \t\tend if\n 15354  \t\tif(T1%gettotalData().gt.2)then\n 15355: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.ge.)!!\",-1)\n 15356  \t\t\tcall error_stop()\n 15357  \t\tend if\n 15358  \t\tif(T1%getType().gt.3)then\n 15359: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15360  \t\t\tcall error_stop()\n 15361  \t\tend if\n 15362  \t\tif(T2%getType().gt.3)then\n 15363: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15364  \t\t\tcall error_stop()\n 15365  \t\tend if\n .....\n 15372  \t\tinteger,intent(in)::num\n 15373  \t\tif(.not.T%getFlag())then\n 15374: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15375  \t\t\tcall error_stop()\n 15376  \t\tend if\n 15377  \t\tif(T%gettotalData().gt.1)then\n 15378: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15379  \t\t\tcall error_stop()\n 15380  \t\tend if\n .....\n 15387  \t\t\t\tT_eq_int=T%di(1).ge.num\n 15388  \t\t\tcase default\n 15389: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15390  \t\t\t\tcall error_stop()\n 15391  \t\tend select\n .....\n 15396  \t\tinteger,intent(in)::num\n 15397  \t\tif(.not.T%getFlag())then\n 15398: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15399  \t\t\tcall error_stop()\n 15400  \t\tend if\n 15401  \t\tif(T%gettotalData().gt.1)then\n 15402: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15403  \t\t\tcall error_stop()\n 15404  \t\tend if\n .....\n 15411  \t\t\t\tT_eq_int=num.ge.T%di(1)\n 15412  \t\t\tcase default\n 15413: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15414  \t\t\t\tcall error_stop()\n 15415  \t\tend select\n .....\n 15421  \t\treal(kind=4),intent(in)::num\n 15422  \t\tif(.not.T%getFlag())then\n 15423: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15424  \t\t\tcall error_stop()\n 15425  \t\tend if\n 15426  \t\tif(T%gettotalData().gt.1)then\n 15427: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15428  \t\t\tcall error_stop()\n 15429  \t\tend if\n .....\n 15436  \t\t\t\tT_eq_int=T%di(1).ge.num\n 15437  \t\t\tcase default\n 15438: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15439  \t\t\t\tcall error_stop()\n 15440  \t\tend select\n .....\n 15445  \t\treal(kind=4),intent(in)::num\n 15446  \t\tif(.not.T%getFlag())then\n 15447: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15448  \t\t\tcall error_stop()\n 15449  \t\tend if\n 15450  \t\tif(T%gettotalData().gt.1)then\n 15451: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15452  \t\t\tcall error_stop()\n 15453  \t\tend if\n .....\n 15460  \t\t\t\tT_eq_int=num.ge.T%di(1)\n 15461  \t\t\tcase default\n 15462: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15463  \t\t\t\tcall error_stop()\n 15464  \t\tend select\n .....\n 15469  \t\treal(kind=8),intent(in)::num\n 15470  \t\tif(.not.T%getFlag())then\n 15471: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15472  \t\t\tcall error_stop()\n 15473  \t\tend if\n 15474  \t\tif(T%gettotalData().gt.1)then\n 15475: \t\t\tcall writemess('There is no data in T1,(.ge.)',-1)\n 15476  \t\t\tcall error_stop()\n 15477  \t\tend if\n .....\n 15484  \t\t\t\tT_eq_int=T%di(1).ge.num\n 15485  \t\t\tcase default\n 15486: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15487  \t\t\t\tcall error_stop()\n 15488  \t\tend select\n .....\n 15493  \t\treal(kind=8),intent(in)::num\n 15494  \t\tif(.not.T%getFlag())then\n 15495: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15496  \t\t\tcall error_stop()\n 15497  \t\tend if\n 15498  \t\tif(T%gettotalData().gt.1)then\n 15499: \t\t\tcall writemess('There is no data in T2,(.ge.)',-1)\n 15500  \t\t\tcall error_stop()\n 15501  \t\tend if\n .....\n 15508  \t\t\t\tT_eq_int=num.ge.T%di(1)\n 15509  \t\t\tcase default\n 15510: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.ge.)!\",-1)\n 15511  \t\t\t\tcall error_stop()\n 15512  \t\tend select\n .....\n 15518  \t\tinteger :: l\n 15519  \t\tif(.not.T1%getFlag())then\n 15520: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15521  \t\t\tcall error_stop()\n 15522  \t\tend if\n 15523  \t\tif(.not.T2%getFlag())then\n 15524: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15525  \t\t\tcall error_stop()\n 15526  \t\tend if\n 15527  \t\tif(T1%gettotalData().gt.1)then\n 15528: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.gt.)!!\",-1)\n 15529  \t\t\tcall error_stop()\n 15530  \t\tend if\n 15531  \t\tif(T1%gettotalData().gt.2)then\n 15532: \t\t\tcall writemess(\"ONLY FOR Tensor with one element,(.gt.)!!\",-1)\n 15533  \t\t\tcall error_stop()\n 15534  \t\tend if\n 15535  \t\tif(T1%getType().gt.3)then\n 15536: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15537  \t\t\tcall error_stop()\n 15538  \t\tend if\n 15539  \t\tif(T2%getType().gt.3)then\n 15540: \t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15541  \t\t\tcall error_stop()\n 15542  \t\tend if\n .....\n 15549  \t\tinteger,intent(in)::num\n 15550  \t\tif(.not.T%getFlag())then\n 15551: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15552  \t\t\tcall error_stop()\n 15553  \t\tend if\n 15554  \t\tif(T%gettotalData().gt.1)then\n 15555: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15556  \t\t\tcall error_stop()\n 15557  \t\tend if\n .....\n 15564  \t\t\t\tT_eq_int=T%di(1).gt.num\n 15565  \t\t\tcase default\n 15566: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15567  \t\t\t\tcall error_stop()\n 15568  \t\tend select\n .....\n 15573  \t\tinteger,intent(in)::num\n 15574  \t\tif(.not.T%getFlag())then\n 15575: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15576  \t\t\tcall error_stop()\n 15577  \t\tend if\n 15578  \t\tif(T%gettotalData().gt.1)then\n 15579: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15580  \t\t\tcall error_stop()\n 15581  \t\tend if\n .....\n 15588  \t\t\t\tT_eq_int=num.gt.T%di(1)\n 15589  \t\t\tcase default\n 15590: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15591  \t\t\t\tcall error_stop()\n 15592  \t\tend select\n .....\n 15598  \t\treal(kind=4),intent(in)::num\n 15599  \t\tif(.not.T%getFlag())then\n 15600: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15601  \t\t\tcall error_stop()\n 15602  \t\tend if\n 15603  \t\tif(T%gettotalData().gt.1)then\n 15604: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15605  \t\t\tcall error_stop()\n 15606  \t\tend if\n .....\n 15613  \t\t\t\tT_eq_int=T%di(1).gt.num\n 15614  \t\t\tcase default\n 15615: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15616  \t\t\t\tcall error_stop()\n 15617  \t\tend select\n .....\n 15622  \t\treal(kind=4),intent(in)::num\n 15623  \t\tif(.not.T%getFlag())then\n 15624: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15625  \t\t\tcall error_stop()\n 15626  \t\tend if\n 15627  \t\tif(T%gettotalData().gt.1)then\n 15628: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15629  \t\t\tcall error_stop()\n 15630  \t\tend if\n .....\n 15637  \t\t\t\tT_eq_int=num.gt.T%di(1)\n 15638  \t\t\tcase default\n 15639: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15640  \t\t\t\tcall error_stop()\n 15641  \t\tend select\n .....\n 15646  \t\treal(kind=8),intent(in)::num\n 15647  \t\tif(.not.T%getFlag())then\n 15648: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15649  \t\t\tcall error_stop()\n 15650  \t\tend if\n 15651  \t\tif(T%gettotalData().gt.1)then\n 15652: \t\t\tcall writemess('There is no data in T1,(.gt.)',-1)\n 15653  \t\t\tcall error_stop()\n 15654  \t\tend if\n .....\n 15661  \t\t\t\tT_eq_int=T%di(1).gt.num\n 15662  \t\t\tcase default\n 15663: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15664  \t\t\t\tcall error_stop()\n 15665  \t\tend select\n .....\n 15670  \t\treal(kind=8),intent(in)::num\n 15671  \t\tif(.not.T%getFlag())then\n 15672: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15673  \t\t\tcall error_stop()\n 15674  \t\tend if\n 15675  \t\tif(T%gettotalData().gt.1)then\n 15676: \t\t\tcall writemess('There is no data in T2,(.gt.)',-1)\n 15677  \t\t\tcall error_stop()\n 15678  \t\tend if\n .....\n 15685  \t\t\t\tT_eq_int=num.gt.T%di(1)\n 15686  \t\t\tcase default\n 15687: \t\t\t\tcall writemess(\"ONLY FOR Tensor of integer or real,(.gt.)!\",-1)\n 15688  \t\t\t\tcall error_stop()\n 15689  \t\tend select\n .....\n 15820  \t\t\t\tdotTensor=zdotTensor(phi1,phi2)\n 15821  \t\t\tcase default\n 15822: \t\t\t\tcall writemess(\"ERROR in .x.\",-1)\n 15823  \t\t\t\tcall error_stop()\n 15824  \t\tend select\n .....\n 15958  \t\t\t\tdotTensor=zdotUTensor(phi1,phi2)\n 15959  \t\t\tcase default\n 15960: \t\t\t\tcall writemess(\"ERROR in .dot.\",-1)\n 15961  \t\t\t\tcall error_stop()\n 15962  \t\tend select\n .....\n 16042  \t\t\t\tnormTensor=dble(z)\n 16043  \t\t\tcase default\n 16044: \t\t\t\tcall writemess(\"ERROR in norm\",-1)\n 16045  \t\t\t\tcall error_stop()\n 16046  \t\tend select\n .....\n 16211  \t\trank=getRank(T)\n 16212  \t\tif(rank.ne.2) then\n 16213: \t\t\tcall writemess(\"error in trace\",-1)\n 16214: \t\t\tcall writemess(\"input Tensor should be a matrix\",-1)\n 16215  \t\t\tcall error_stop()\n 16216  \t\tend if\n 16217  \t\tif((T.dim.1).ne.(T.dim.2)) then\n 16218: \t\t\tcall writemess(\"error in trace\",-1)\n 16219: \t\t\tcall writemess(\"input Tensor should be a matrix\",-1)\n 16220: \t\t\tcall writemess((T.dim.1)+','+(T.dim.2),-1)\n 16221  \t\t\tcall error_stop()\n 16222  \t\tend if\n .....\n 16233  \t\t\t\ttrace=ztraceTensor(T)\n 16234  \t\t\tcase default\n 16235: \t\t\t\tcall writemess(\"ERROR in trace\",-1)\n 16236  \t\t\t\tcall error_stop()\n 16237  \t\tend \tselect\n .....\n 16829  \t\trank2=T2%Getrank()\n 16830  \t\tif(rank1.ne.rank2) then\n 16831: \t\t\tcall writemess('can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16832  \t\t\tcall error_stop()\n 16833  \t\tend if\n 16834  \t\tif(row)then\n 16835  \t\t\tif(rank1.eq.1)then\n 16836: \t\t\t\t!call writemess('Do not finsiehd this part,can not paste two Tensor,ranks are,'+rank1+','+rank2)\n 16837  \t\t\t\t!call error_stop()\n 16838  \t\t\t\tpasteDim1=1\n .....\n 16851  \t\t\t\t\tcollen=collen*T1%dim(i)\n 16852  \t\t\t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16853: \t\t\t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16854: \t\t\t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i),-1)\n 16855: \t\t\t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i),-1)\n 16856  \t\t\t\t\t\tcall error_stop()\n 16857  \t\t\t\t\tend if\n .....\n 16861  \t\t\t\tcall newDim%setName(1,T1%outName(1))\n 16862  \t\t\telse if(T1%outNameFlag().eq.2)then\n 16863: \t\t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16864  \t\t\t\tcall error_stop()\n 16865  \t\t\tend if\n .....\n 16876  \t\t\t\tcollen=collen*T1%dim(i)\n 16877  \t\t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16878: \t\t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16879: \t\t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i),-1)\n 16880: \t\t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i),-1)\n 16881  \t\t\t\t\tcall error_stop()\n 16882  \t\t\t\tend if\n .....\n 16886  \t\t\t\tcall newDim%setName(rank1,T1%outName(rank1))\n 16887  \t\t\telse if(T1%outNameFlag().eq.2)then\n 16888: \t\t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16889  \t\t\t\tcall error_stop()\n 16890  \t\t\tend if\n .....\n 16905  \t\trank2=T2%Getrank()\n 16906  \t\tif(rank1.ne.rank2) then\n 16907: \t\t\tcall writemess('can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16908  \t\t\tcall error_stop()\n 16909  \t\tend if\n 16910  \t\tif(rank1.eq.1)then\n 16911: \t\t\tcall writemess('Do not finsiehd this part,can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16912  \t\t\tcall error_stop()\n 16913  \t\tend if\n .....\n 16921  \t\t\tcollen=collen*T1%dim(i)\n 16922  \t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16923: \t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16924: \t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i))\n 16925: \t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i))\n 16926  \t\t\t\tcall error_stop()\n 16927  \t\t\tend if\n .....\n 16930  \t\t\tcall newDim%setName(1,T1%outName(1))\n 16931  \t\telse if(T1%outNameFlag().eq.2)then\n 16932: \t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16933  \t\t\tcall error_stop()\n 16934  \t\tend if\n .....\n 16947  \t\trank2=T2%Getrank()\n 16948  \t\tif(rank1.ne.rank2) then\n 16949: \t\t\tcall writemess('can not paste two Tensor,ranks are,'+rank1+','+rank2,-1)\n 16950  \t\t\tcall error_stop()\n 16951  \t\tend if\n .....\n 16958  \t\t\tcollen=collen*T1%dim(i)\n 16959  \t\t\tif(T1%dim(i).ne.T2%dim(i))then\n 16960: \t\t\t\tcall writemess('can not paste two Tensor,in the ,'+i+'th dimension',-1)\n 16961: \t\t\t\tcall writemess('T1%dim('+i+')='+T1%dim(i),-1)\n 16962: \t\t\t\tcall writemess('T2%dim('+i+')='+T2%dim(i),-1)\n 16963  \t\t\t\tcall error_stop()\n 16964  \t\t\tend if\n .....\n 16968  \t\t\tcall newDim%setName(rank1,T1%outName(rank1))\n 16969  \t\telse if(T1%outNameFlag().eq.2)then\n 16970: \t\t\tcall writemess(\"ERROR in pasteTensor,Tensor.f90\",-1)\n 16971  \t\t\tcall error_stop()\n 16972  \t\tend if\n .....\n 17011  \t\tif(associated(Tp,Up).or.associated(Tp,sp).or.associated(Tp,Vp).or.associated(Up,sp).or.&\n 17012  \t\t\t\tassociated(Up,Vp).or.associated(sp,Vp))then\n 17013: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 17014: \t\t\tcall writemess('error in call T%SVDroutine(U,S,V,Ncut)')\n 17015: \t\t\tcall writemess('T, U, s and V can not be a same variable')\n 17016  \t\t\tcall error_stop\n 17017  \t\tend if\n .....\n 17070  \t\tcall SVD_TData_routine(T%TData,U%TData,S%TData,V%TData,m,n,min_MN,Ncut_,info)\n 17071  \t\tif(info.ne.0) then\n 17072: \t\t\tcall writemess('Error in svd ,info='+info,-1)\n 17073: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17074  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17075  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17081  \t\tend if\n 17082  \t\tif(S%isnan())then!The number in S is less than U,V and T\n 17083: \t\t\tcall writemess('Error in svd ,NAN ERROR',-1)\n 17084: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17085  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17086  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17117  \t\tif(associated(Tp,Up).or.associated(Tp,sp).or.associated(Tp,Vp).or.associated(Up,sp).or.&\n 17118  \t\t\t\tassociated(Up,Vp).or.associated(sp,Vp))then\n 17119: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 17120: \t\t\tcall writemess('error in call T%SVDroutine(U,S,V,nameU,nameV,Ncut)')\n 17121: \t\t\tcall writemess('T, U, s and V can not be a same variable')\n 17122  \t\t\tcall error_stop\n 17123  \t\tend if\n .....\n 17137  \t\tend do\n 17138  \t\tif(rankU+rankV.ne.rank) then\n 17139: \t\t\tcall writemess(\"ERROR in SVDcutoff_name\",-1)\n 17140: \t\t\tcall writemess(nameU+','+nameV,-1)\n 17141  \t\t\tcall inputT%diminfo()\n 17142: \t\t\tcall writemess(rankU+','+rankV+','+rank,-1)\n 17143  \t\t\tcall error_stop()\n 17144  \t\tend if\n 17145  \t\tif(rankU.eq.0) then\n 17146: \t\t\tcall writemess(\"ERROR in SVDcutoff_name,no such name\",-1)\n 17147: \t\t\tcall writemess(nameU,-1)\n 17148  \t\t\tcall error_stop()\n 17149  \t\tend if\n 17150  \t\tif(rankV.eq.0) then\n 17151: \t\t\tcall writemess(\"ERROR in SVDcutoff_name,no such name\",-1)\n 17152: \t\t\tcall writemess(nameV,-1)\n 17153  \t\t\tcall error_stop()\n 17154  \t\tend if\n .....\n 17204  \t\tcall SVD_TData_routine(T%TData,U%TData,S%TData,V%TData,m,n,min_MN,Ncut_,info)\n 17205  \t\tif(info.ne.0) then\n 17206: \t\t\tcall writemess('Error in svd ,info='+info,-1)\n 17207: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17208  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17209  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17215  \t\tend if\n 17216  \t\tif(S%isnan())then!The number in S is less than U,V and T\n 17217: \t\t\tcall writemess('Error in svd ,NAN ERROR',-1)\n 17218: \t\t\tcall writemess('output The data in ./_SVD_ERROR_LOG.err',-1)\n 17219  \t\t\topen(unit=9991,file='./_SVD_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17220  \t\t\tcall T%writeinfo('The Matrix in SVD',9991)\n .....\n 17306  \t\t\tcall SVDcutoff(Temp,res(1),res(2),res(3),Ncut_)\n 17307  \t\telse\n 17308: \t\t\tcall writemess('DRROR in SVD, row='+row,-1)\n 17309: \t\t\tcall writemess('row is r or c',-1)\n 17310  \t\t\tcall error_stop\n 17311  \t\tend if\n .....\n 17342  \t\t\tcall SVDcutoff(Temp,U,s,V,Ncut_)\n 17343  \t\telse\n 17344: \t\t\tcall writemess('DRROR in SVD, row='+row,-1)\n 17345: \t\t\tcall writemess('row is r or c',-1)\n 17346  \t\t\tcall error_stop\n 17347  \t\tend if\n .....\n 17451  \t\trank=T%getRank()\n 17452  \t\tif((lenName1+lenName2).ne.rank)then\n 17453: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17454: \t\t\tcall writemess('rank='+rank,-1)\n 17455: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17456  \t\t\tcall error_stop\n 17457  \t\tend if\n .....\n 17483  \t\trank=T%getRank()\n 17484  \t\tif((lenName1+lenName2).ne.rank)then\n 17485: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17486: \t\t\tcall writemess('rank='+rank,-1)\n 17487: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17488  \t\t\tcall error_stop\n 17489  \t\tend if\n .....\n 17645  \t\tQp=>Q\n 17646  \t\tif(associated(Tp,Lp).or.associated(Tp,Qp).or.associated(Lp,Qp))then\n 17647: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 17648: \t\t\tcall writemess('error in call T%LQTensor(L,Q)')\n 17649: \t\t\tcall writemess('T, L and V can not be a same variable')\n 17650  \t\t\tcall error_stop\n 17651  \t\tend if\n .....\n 17668  \t\t\n 17669  \t\tif(info.ne.0) then\n 17670: \t\t\tcall writemess('Error in LQ decomposition ,info='+info,-1)\n 17671: \t\t\tcall writemess('output The data in ./_LQ_ERROR_LOG.err',-1)\n 17672  \t\t\topen(unit=9991,file='./_LQ_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17673  \t\t\tcall T%writeinfo('The Matrix in LQ',9991)\n .....\n 17727  \t\t\tQ%TenDim=dimen\n 17728  \t\t\tif(info.ne.0) then\n 17729: \t\t\t\tcall writemess('Error in LQ decomposition ,info='+info,-1)\n 17730: \t\t\t\tcall writemess('output The data in ./_LQ_ERROR_LOG.err',-1)\n 17731  \t\t\t\topen(unit=9991,file='./_LQ_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 17732  \t\t\t\tcall T%writeinfo('The Matrix in LQ',9991)\n .....\n 17763  \t\tend do\n 17764  \t\tif(rankU+rankV.ne.rank) then\n 17765: \t\t\tcall writemess(\"ERROR in LQTensor_name\",-1)\n 17766: \t\t\tcall writemess(rankU+','+rankV+','+rank,-1)\n 17767  \t\t\tcall error_stop()\n 17768  \t\tend if\n 17769  \t\tif(rankU.eq.0) then\n 17770: \t\t\tcall writemess(\"ERROR in LQTensor_name,no such name\",-1)\n 17771: \t\t\tcall writemess(nameU,-1)\n 17772  \t\t\tcall error_stop()\n 17773  \t\tend if\n 17774  \t\tif(rankV.eq.0) then\n 17775: \t\t\tcall writemess(\"ERROR in LQTensor_name,no such name\",-1)\n 17776: \t\t\tcall writemess(nameV,-1)\n 17777  \t\t\tcall error_stop()\n 17778  \t\tend if\n .....\n 17827  \t\t\tcall LQdecomposition1(Temp,res(1),res(2))\n 17828  \t\telse\n 17829: \t\t\tcall writemess('ERROR in LQ, row='+row,-1)\n 17830: \t\t\tcall writemess('row is r or c',-1)\n 17831  \t\t\tcall error_stop\n 17832  \t\tend if\n .....\n 17893  \t\t\tcall LQdecomposition1(Temp,L,Q)\n 17894  \t\telse\n 17895: \t\t\tcall writemess('DRROR in LQ, row='+row,-1)\n 17896: \t\t\tcall writemess('row is r or c',-1)\n 17897  \t\t\tcall error_stop\n 17898  \t\tend if\n .....\n 17943  \t\trank=T%getRank()\n 17944  \t\tif((lenName1+lenName2).ne.rank)then\n 17945: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17946: \t\t\tcall writemess('rank='+rank,-1)\n 17947: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17948  \t\t\tcall error_stop\n 17949  \t\tend if\n .....\n 17971  \t\trank=T%getRank()\n 17972  \t\tif((lenName1+lenName2).ne.rank)then\n 17973: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 17974: \t\t\tcall writemess('rank='+rank,-1)\n 17975: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 17976  \t\t\tcall error_stop\n 17977  \t\tend if\n .....\n 18007  \t\tQp=>R\n 18008  \t\tif(associated(Tp,Lp).or.associated(Tp,Qp).or.associated(Lp,Qp))then\n 18009: \t\t\tcall writemess('input Tensors can not be the same variable',-1)\n 18010: \t\t\tcall writemess('error in call T%QRTensor(Q,R)')\n 18011: \t\t\tcall writemess('T, Q and R can not be a same variable')\n 18012  \t\t\tcall error_stop\n 18013  \t\tend if\n .....\n 18027  \t\tcall TData_QR(Tau%TData,R%TData,M,N,INFO)\n 18028  \t\tif(info.ne.0) then\n 18029: \t\t\tcall writemess('Error in QR decomposition ,info='+info,-1)\n 18030: \t\t\tcall writemess('output The data in ./_QR_ERROR_LOG.err',-1)\n 18031  \t\t\topen(unit=9991,file='./_QR_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 18032  \t\t\tcall T%writeinfo('The Matrix in QR',9991)\n .....\n 18087  \t\t\tQ%TenDim=dimen\n 18088  \t\t\tif(info.ne.0) then\n 18089: \t\t\t\tcall writemess('Error in QR decomposition ,info='+info,-1)\n 18090: \t\t\t\tcall writemess('output The data in ./_QR_ERROR_LOG.err',-1)\n 18091  \t\t\t\topen(unit=9991,file='./_QR_ERROR_LOG.err',STATUS='replace',POSITION='APPEND')\n 18092  \t\t\t\tcall T%writeinfo('The Matrix in QR',9991)\n .....\n 18121  \t\tend do\n 18122  \t\tif(rankU+rankV.ne.rank) then\n 18123: \t\t\tcall writemess(\"ERROR in QRTensor_name\",-1)\n 18124: \t\t\tcall writemess(rankU+','+rankV+','+rank,-1)\n 18125  \t\t\tcall error_stop()\n 18126  \t\tend if\n 18127  \t\tif(rankU.eq.0) then\n 18128: \t\t\tcall writemess(\"ERROR in QRTensor_name,no such name\",-1)\n 18129: \t\t\tcall writemess(nameU,-1)\n 18130  \t\t\tcall error_stop()\n 18131  \t\tend if\n 18132  \t\tif(rankV.eq.0) then\n 18133: \t\t\tcall writemess(\"ERROR in QRTensor_name,no such name\",-1)\n 18134: \t\t\tcall writemess(nameV,-1)\n 18135  \t\t\tcall error_stop()\n 18136  \t\tend if\n .....\n 18187  \t\t\tcall QRdecomposition1(Temp,res(1),res(2))\n 18188  \t\telse\n 18189: \t\t\tcall writemess('ERROR in LQ, row='+row,-1)\n 18190: \t\t\tcall writemess('row is r or c',-1)\n 18191  \t\t\tcall error_stop\n 18192  \t\tend if\n .....\n 18254  \t\t\tcall QRdecomposition1(Temp,Q,R)\n 18255  \t\telse\n 18256: \t\t\tcall writemess('DRROR in LQ, row='+row,-1)\n 18257: \t\t\tcall writemess('row is r or c',-1)\n 18258  \t\t\tcall error_stop\n 18259  \t\tend if\n .....\n 18305  \t\trank=T%getRank()\n 18306  \t\tif((lenName1+lenName2).ne.rank)then\n 18307: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 18308: \t\t\tcall writemess('rank='+rank,-1)\n 18309: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 18310  \t\t\tcall error_stop\n 18311  \t\tend if\n .....\n 18333  \t\trank=T%getRank()\n 18334  \t\tif((lenName1+lenName2).ne.rank)then\n 18335: \t\t\tcall writemess('size(LegNameRow)='+lenName1+'size(LegNameCol)='+lenName2,-1)\n 18336: \t\t\tcall writemess('rank='+rank,-1)\n 18337: \t\t\tcall writemess('rank should be equal to size(LegNameRow)+size(LegNameCol)')\n 18338  \t\t\tcall error_stop\n 18339  \t\tend if\n .....\n 19487  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19488  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19489: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_SUM_Tensor',-1)\n 19490  \t\t\ttag=1\n 19491  \t\t\ttypechar=inTensor%getclassType()\n 19492: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19493  \t\t\tdo i=1,proNum-1\n 19494  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19495  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19496: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19497  \t\t\tend do\n 19498  \t\t\tcall error_stop()\n .....\n 19511  \t\t\t\treturn\n 19512  \t\t\tend if\n 19513: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_SUM_Tensor')\n 19514  \t\t\tcall error_stop\n 19515  \t\tend if\n 19516  \t\tif(classtype.gt.5)then\n 19517: \t\t\tcall writemess('The data type in Tensor can not be sum,the data type is classType='+inTensor%getclassType(),-1)\n 19518  \t\t\tcall error_stop()\n 19519  \t\tend if\n .....\n 19544  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19545  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19546: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_SUM_Tensor',-1)\n 19547  \t\t\ttag=1\n 19548  \t\t\ttypechar=inoutTensor%getclassType()\n 19549: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19550  \t\t\tdo i=1,proNum-1\n 19551  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19552  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19553: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19554  \t\t\tend do\n 19555  \t\t\tcall error_stop()\n .....\n 19569  \t\t\t\treturn\n 19570  \t\t\tend if\n 19571: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_SUM_Tensor')\n 19572  \t\t\tcall error_stop\n 19573  \t\tend if\n 19574  \t\t\n 19575  \t\tif(classtype.gt.5)then\n 19576: \t\t\tcall writemess('The data type in Tensor can not be sum,the data type is classType='+inoutTensor%getclassType(),-1)\n 19577  \t\t\tcall error_stop()\n 19578  \t\tend if\n .....\n 19602  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19603  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19604: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MAX_Tensor',-1)\n 19605  \t\t\ttag=1\n 19606  \t\t\ttypechar=inTensor%getclassType()\n 19607: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19608  \t\t\tdo i=1,proNum-1\n 19609  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19610  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19611: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19612  \t\t\tend do\n 19613  \t\t\tcall error_stop()\n .....\n 19616  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19617  \t\tif(.not.ALLgoonFlag)then\n 19618: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MAX_Tensor')\n 19619  \t\t\tcall error_stop\n 19620  \t\tend if\n 19621  \t\tif(classtype.ge.4)then\n 19622: \t\t\tcall writemess('The data type in Tensor can not Find MAX,the data type is classType='+inTensor%getclassType(),-1)\n 19623  \t\t\tcall error_stop()\n 19624  \t\tend if\n .....\n 19649  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19650  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19651: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MAX_Tensor',-1)\n 19652  \t\t\ttag=1\n 19653  \t\t\ttypechar=inoutTensor%getclassType()\n 19654: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19655  \t\t\tdo i=1,proNum-1\n 19656  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19657  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19658: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19659  \t\t\tend do\n 19660  \t\t\tcall error_stop()\n .....\n 19664  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19665  \t\tif(.not.ALLgoonFlag)then\n 19666: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MAX_Tensor')\n 19667  \t\t\tcall error_stop\n 19668  \t\tend if\n 19669  \t\t\n 19670  \t\tif(classtype.ge.4)then\n 19671: \t\t\tcall writemess('The data type in Tensor can not Find MAX,the data type is classType='+inoutTensor%getclassType(),-1)\n 19672  \t\t\tcall error_stop()\n 19673  \t\tend if\n .....\n 19697  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19698  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19699: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MIN_Tensor',-1)\n 19700  \t\t\ttag=1\n 19701  \t\t\ttypechar=inTensor%getclassType()\n 19702: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19703  \t\t\tdo i=1,proNum-1\n 19704  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19705  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19706: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19707  \t\t\tend do\n 19708  \t\t\tcall error_stop()\n .....\n 19711  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19712  \t\tif(.not.ALLgoonFlag)then\n 19713: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MIN_Tensor')\n 19714  \t\t\tcall error_stop\n 19715  \t\tend if\n 19716  \t\t\n 19717  \t\tif(classtype.ge.4)then\n 19718: \t\t\tcall writemess('The data type in Tensor can not Find MIN,the data type is classType='+inTensor%getclassType(),-1)\n 19719  \t\t\tcall error_stop()\n 19720  \t\tend if\n .....\n 19745  \t\t\tcall mpi_comm_rank(mpi_comm,proID,ierr)\n 19746  \t\t\tcall mpi_comm_size(mpi_comm,proNum,ierr )\n 19747: \t\t\tcall writemess('The data type is not the same in every cpu when calling MPI_MIN_Tensor',-1)\n 19748  \t\t\ttag=1\n 19749  \t\t\ttypechar=inoutTensor%getclassType()\n 19750: \t\t\tcall writemess('The data type in CPU'+proID+'is classtype='+typechar,-1)\n 19751  \t\t\tdo i=1,proNum-1\n 19752  \t\t\t\tif(proID.eq.i)call mpi_send(typechar,20,MPI_character,0,tag,mpi_comm,ierr)\n 19753  \t\t\t\tif(proID.eq.0)call mpi_recv(typechar,20,MPI_character,i,tag,mpi_comm,istatus,ierr)\n 19754: \t\t\t\tcall writemess('The data type in CPU'+i+'is classtype='+typechar,-1)\n 19755  \t\t\tend do\n 19756  \t\t\tcall error_stop()\n .....\n 19759  \t\tcall MPI_ALLREDUCE(goonFlag,ALLgoonFlag,1,MPI_logical,MPI_LAND,mpi_comm,ierr)\n 19760  \t\tif(.not.ALLgoonFlag)then\n 19761: \t\t\tcall writemess('There are empty Tensor in some cpu, MPI_MIN_Tensor')\n 19762  \t\t\tcall error_stop\n 19763  \t\tend if\n 19764  \t\tif(classtype.ge.4)then\n 19765: \t\t\tcall writemess('The data type in Tensor can not Find MIN,the data type is classType='+inoutTensor%getclassType(),-1)\n 19766  \t\t\tcall error_stop()\n 19767  \t\tend if\n .....\n 19875  \t\t\t\t\t\tmem%DimLength=length\n 19876  \t\t\t\t\telse\n 19877: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19878  \t\t\t\t\t\tif(present(w))then\n 19879: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19880: \t\t\t\t\t\t\tcall writemess(w)\n 19881  \t\t\t\t\t\tend if\n 19882  \t\t\t\t\t\tcall error_stop()\n .....\n 19890  \t\t\t\t\t\tmem%TLength=length\n 19891  \t\t\t\t\telse\n 19892: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19893  \t\t\t\t\t\tif(present(w))then\n 19894: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19895: \t\t\t\t\t\t\tcall writemess(w)\n 19896  \t\t\t\t\t\tend if\n 19897  \t\t\t\t\t\tcall error_stop()\n .....\n 19915  \t\t\t\t\t\tmem%DimLength=length\n 19916  \t\t\t\t\telse\n 19917: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19918  \t\t\t\t\t\tif(present(w))then\n 19919: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19920: \t\t\t\t\t\t\tcall writemess(w)\n 19921  \t\t\t\t\t\tend if\n 19922  \t\t\t\t\t\tcall error_stop()\n .....\n 19930  \t\t\t\t\t\tmem%TLength=length\n 19931  \t\t\t\t\telse\n 19932: \t\t\t\t\t\tcall writemess('Can not reallocate extendsMemory, some subroutine are using the memory!')\n 19933  \t\t\t\t\t\tif(present(w))then\n 19934: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 19935: \t\t\t\t\t\t\tcall writemess(w)\n 19936  \t\t\t\t\t\tend if\n 19937  \t\t\t\t\t\tcall error_stop()\n .....\n 19979  \t\t\t\tcall mem%allocate(9,ith,w)\n 19980  \t\t\telse\n 19981: \t\t\t\tcall writemess('maximum memory limit reach')\n 19982: \t\t\t\tcall writemess('memory for Tensor is length='+mem%iLength)\n 19983  \t\t\t\tcall error_stop\n 19984  \t\t\tend if\n .....\n 20000  \t\t\t\tcall mem%allocate(9,ith,w)\n 20001  \t\t\telse\n 20002: \t\t\t\tcall writemess('maximum memory limit reach')\n 20003: \t\t\t\tcall writemess('memory for Tensor is length='+mem%iLength)\n 20004  \t\t\t\tcall error_stop\n 20005  \t\t\tend if\n .....\n 20021  \t\t\t\tcall mem%allocate(8,ith,w)\n 20022  \t\t\telse\n 20023: \t\t\t\tcall writemess('maximum memory limit reach')\n 20024: \t\t\t\tcall writemess('memory for Dimension is length='+mem%iLength)\n 20025  \t\t\t\tcall error_stop\n 20026  \t\t\tend if\n .....\n 20042  \t\t\t\tcall mem%allocate(8,ith,w)\n 20043  \t\t\telse\n 20044: \t\t\t\tcall writemess('maximum memory limit reach')\n 20045: \t\t\t\tcall writemess('memory for Dimension is length='+mem%iLength)\n 20046  \t\t\t\tcall error_stop\n 20047  \t\t\tend if\n .....\n 20053  \tsubroutine print_info(mem)\n 20054  \t\tclass(extendsMemory),intent(inout)::mem\n 20055: \t\tcall writemess('The length of the memory are')\n 20056: \t\tcall writemess('integer         :'+mem%iLength)\n 20057: \t\tcall writemess('real(kind=4)    :'+mem%sLength)\n 20058: \t\tcall writemess('real(kind=8)    :'+mem%dLength)\n 20059: \t\tcall writemess('complex(kind=4) :'+mem%cLength)\n 20060: \t\tcall writemess('complex(kind=8) :'+mem%zLength)\n 20061: \t\tcall writemess('logical         :'+mem%lLength)\n 20062: \t\tcall writemess('character       :'+mem%aLength)\n 20063: \t\tcall writemess('Dimension       :'+mem%DimLength)\n 20064: \t\tcall writemess('Tensor          :'+mem%TLength)\n 20065  \t\treturn\n 20066  \tend subroutine\n .....\n 20069  \t\tinteger,intent(inout)::inoutlen(:)\n 20070  \t\tif(size(inoutlen).lt.9)then\n 20071: \t\t\tcall writemess('ERROR in get length of the extendsMemory')\n 20072  \t\t\tcall error_stop\n 20073  \t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tools.f90:\n   90  \tinteger,private,parameter::IDmin=0\n   91  \t!real*8,external::omp_get_wtime\n   92: \tpublic::writemess\n   93: \tinterface writemess\n   94: \t\tmodule procedure writemess_char\n   95: \t\tmodule procedure writemess_char2\n   96: \t\tmodule procedure writemess_char_form\n   97: \t\tmodule procedure writemess_real\n   98: \t\tmodule procedure writemess_real4\n   99: \t\tmodule procedure writemess_logi\n  100: \t\tmodule procedure writemess_int\n  101: \t\tmodule procedure writemess_com4\n  102: \t\tmodule procedure writemess_com8\n  103: \t\tmodule procedure writemess_real_array\n  104: \t\tmodule procedure writemess_real4_array\n  105: \t\tmodule procedure writemess_logi_array\n  106: \t\tmodule procedure writemess_int_array\n  107: \t\tmodule procedure writemess_com4_array\n  108: \t\tmodule procedure writemess_com8_array\n  109: \t\tmodule procedure writemess_real_form\n  110: \t\tmodule procedure writemess_real4_form\n  111: \t\tmodule procedure writemess_int_form\n  112: \t\tmodule procedure writemess_com4_form\n  113: \t\tmodule procedure writemess_com8_form\n  114: \t\tmodule procedure writemess_real_array_form\n  115: \t\tmodule procedure writemess_real4_array_form\n  116: \t\tmodule procedure writemess_int_array_form\n  117: \t\tmodule procedure writemess_com4_array_form\n  118: \t\tmodule procedure writemess_com8_array_form\n  119  \tend interface\t\n  120  \n  ...\n  329  \tsubroutine set_error_backtrace()\n  330  \t\terror_backtrace_Flag=.true.\n  331: \t\tcall writemess(' ')\n  332: \t\tcall writemess('#############   Set the error_backtrace  ##################')\n  333: \t\tcall writemess(' The error_backtrace can print the location of the bugs!')\n  334: \t\tcall writemess(' Add the code: ')\n  335: \t\tcall writemess('\t -g -static -ffpe-trap=invalid  ')\n  336: \t\tcall writemess(' when compiling your files ')\n  337: \t\tcall writemess(' Example: ')\n  338: \t\tcall writemess('    mpif90 -g -static -ffpe-trap=invalid test.f90 -o test')\n  339: \t\tcall writemess('###########################################################')\n  340: \t\tcall writemess(' ')\n  341  \t\treturn\n  342  \tend subroutine\n  343  \tsubroutine unset_error_backtrace()\n  344  \t\terror_backtrace_Flag=.false.\n  345: \t\tcall writemess(' unSet the error_backtrace')\n  346  \tend subroutine\n  347  \tsubroutine set_persent_Len(length)\n  ...\n  380  \t\t\treturn\n  381  \t\tend if\n  382: \t\twrite(*,*)\"ERROR in set_writemess_type\"\n  383  \t\tcall error_stop()\n  384  \tend subroutine\n  ...\n  394  \t\tcheck_same_name_flag=.false.\n  395  \t\tProductTensor_output_check_flag=.false.\n  396: \t\tcall writemess('Do not check dimension Name')\n  397  \t\treturn\n  398  \tend subroutine\n  ...\n  401  \t\tcheck_same_name_flag=.true.\n  402  \t\tProductTensor_output_check_flag=.true.\n  403: \t\tcall writemess('check dimension Name')\n  404  \t\treturn\n  405  \tend subroutine\n  ...\n  407  \tsubroutine set_deallocate_memory_flag()\n  408  \t\tdeallocate_memory_flag=.true.\n  409: \t\tcall writemess('deallocate memory after using them')\n  410  \t\treturn\n  411  \tend subroutine\n  412  \tsubroutine unset_deallocate_memory_flag()\n  413  \t\tdeallocate_memory_flag=.false.\n  414: \t\tcall writemess('do not  deallocate memory after using them')\n  415  \t\treturn\n  416  \tend subroutine\n  ...\n  491  \t\tlogical,save::first_flag=.true.\n  492  \t\tif(.not.out_log_flag)then\n  493: \t\t\tcall writemess('Set the log address first by calling set_output_log_address(address,notOverWrite)')\n  494  \t\t\tcall error_stop\n  495  \t\tend if\n  ...\n  497  \t\t\tfirst_flag=.false.\n  498  \t\telse\n  499: \t\t\tcall writemess('The program have set the MPI log before')\n  500  \t\t\tcall error_stop\n  501  \t\tend if\n  502: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  503: \t\tcall writemess('% Set log files for every cpu')\n  504: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  505  \t\tif(output_ProID.eq.output_cpu_number)return\n  506  \t\tlog_address=log_address+output_ProID\n  ...\n  513  \t\t\tendif\n  514  \t\tend if\n  515: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  516: \t\tcall writemess('%  This is the output log of cpu'+output_ProID)\n  517: \t\tcall writemess('%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%')\n  518: \t\tcall writemess(' ')\n  519: \t\tcall writemess(' ')\n  520: \t\tcall writemess(' ')\n  521  \t\treturn\n  522  \tend subroutine\n  ...\n  542  \tsubroutine error_stop()! bug , stop\n  543  \t\tif(MPI_running)then\n  544: \t\t\tif(seed_flag)call writemess('The random seed is'+initial_randomseed)\n  545: \t\t\tif(seed_flag)call writemess('The random seed in cpu is'+initial_mpi_randomseed_in_cpus,-1)\n  546: \t\t\tcall writemess('    Running CPU number is   '+(' '+output_ProNum))\n  547: \t\t\tcall writemess('    All cups are going to stop   ')\n  548: \t\t\tcall writemess('    ')\n  549  \t\t\tcall outpicture()\n  550  \t\t\tcall sleep(2)\n  ...\n  553  \t\t\tstop\n  554  \t\tend if\n  555: \t\tif(seed_flag)call writemess('The random seed is,seed='+initial_randomseed)\n  556  \t\tcall outpicture()\n  557  \t\tif(error_backtrace_Flag)CALL BACKTRACE \n  ...\n 1292  \t\tend do\n 1293  \t\tif(len(w).lt.i)then\n 1294: \t\t\tcall writemess('The input character is too short to store the data. in character=integer')\n 1295  \t\t\tcall error_stop\n 1296  \t\tend if\n ....\n 1758  \t\tend if\n 1759  \t\tif(ith1+1.gt.ith2-1)then\n 1760: \t\t\tcall writemess('ERROR in getting sub character')\n 1761  \t\t\tcall error_stop\n 1762  \t\tend if\n ....\n 2105  \n 2106  \n 2107: \t\t\t\tcall writemess(' ')\n 2108: \t\t\t\tcall writemess('***** Cannot open the file of '+(' '+FileAddress)+' ******')\n 2109: \t\t\t\tcall writemess(' ')\n 2110  \t\t\t\tcall error_stop\n 2111  \t\t\tend if\n ....\n 2146  \n 2147  \n 2148: \tsubroutine writemess_char(mess,cpu_number)\n 2149  \t\tCHARACTER(len=*),intent(in)::mess\n 2150  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2200  \t\treturn\n 2201  \tend subroutine\n 2202: \tsubroutine writemess_char_form(mess,form_,cpu_number)\n 2203  \t\tCHARACTER(len=*),intent(in)::mess\n 2204  \t\tcharacter(len=*),intent(in)::form_\n ....\n 2336  \tend subroutine\n 2337  \n 2338: \tsubroutine writemess_char2(noadjustl,mess,cpu_number)\n 2339  \t\tCHARACTER(len=*),intent(in)::mess\n 2340  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2366  \tend subroutine\n 2367  \t\n 2368: \tsubroutine writemess_real(mess,cpu_number)\n 2369  \t\treal*8,intent(in)::mess\n 2370  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2401  \t\treturn\n 2402  \tend subroutine\n 2403: \tsubroutine writemess_real_array(mess,cpu_number)\n 2404  \t\treal*8,intent(in)::mess(:)\n 2405  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2436  \t\treturn\n 2437  \tend subroutine\n 2438: \tsubroutine writemess_real_form(mess,form,cpu_number)\n 2439  \t\treal*8,intent(in)::mess\n 2440  \t\tcharacter(len=*),intent(in)::form\n ....\n 2472  \t\treturn\n 2473  \tend subroutine\n 2474: \tsubroutine writemess_real_array_form(mess,form,cpu_number)\n 2475  \t\treal*8,intent(in)::mess(:)\n 2476  \t\tcharacter(len=*),intent(in)::form\n ....\n 2512  \n 2513  \n 2514: \tsubroutine writemess_real4(mess,cpu_number)\n 2515  \t\treal*4,intent(in)::mess\n 2516  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2547  \t\treturn\n 2548  \tend subroutine\n 2549: \tsubroutine writemess_real4_array(mess,cpu_number)\n 2550  \t\treal*4,intent(in)::mess(:)\n 2551  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2582  \t\treturn\n 2583  \tend subroutine\n 2584: \tsubroutine writemess_real4_form(mess,form,cpu_number)\n 2585  \t\treal*4,intent(in)::mess\n 2586  \t\tcharacter(len=*),intent(in)::form\n ....\n 2618  \t\treturn\n 2619  \tend subroutine\n 2620: \tsubroutine writemess_real4_array_form(mess,form,cpu_number)\n 2621  \t\treal*4,intent(in)::mess(:)\n 2622  \t\tcharacter(len=*),intent(in)::form\n ....\n 2657  \n 2658  \n 2659: \tsubroutine writemess_int(mess,cpu_number)\n 2660  \t\tinteger,intent(in)::mess\n 2661  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2692  \t\treturn\n 2693  \tend subroutine\n 2694: \tsubroutine writemess_int_array(mess,cpu_number)\n 2695  \t\tinteger,intent(in)::mess(:)\n 2696  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2727  \t\treturn\n 2728  \tend subroutine\n 2729: \tsubroutine writemess_int_form(mess,form,cpu_number)\n 2730  \t\tinteger,intent(in)::mess\n 2731  \t\tcharacter(len=*),intent(in)::form\n ....\n 2763  \t\treturn\n 2764  \tend subroutine\n 2765: \tsubroutine writemess_int_array_form(mess,form,cpu_number)\n 2766  \t\tinteger,intent(in)::mess(:)\n 2767  \t\tcharacter(len=*),intent(in)::form\n ....\n 2802  \n 2803  \n 2804: \tsubroutine writemess_com4(mess,cpu_number)\n 2805  \t\tcomplex*8,intent(in)::mess\n 2806  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2837  \t\treturn\n 2838  \tend subroutine\n 2839: \tsubroutine writemess_com4_array(mess,cpu_number)\n 2840  \t\tcomplex*8,intent(in)::mess(:)\n 2841  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2872  \t\treturn\n 2873  \tend subroutine\n 2874: \tsubroutine writemess_com4_form(mess,form,cpu_number)\n 2875  \t\tcomplex*8,intent(in)::mess\n 2876  \t\tcharacter(len=*),intent(in)::form\n ....\n 2908  \t\treturn\n 2909  \tend subroutine\n 2910: \tsubroutine writemess_com4_array_form(mess,form,cpu_number)\n 2911  \t\tcomplex*8,intent(in)::mess(:)\n 2912  \t\tcharacter(len=*),intent(in)::form\n ....\n 2945  \tend subroutine\n 2946  \n 2947: \tsubroutine writemess_com8(mess,cpu_number)\n 2948  \t\tcomplex*16,intent(in)::mess\n 2949  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 2980  \t\treturn\n 2981  \tend subroutine\n 2982: \tsubroutine writemess_com8_array(mess,cpu_number)\n 2983  \t\tcomplex*16,intent(in)::mess(:)\n 2984  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 3015  \t\treturn\n 3016  \tend subroutine\n 3017: \tsubroutine writemess_com8_form(mess,form,cpu_number)\n 3018  \t\tcomplex*16,intent(in)::mess\n 3019  \t\tcharacter(len=*),intent(in)::form\n ....\n 3051  \t\treturn\n 3052  \tend subroutine\n 3053: \tsubroutine writemess_com8_array_form(mess,form,cpu_number)\n 3054  \t\tcomplex*16,intent(in)::mess(:)\n 3055  \t\tcharacter(len=*),intent(in)::form\n ....\n 3089  \n 3090  \n 3091: \tsubroutine writemess_logi(mess,cpu_number)\n 3092  \t\tlogical,intent(in)::mess\n 3093  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 3124  \t\treturn\n 3125  \tend subroutine\n 3126: \tsubroutine writemess_logi_array(mess,cpu_number)\n 3127  \t\tlogical,intent(in)::mess(:)\n 3128  \t\tinteger,optional,intent(in)::cpu_number\n ....\n 3194  \t\t\tend if\n 3195  \t\t\tCALL DATE_AND_TIME(DATE=cpud,TIME=cput,ZONE=cpuz) \n 3196: \t\t\tcall writemess(\"now the time is :\")\n 3197  \t\t\tw1=cpud\n 3198  \t\t\tw2=cput\n 3199  \t\t\tw3=trim(adjustl(w1))//\" \"//trim(adjustl(w2))\n 3200: \t\t\tcall writemess(trim(adjustl(w3)))\n 3201  \t\t\tcall system(\"date '+%D%n%c' \")\n 3202  \t\t\t\n 3203: \t\t\tcall writemess(\"The time it cost up to now is\")\n 3204  \t\t\tw1=timed\n 3205  \t\t\tw3=\" \"//trim(adjustl(w1))//\"day,\"\n ....\n 3210  \t\t\tw1=times\n 3211  \t\t\tw3=trim(adjustl(w3))//trim(adjustl(w1))//\"second.\"\n 3212: \t\t\tcall writemess(trim(adjustl(w3)))\n 3213  \t\tend if\n 3214  \t\treturn\n ....\n 3303  \t\t\tTime_calculater_numOutput=15\n 3304  \t\tend if\n 3305: \t\tcall writemess('          --- reset Time calculator ---')\n 3306  \t\treturn\n 3307  \tend subroutine\n ....\n 3336  \t\t\tcall date_and_time(VALUES=values)\n 3337  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3338: \t\t\tcall writemess('      ##########'+(' '+systemtime)+' ##########')\n 3339  \t\t\tstepi=max(0+delta_step,1)\n 3340  \t\t\treturn\n ....\n 3354  \t\t\t\tcall date_and_time(VALUES=values)\n 3355  \t\t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3356: \t\t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3357  \t\t\t\treturn\n 3358  \t\t\tend if\n ....\n 3369  \t\t\tcall date_and_time(VALUES=values)\n 3370  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3371: \t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3372  \t\tend if\n 3373  \t\tif(stepi.eq.Time_calculater_TotalStep)then\n ....\n 3376  \t\t\tw=persentChar(100)\n 3377  \t\t\tcall system_time(time2-time1,timechar)\n 3378: \t\t\tcall writemess(w+'.Using time:'+timechar,'+')\n 3379  \t\t\tcall date_and_time(VALUES=values)\n 3380  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3381: \t\t\tcall writemess('      =========='+(' '+systemtime)+' ==========')\n 3382: \t\t\tcall writemess(' ')\n 3383  \t\tend if\n 3384  \t\treturn\n ....\n 3396  \t\tend if\n 3397  \t\tTime_calculater_limit_time=limit_time\n 3398: \t\tcall writemess('          ------- reset Time calculator ------')\n 3399: \t\tcall writemess('         limit_time='+limit_time+'s')\n 3400  \t\treturn\n 3401  \tend subroutine\n ....\n 3430  \t\t\tcall date_and_time(VALUES=values)\n 3431  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3432: \t\t\tcall writemess('      ##########'+(' '+systemtime)+' ##########')\n 3433  \t\t\tstepi=max(0+delta_step,1)\n 3434  \t\t\treturn\n ....\n 3448  \t\t\t\tcall date_and_time(VALUES=values)\n 3449  \t\t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3450: \t\t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3451  \t\t\t\treturn\n 3452  \t\t\tend if\n ....\n 3463  \t\t\tcall date_and_time(VALUES=values)\n 3464  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3465: \t\t\tcall writemess(w+'.'+systemtime+'. Using:'+timechar+'. Remain:'+timechar2,'-')\n 3466  \t\tend if\n 3467  \t\tif(stepi.eq.Time_calculater_TotalStep)then\n ....\n 3470  \t\t\tw=persentChar(100)\n 3471  \t\t\tcall system_time(time2-time1,timechar)\n 3472: \t\t\tcall writemess(w+'.Using time:'+timechar,'+')\n 3473  \t\t\tcall date_and_time(VALUES=values)\n 3474  \t\t\tsystemtime=values(1)+'-'+values(2)+'-'+values(3)+'-'+values(5)+':'+values(6)+':'+values(7)\n 3475: \t\t\tcall writemess('      =========='+(' '+systemtime)+' ==========')\n 3476: \t\t\tcall writemess(' ')\n 3477  \t\tend if\n 3478  \t\tnotstopFlag=(time2-time1).lt.Time_calculater_limit_time\n ....\n 3501  \t\t\t\tmodi=totalstep/numOutput\n 3502  \t\t\tend if\n 3503: \t\t\tcall writemess('=====================================')\n 3504: \t\t\tcall writemess('output the running time for the loop:')\n 3505  \t\tend if\n 3506  \t\tif(first_write)then\n ....\n 3516  \t\t\t\t\tremainStep=totalstep-stepi\n 3517  \t\t\t\t\tcall system_time(persetpTime*remainStep,timechar2)\n 3518: \t\t\t\t\tcall writemess(w+'Using time:'+timechar+'. Remaining time:'+timechar2,'-')\n 3519  \t\t\t\t\treturn\n 3520  \t\t\t\tend if\n ....\n 3530  \t\t\t\tremainStep=totalstep-stepi\n 3531  \t\t\t\tcall system_time(persetpTime*remainStep,timechar2)\n 3532: \t\t\t\tcall writemess(w+'.Using time:'+timechar+'. Remaining time:'+timechar2,'-')\n 3533  \t\t\t\treturn\n 3534  \t\t\tend if\n ....\n 3543  \t\t\tremainStep=totalstep-stepi\n 3544  \t\t\tcall system_time(persetpTime*remainStep,timechar2)\n 3545: \t\t\tcall writemess(w+'.Using time:'+timechar+'. Remaining time:'+timechar2,'-')\n 3546  \t\tend if\n 3547  \t\tif(stepi.eq.totalstep)then\n ....\n 3550  \t\t\tw=persentChar(100)\n 3551  \t\t\tcall system_time(time2-time1,timechar)\n 3552: \t\t\tcall writemess(w+'.Using time:'+timechar,'+')\n 3553: \t\t\tcall writemess('=====================================')\n 3554  \t\t\tfirst=.true.\n 3555  \t\t\tfirst_write=.true.\n ....\n 3640  \tend subroutine\n 3641  \tsubroutine outpicture1()\n 3642: \t\tcall writemess(.true.,'    ')\n 3643: \t\tcall writemess(.true.,'                   _ooOoo_')\n 3644: \t\tcall writemess(.true.,' _____________    o8888888o')\n 3645: \t\tcall writemess(.true.,'|you have bugs|   88\" . \"88')\n 3646: \t\tcall writemess(.true.,'|------------__\\  (| -_- |)')\n 3647: \t\tcall writemess(.true.,'                  O\\  =  /O')\n 3648: \t\tcall writemess(.true.,'               ____/`---`\\\\____')\n 3649: \t\tcall writemess(.true.,'             .`  \\\\|     |//  `.')\n 3650: \t\tcall writemess(.true.,'            /  \\\\|||  :  |||//  \\')\n 3651: \t\tcall writemess(.true.,'           /  _||||| -:- |||||-  \\')\n 3652: \t\tcall writemess(.true.,'           |   | \\\\\\  -  /// |   |')\n 3653: \t\tcall writemess(.true.,'           | \\_|  ``\\---/``  |   |')\n 3654: \t\tcall writemess(.true.,'           \\  .-\\__  `-`  ___/-. /')\n 3655: \t\tcall writemess(.true.,'         ___`. .`  /--.--\\  `. . __')\n 3656: \t\tcall writemess(.true.,'      .\"\" `<  `.___\\_<|>_/___.`  >`\"\".')\n 3657: \t\tcall writemess(.true.,'     | | :  `- \\`.;`\\ _ /`;.`/ - ` : | |')\n 3658: \t\tcall writemess(.true.,'     \\  \\ `-.   \\_ __\\ /__ _/   .-` /  /')\n 3659: \t\tcall writemess(.true.,'======`-.____`-.___\\_____/___.-`____.-`======')\n 3660: \t\tcall writemess(.true.,'                   `=---=`                    ')\n 3661: \t\tcall writemess(.true.,'^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^')\n 3662: \t\tcall writemess(.true.,' Report any bugs of the TNSP to sj.dong@outlook.com     \t     ' )\n 3663: \t\tcall writemess(.true.,'    ')\n 3664  \tend subroutine \n 3665  \tsubroutine outpicture2()\n 3666: \t   call writemess(.true.,'    ')\n 3667: \t   call writemess(.true.,'                      \\  /  ')\n 3668: \t\tcall writemess(.true.,'                    ___\\/__')\n 3669: \t\tcall writemess(.true.,'                   /  ^   ^ \\ ')\n 3670: \t\tcall writemess(.true.,'                 /   (@) (@) \\ ')\n 3671: \t\tcall writemess(.true.,'                 / |     ,    \\      _____________________')\n 3672: \t\tcall writemess(.true.,'                |  U   /~~~\\   |    ||                    |')\n 3673: \t\tcall writemess(.true.,'                 \\     `~~~    )    ||                    |')\n 3674: \t\tcall writemess(.true.,'                _ /           /     ||                    |')\n 3675: \t\tcall writemess(.true.,'               (  \\   (```)   \\     ||     ERROR          |  ')\n 3676: \t\tcall writemess(.true.,'               `  `,  /  -`    \\    ||                    |')\n 3677: \t\tcall writemess(.true.,'============ /|=\\   \"   /  __|  |===||                    |==')\n 3678: \t\tcall writemess(.true.,'            / |   \\___/  ______/    ||____________________|')\n 3679: \t\tcall writemess(.true.,' ________.,`   |                         __||_______|__')\n 3680: \t\tcall writemess(.true.,'|you have bugs! |_________________________________________')\n 3681: \t\tcall writemess(.true.,'|Report any bugs of the TNSP to sj.dong@outlook.com       |\t     ' )\n 3682: \t\tcall writemess(.true.,'`~-------------------------------------------------------~` ')\n 3683  \tend subroutine \n 3684  \tsubroutine outpicture3()\n 3685: \t   call writemess(.true.,'    ')\n 3686: \t\tcall writemess(.true.,'        ___                   \\  /')\n 3687: \t\tcall writemess(.true.,'       /     \\             ____\\/____')\n 3688: \t\tcall writemess(.true.,'      /        \\          /           \\')\n 3689: \t\tcall writemess(.true.,'     |::     |   |      /  ::\\::::/::: \\')\n 3690: \t\tcall writemess(.true.,'     |;;;;   U   |     /  < 0 >::< 0 > \\')\n 3691: \t\tcall writemess(.true.,'      |::;;;    |      |      (/\\)     )   ')\n 3692: \t\tcall writemess(.true.,'       |;;;;   ]        \\            _/   ')\n 3693: \t\tcall writemess(.true.,'        \\:::: )        |  |            \\ ')\n 3694: \t\tcall writemess(.true.,'        /     \\        | |     ME    | | . ')\n 3695: \t\tcall writemess(.true.,'_______/        \\_____,|,|,_________|_/__|\\_______________')\n 3696: \t\tcall writemess(.true.,'      |   YOU    \\                       | \\____________')\n 3697: \t\tcall writemess(.true.,'_________________________________________( you have bugs|')\n 3698: \t\tcall writemess(.true.,'|Report any bugs of the TNSP to sj.dong@outlook.com     |\t     ' )\n 3699: \t\tcall writemess(.true.,'`~-----------------------------------------------------~` ')\n 3700  \tend subroutine \n 3701  \tsubroutine outpicture4()\n 3702: \t   call writemess(.true.,'    ')\n 3703: \t\tcall writemess(.true.,'______     ')\n 3704: \t\tcall writemess(.true.,'___|__|         _________________________________  ')\n 3705: \t\tcall writemess(.true.,'_|____|         |you have bugs!!                 |  ')\n 3706: \t\tcall writemess(.true.,'___|__|--^\\   __|Report any bugs of the TNSP to  |')\n 3707: \t\tcall writemess(.true.,'_|____|w ` ) /_ | sj.dong@outlook.com !          |')\n 3708: \t\tcall writemess(.true.,'___|__|  C=]    |________________________________|')\n 3709: \t\tcall writemess(.true.,'_|____|=========')\n 3710: \t\tcall writemess(.true.,'___|____|____|__|')\n 3711: \t\tcall writemess(.true.,'_|____|____|____|')\n 3712: \t\tcall writemess(.true.,'___|____|____|__|')\n 3713  \tend subroutine \n 3714  \tsubroutine outpicture5()\n 3715: \t   call writemess(.true.,'    ')\n 3716: \t\tcall writemess(.true.,'     _     _')\n 3717: \t\tcall writemess(.true.,'  __| |___| |__        _________________________________')\n 3718: \t\tcall writemess(.true.,' |      _      |       |you have bugs!!                 |  ')\n 3719: \t\tcall writemess(.true.,' |  __/   \\__  |     __|Report any bugs of the TNSP to  |  ')\n 3720: \t\tcall writemess(.true.,' |   0     0  ||   /    sj.dong@outlook.com !           | ')\n 3721: \t\tcall writemess(.true.,' |            U|  /_____________________________________| ')\n 3722: \t\tcall writemess(.true.,' |     _|_     |')\n 3723: \t\tcall writemess(.true.,' |__        ___|')\n 3724: \t\tcall writemess(.true.,'     |     |')\n 3725: \t\tcall writemess(.true.,'     |     |____________')\n 3726: \t\tcall writemess(.true.,'     |                 |__')\n 3727: \t\tcall writemess(.true.,'     |                 |__}')\n 3728: \t\tcall writemess(.true.,'     |_________________|' )\n 3729: \t\tcall writemess(.true.,'       | | |       | | |')\n 3730: \t\tcall writemess(.true.,'       | | |       | | |')\n 3731  \tend subroutine \n 3732  \tsubroutine outpicture6()\n 3733: \t   call writemess(.true.,'       /^\\/^\\ ')\n 3734: \t\tcall writemess(.true.,'       ( -3-)')\n 3735: \t\tcall writemess(.true.,' =====O=======O=====================')\n 3736: \t\tcall writemess(.true.,' |you have bugs!!                  ||')\n 3737: \t\tcall writemess(.true.,' |Report ONLY bugs of the package  ||')\n 3738: \t\tcall writemess(.true.,' |to sj.dong@outlook.com !         ||')\n 3739: \t\tcall writemess(.true.,' ===================================')\n 3740: \t\tcall writemess(.true.,'    |  ||                  |  ||')\n 3741: \t\tcall writemess(.true.,'    |__||                  |__|| ')\n 3742  \tend subroutine \n 3743  \tsubroutine outpicture7()\n 3744: \t   call writemess(.true.,'    ')\n 3745: \t\tcall writemess(.true.,' _________________________________________________________')\n 3746: \t\tcall writemess(.true.,' |you have bugs!!                                         |')\n 3747: \t\tcall writemess(.true.,' |Report any bugs of the TNSP to sj.dong@outlook.com     !|')\n 3748: \t\tcall writemess(.true.,' |  ------------------------------------------------------|')\n 3749: \t\tcall writemess(.true.,' | /')\n 3750: \t\tcall writemess(.true.,' |/__________')\n 3751: \t\tcall writemess(.true.,'   /          \\        ')\n 3752: \t\tcall writemess(.true.,'  /        X X')\n 3753: \t\tcall writemess(.true.,' | Y Y          \\')\n 3754: \t\tcall writemess(.true.,' | | |        oo |')\n 3755: \t\tcall writemess(.true.,' | \\_/       _/\\_)')\n 3756: \t\tcall writemess(.true.,' |          ___/ ')\n 3757: \t\tcall writemess(.true.,'  \\       / ' )\n 3758: \t\tcall writemess(.true.,'   |  |  |')\n 3759: \t\tcall writemess(.true.,'  (___)__)')\n 3760  \tend subroutine \n 3761  \tsubroutine outpicture8()\n 3762: \t   call writemess(.true.,'    ')\n 3763: \t\tcall writemess(.true.,' ')\n 3764: \t\tcall writemess(.true.,'      __ ')\n 3765: \t\tcall writemess(.true.,'     #####                    ### ')\n 3766: \t\tcall writemess(.true.,'    #########___---------____##### ')\n 3767: \t\tcall writemess(.true.,'    ########                 ##### ')\n 3768: \t\tcall writemess(.true.,'     ######                   ### ')\n 3769: \t\tcall writemess(.true.,'      ####                     ## ')\n 3770: \t\tcall writemess(.true.,'       ##                       \\   ')\n 3771: \t\tcall writemess(.true.,'       /        ##       ##      |  ')\n 3772: \t\tcall writemess(.true.,'       |       #0#       #0#      | ')\n 3773: \t\tcall writemess(.true.,'       |      ###         ###     | ')\n 3774: \t\tcall writemess(.true.,'       |      #            ##     | ')\n 3775: \t\tcall writemess(.true.,'       |             ####         | ')\n 3776: \t\tcall writemess(.true.,'      /\\         \\    ##   /     / ')\n 3777: \t\tcall writemess(.true.,'     /  \\         \\_______/     / ')\n 3778: \t\tcall writemess(.true.,'    ###  \\              \\\\     ## ')\n 3779: \t\tcall writemess(.true.,'   ######################\\\\######## ')\n 3780: \t\tcall writemess(.true.,' ############/|###########\\\\######## ')\n 3781: \t\tcall writemess(.true.,'            / |            \\\\ ')\n 3782: \t\tcall writemess(.true.,' ________.,`   |  ')\n 3783: \t\tcall writemess(.true.,'|you have bugs! |_________________________________________')\n 3784: \t\tcall writemess(.true.,'|Report any bugs of the TNSP to sj.dong@outlook.com       | ' )\n 3785: \t\tcall writemess(.true.,'`~-------------------------------------------------------~` ')\n 3786  \tend subroutine \n 3787  \tsubroutine outpicture9()\n 3788: \t   call writemess(' ')\n 3789: \t\tcall writemess('                      ________ ')\n 3790: \t\tcall writemess('                    _/__|__|__\\_ ')\n 3791: \t\tcall writemess('                   /     _      \\ ')\n 3792: \t\tcall writemess('                  /_   _(_)_   __\\ ')\n 3793: \t\tcall writemess('                 ||_| |____o| |_|_| ')\n 3794: \t\tcall writemess('             ____|================|___ ')\n 3795: \t\tcall writemess('            |    |   __________   |   \\ ')\n 3796: \t\tcall writemess('            |    |  | WARNING! |  |    \\ ')\n 3797: \t\tcall writemess('            |   ||  | you      |  |\\    \\ ')\n 3798: \t\tcall writemess('            |   ||  |  have    |  | \\    \\ ')\n 3799: \t\tcall writemess('            |   ||  |    bugs  |  |  \\    \\ ')\n 3800: \t\tcall writemess('            |   ||  |__________|  |   \\    \\ ')\n 3801: \t\tcall writemess('            |   ||                |    \\____\\ ')\n 3802: \t\tcall writemess('            |   ||________________|      | \\ ')\n 3803: \t\tcall writemess('            |___|      \\     /           |  \\ ')\n 3804: \t\tcall writemess('             / \\        \\___/            |___\\ ')\n 3805: \t\tcall writemess('            /   \\       /   \\ ')\n 3806: \t\tcall writemess('           /_____\\     /_____\\ ')\n 3807: \t\tcall writemess('_____________________________________________________________ ')\n 3808: \t\tcall writemess('|Report any bugs of the TNSP to sj.dong@outlook.com          |')\n 3809: \t\tcall writemess('`~----------------------------------------------------------~`')\n 3810  \tend subroutine \n 3811  \tsubroutine outpicture10()\n 3812: \t   call writemess(' ')\n 3813: \t\tcall writemess('                    |_| ')\n 3814: \t\tcall writemess('                  _P   P_ ')\n 3815: \t\tcall writemess('           \\___  /  \\|/  \\  ___/ ')\n 3816: \t\tcall writemess('               \\/    |    \\/ ')\n 3817: \t\tcall writemess('                |  0 |   0| ')\n 3818: \t\tcall writemess('             __/| 000|  00|\\__ ')\n 3819: \t\tcall writemess('            /   \\  00|    /   \\ ')\n 3820: \t\tcall writemess('              __/\\___|___/\\__ ')\n 3821: \t\tcall writemess('             /               \\ ')\n 3822: \t\tcall writemess(' _______________ ')\n 3823: \t\tcall writemess('|you have bugs! |____________________________________________ ')\n 3824: \t\tcall writemess('|Report any bugs of the TNSP to sj.dong@outlook.com          |')\n 3825: \t\tcall writemess('`~----------------------------------------------------------~`')\n 3826  \tend subroutine \n 3827  \n ....\n 3953  \t\tinitial_randomseed=randomseed\n 3954  \t\tif(MPI_running)then\n 3955: \t\t\tcall writemess(' ERROR in set_seed, can not run the MPI')\n 3956  \t\t\tcall error_stop\n 3957  \t\tend if\n ....\n 3989  \t\tgoon=.true.\n 3990  \t\tif(N.lt.0)then\n 3991: \t\t\tcall writemess(\"ERROR in IndesToaddressRoutine\")\n 3992  \t\t\tcall error_stop()\n 3993  \t\tend if\n ....\n 4038  \t\t\t\tRes=num\n 4039  \t\t\tclass default\n 4040: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4041  \t\t\t\tcall error_stop\n 4042  \t\tend select\n ....\n 4057  \t\t\t\tRes=num\n 4058  \t\t\tclass default\n 4059: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4060  \t\t\t\tcall error_stop\n 4061  \t\tend select\n ....\n 4076  \t\t\t\tRes=num\n 4077  \t\t\tclass default\n 4078: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4079  \t\t\t\tcall error_stop\n 4080  \t\tend select\n ....\n 4095  \t\t\t\tRes=num\n 4096  \t\t\tclass default\n 4097: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4098  \t\t\t\tcall error_stop\n 4099  \t\tend select\n ....\n 4114  \t\t\t\tRes=num\n 4115  \t\t\tclass default\n 4116: \t\t\t\tcall writemess('ERROR in select type for class(*)',-1)\n 4117  \t\t\t\tcall error_stop\n 4118  \t\tend select\n ....\n 4187  \t\tcharacter(len=*),intent(in),optional::w\n 4188  \t\tif(mem%flag)then\n 4189: \t\t\tcall writemess('some subroutine are using the memory ')\n 4190  \t\t\tif(present(w))then\n 4191: \t\t\t\tcall writemess('The info of the error is ')\n 4192: \t\t\t\tcall writemess(w)\n 4193  \t\t\tend if\n 4194  \t\t\tcall error_stop()\n ....\n 4254  \t\t\t\t\t\tmem%iLength=length\n 4255  \t\t\t\t\telse\n 4256: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4257  \t\t\t\t\t\tif(present(w))then\n 4258: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4259: \t\t\t\t\t\t\tcall writemess(w)\n 4260  \t\t\t\t\t\tend if\n 4261  \t\t\t\t\t\tcall error_stop()\n ....\n 4269  \t\t\t\t\t\tmem%sLength=length\n 4270  \t\t\t\t\telse\n 4271: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4272  \t\t\t\t\t\tif(present(w))then\n 4273: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4274: \t\t\t\t\t\t\tcall writemess(w)\n 4275  \t\t\t\t\t\tend if\n 4276  \t\t\t\t\t\tcall error_stop()\n ....\n 4284  \t\t\t\t\t\tmem%dLength=length\n 4285  \t\t\t\t\telse\n 4286: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4287  \t\t\t\t\t\tif(present(w))then\n 4288: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4289: \t\t\t\t\t\t\tcall writemess(w)\n 4290  \t\t\t\t\t\tend if\n 4291  \t\t\t\t\t\tcall error_stop()\n ....\n 4299  \t\t\t\t\t\tmem%cLength=length\n 4300  \t\t\t\t\telse\n 4301: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4302  \t\t\t\t\t\tif(present(w))then\n 4303: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4304: \t\t\t\t\t\t\tcall writemess(w)\n 4305  \t\t\t\t\t\tend if\n 4306  \t\t\t\t\t\tcall error_stop()\n ....\n 4314  \t\t\t\t\t\tmem%zLength=length\n 4315  \t\t\t\t\telse\n 4316: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4317  \t\t\t\t\t\tif(present(w))then\n 4318: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4319: \t\t\t\t\t\t\tcall writemess(w)\n 4320  \t\t\t\t\t\tend if\n 4321  \t\t\t\t\t\tcall error_stop()\n ....\n 4329  \t\t\t\t\t\tmem%lLength=length\n 4330  \t\t\t\t\telse\n 4331: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4332  \t\t\t\t\t\tif(present(w))then\n 4333: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4334: \t\t\t\t\t\t\tcall writemess(w)\n 4335  \t\t\t\t\t\tend if\n 4336  \t\t\t\t\t\tcall error_stop()\n ....\n 4344  \t\t\t\t\t\tmem%aLength=length\n 4345  \t\t\t\t\telse\n 4346: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4347  \t\t\t\t\t\tif(present(w))then\n 4348: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4349: \t\t\t\t\t\t\tcall writemess(w)\n 4350  \t\t\t\t\t\tend if\n 4351  \t\t\t\t\t\tcall error_stop()\n ....\n 4367  \t\t\t\t\t\tmem%iLength=length\n 4368  \t\t\t\t\telse\n 4369: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4370  \t\t\t\t\t\tif(present(w))then\n 4371: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4372: \t\t\t\t\t\t\tcall writemess(w)\n 4373  \t\t\t\t\t\tend if\n 4374  \t\t\t\t\t\tcall error_stop()\n ....\n 4382  \t\t\t\t\t\tmem%sLength=length\n 4383  \t\t\t\t\telse\n 4384: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4385  \t\t\t\t\t\tif(present(w))then\n 4386: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4387: \t\t\t\t\t\t\tcall writemess(w)\n 4388  \t\t\t\t\t\tend if\n 4389  \t\t\t\t\t\tcall error_stop()\n ....\n 4397  \t\t\t\t\t\tmem%dLength=length\n 4398  \t\t\t\t\telse\n 4399: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4400  \t\t\t\t\t\tif(present(w))then\n 4401: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4402: \t\t\t\t\t\t\tcall writemess(w)\n 4403  \t\t\t\t\t\tend if\n 4404  \t\t\t\t\t\tcall error_stop()\n ....\n 4412  \t\t\t\t\t\tmem%cLength=length\n 4413  \t\t\t\t\telse\n 4414: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4415  \t\t\t\t\t\tif(present(w))then\n 4416: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4417: \t\t\t\t\t\t\tcall writemess(w)\n 4418  \t\t\t\t\t\tend if\n 4419  \t\t\t\t\t\tcall error_stop()\n ....\n 4427  \t\t\t\t\t\tmem%zLength=length\n 4428  \t\t\t\t\telse\n 4429: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4430  \t\t\t\t\t\tif(present(w))then\n 4431: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4432: \t\t\t\t\t\t\tcall writemess(w)\n 4433  \t\t\t\t\t\tend if\n 4434  \t\t\t\t\t\tcall error_stop()\n ....\n 4442  \t\t\t\t\t\tmem%lLength=length\n 4443  \t\t\t\t\telse\n 4444: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4445  \t\t\t\t\t\tif(present(w))then\n 4446: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4447: \t\t\t\t\t\t\tcall writemess(w)\n 4448  \t\t\t\t\t\tend if\n 4449  \t\t\t\t\t\tcall error_stop()\n ....\n 4457  \t\t\t\t\t\tmem%aLength=length\n 4458  \t\t\t\t\telse\n 4459: \t\t\t\t\t\tcall writemess('Can not reallocate memory, some subroutine are using the memory!')\n 4460  \t\t\t\t\t\tif(present(w))then\n 4461: \t\t\t\t\t\t\tcall writemess('The info of the error is ')\n 4462: \t\t\t\t\t\t\tcall writemess(w)\n 4463  \t\t\t\t\t\tend if\n 4464  \t\t\t\t\t\tcall error_stop()\n ....\n 4466  \t\t\t\tend if\n 4467  \t\t\tcase default\n 4468: \t\t\t\tcall writemess('ERRO input type in allocate memory')\n 4469  \t\t\t\tcall error_stop\n 4470  \t\tend select\n ....\n 4485  \t\t\t\tcall mem%allocate(1,ith,w)\n 4486  \t\t\telse\n 4487: \t\t\t\tcall writemess('maximum memory limit reach')\n 4488: \t\t\t\tcall writemess('memory for integer is length='+mem%iLength)\n 4489  \t\t\t\tcall error_stop\n 4490  \t\t\tend if\n ....\n 4507  \t\t\t\tcall mem%allocate(1,ith,w)\n 4508  \t\t\telse\n 4509: \t\t\t\tcall writemess('maximum memory limit reach')\n 4510: \t\t\t\tcall writemess('memory for integer is length='+mem%iLength)\n 4511  \t\t\t\tcall error_stop\n 4512  \t\t\tend if\n ....\n 4528  \t\t\t\tcall mem%allocate(2,ith,w)\n 4529  \t\t\telse\n 4530: \t\t\t\tcall writemess('maximum memory limit reach')\n 4531: \t\t\t\tcall writemess('memory for real*4 is length='+mem%sLength)\n 4532  \t\t\t\tcall error_stop\n 4533  \t\t\tend if\n ....\n 4550  \t\t\t\tcall mem%allocate(2,ith,w)\n 4551  \t\t\telse\n 4552: \t\t\t\tcall writemess('maximum memory limit reach')\n 4553: \t\t\t\tcall writemess('memory for real*4 is length='+mem%sLength)\n 4554  \t\t\t\tcall error_stop\n 4555  \t\t\tend if\n ....\n 4571  \t\t\t\tcall mem%allocate(3,ith,w)\n 4572  \t\t\telse\n 4573: \t\t\t\tcall writemess('maximum memory limit reach')\n 4574: \t\t\t\tcall writemess('memory for real*8 is length='+mem%dLength)\n 4575  \t\t\t\tcall error_stop\n 4576  \t\t\tend if\n ....\n 4593  \t\t\t\tcall mem%allocate(3,ith,w)\n 4594  \t\t\telse\n 4595: \t\t\t\tcall writemess('maximum memory limit reach')\n 4596: \t\t\t\tcall writemess('memory for real*8 is length='+mem%dLength)\n 4597  \t\t\t\tcall error_stop\n 4598  \t\t\tend if\n ....\n 4614  \t\t\t\tcall mem%allocate(4,ith,w)\n 4615  \t\t\telse\n 4616: \t\t\t\tcall writemess('maximum memory limit reach')\n 4617: \t\t\t\tcall writemess('memory for complex*8 is length='+mem%cLength)\n 4618  \t\t\t\tcall error_stop\n 4619  \t\t\tend if\n ....\n 4636  \t\t\t\tcall mem%allocate(4,ith,w)\n 4637  \t\t\telse\n 4638: \t\t\t\tcall writemess('maximum memory limit reach')\n 4639: \t\t\t\tcall writemess('memory for complex*8 is length='+mem%cLength)\n 4640  \t\t\t\tcall error_stop\n 4641  \t\t\tend if\n ....\n 4657  \t\t\t\tcall mem%allocate(5,ith,w)\n 4658  \t\t\telse\n 4659: \t\t\t\tcall writemess('maximum memory limit reach')\n 4660: \t\t\t\tcall writemess('memory for complex*16 is length='+mem%zLength)\n 4661  \t\t\t\tcall error_stop\n 4662  \t\t\tend if\n ....\n 4679  \t\t\t\tcall mem%allocate(5,ith,w)\n 4680  \t\t\telse\n 4681: \t\t\t\tcall writemess('maximum memory limit reach')\n 4682: \t\t\t\tcall writemess('memory for complex*16 is length='+mem%zLength)\n 4683  \t\t\t\tcall error_stop\n 4684  \t\t\tend if\n ....\n 4700  \t\t\t\tcall mem%allocate(6,ith,w)\n 4701  \t\t\telse\n 4702: \t\t\t\tcall writemess('maximum memory limit reach')\n 4703: \t\t\t\tcall writemess('memory for logical is length='+mem%lLength)\n 4704  \t\t\t\tcall error_stop\n 4705  \t\t\tend if\n ....\n 4721  \t\t\t\tcall mem%allocate(7,ith,w)\n 4722  \t\t\telse\n 4723: \t\t\t\tcall writemess('maximum memory limit reach')\n 4724: \t\t\t\tcall writemess('memory for logical is length='+mem%aLength)\n 4725  \t\t\t\tcall error_stop\n 4726  \t\t\tend if\n ....\n 4749  \t\tclass(memory),intent(inout)::mem\n 4750  \t\tif(mem%Flag)then\n 4751: \t\t\tcall writemess('Can not deallocate memory, there are some subroutine using the memory')\n 4752  \t\t\tcall error_stop\n 4753  \t\tendif\n ....\n 4779  \tsubroutine print_info(mem)\n 4780  \t\tclass(memory),intent(inout)::mem\n 4781: \t\tcall writemess('The length of the memory are')\n 4782: \t\tcall writemess('integer         :'+mem%iLength)\n 4783: \t\tcall writemess('real(kind=4)    :'+mem%sLength)\n 4784: \t\tcall writemess('real(kind=8)    :'+mem%dLength)\n 4785: \t\tcall writemess('complex(kind=4) :'+mem%cLength)\n 4786: \t\tcall writemess('complex(kind=8) :'+mem%zLength)\n 4787: \t\tcall writemess('logical         :'+mem%lLength)\n 4788: \t\tcall writemess('character       :'+mem%aLength)\n 4789  \t\treturn\n 4790  \tend subroutine\n ....\n 4793  \t\tinteger,intent(inout)::inoutlen(:)\n 4794  \t\tif(size(inoutlen).lt.7)then\n 4795: \t\t\tcall writemess('ERROR in get length of the memory')\n 4796  \t\t\tcall error_stop\n 4797  \t\tend if\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/update.log:\n  534  2017.6.10\n  535    \n  536:     call writemess(mess,form):\n  537      \n  538           if form='-', there is NO enter and the output will clean the present line and write the mess. that means it will over write the present line\n  ...\n  549  \t\tcharacter(len=20)::cha\n  550  \t\tcall set_output_log_address('log')\n  551: \t\tcall writemess('aaaaaaaaaaaaaaaa','-')\n  552  \t\tcall sleep(1)\n  553: \t\tcall writemess('bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb','-')\n  554  \t\tcall sleep(1)\n  555: \t\tcall writemess('1')\n  556: \t\tcall writemess('2')\n  557: \t\tcall writemess('ccccc','-')\n  558  \t\tcall sleep(1)\n  559  \t\tcha='ddddddd'\n  560: \t\tcall writemess(cha,'-')\n  561  \t\tcall sleep(1)\n  562: \t\tcall writemess('tessssssssssssssssssssssssssssssssssssssst5','+')\n  563: \t\tcall writemess('3')\n  564: \t\tcall writemess('4','(a10)')\n  565           \n  566  2017.7.22\n  ...\n  919  2018.6.10\n  920  \n  921:      1.support new typt of call writemess(num)\n  922          num can be\n  923                1.integer\n  ...\n  935               13.Tensor\n  936       They will output as the default form, that is write(uni,*) num\n  937:      And call writemess(Tensor), will make used of this subroutine\n  938  \n  939:      2.support new typt of call writemess(num,form)\n  940          num can be\n  941                1.integer\n\n/Users/chaowang/Desktop/program/pack/source/tnsp-extension/source/tensor_tools.f90:\n  396  \t\n  397  \tif(test_not_empty(inTensor,mpi_comm)==0)then\t! if the Tensor is empty\n  398: \t\tcall writemess('ERROR in ALLREDUCE_Tensor,the is no date in one or some Tensors')\n  399  \t\tcall error_stop\n  400  \tend if\n  401  \t\n  402  \tif(test_same_type(inTensor,mpi_comm)==0)then\t! if the Tensor is the same data type\n  403: \t\tcall writemess('ERROR in ALLREDUCE_Tensor,the Data type in the Tensors are not the sames')\n  404  \t\tcall error_stop\n  405  \tend if\n  406  \n  407  \tif(test_same_length(inTensor,mpi_comm)==0)then\t! if the length of the Tensor is the same\n  408: \t\tcall writemess('ERROR in ALLREDUCE_Tensor,the length od the Tensor is not the same')\n  409  \t\tcall error_stop\n  410  \tend if\n  ...\n  510  \tcall mpi_comm_size(mpi_comm,proNum,ierr )\n  511  \tif(root>=proNum .or. root<0)then\n  512: \t\tcall writemess('ERROR in REDUCE_Tensor,input root is illegal')\n  513  \t\tcall error_stop\n  514  \tend if\n  515  \t\n  516  \tif(test_not_empty(inTensor,mpi_comm)==0)then\t! if the Tensor is empty\n  517: \t\tcall writemess('ERROR in REDUCE_Tensor,the is no date in one or some Tensors')\n  518  \t\tcall error_stop\n  519  \tend if\n  520  \t\n  521  \tif(test_same_type(inTensor,mpi_comm)==0)then\t! if the Tensor is the same data type\n  522: \t\tcall writemess('ERROR in REDUCE_Tensor,the Data type in the Tensors are not the sames')\n  523  \t\tcall error_stop\n  524  \tend if\n  525  \n  526  \tif(test_same_length(inTensor,mpi_comm)==0)then\t! if the length of the Tensor is the same\n  527: \t\tcall writemess('ERROR in REDUCE_Tensor,the length od the Tensor is not the same')\n  528  \t\tcall error_stop\n  529  \tend if\n\n1937 matches across 9 files\n\n\nSearching 94 files for \"Set the error_backtrace\"\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tools.f90:\n  330  \t\terror_backtrace_Flag=.true.\n  331  \t\tcall writemess(' ')\n  332: \t\tcall writemess('#############   Set the error_backtrace  ##################')\n  333  \t\tcall writemess(' The error_backtrace can print the location of the bugs!')\n  334  \t\tcall writemess(' Add the code: ')\n  ...\n  343  \tsubroutine unset_error_backtrace()\n  344  \t\terror_backtrace_Flag=.false.\n  345: \t\tcall writemess(' unSet the error_backtrace')\n  346  \tend subroutine\n  347  \tsubroutine set_persent_Len(length)\n\n2 matches in 1 file\n\n\nSearching 79 files for \"zdotu\"\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/TData.f90:\n 5374  \t\treal*8,External::\tddot\n 5375  \t\tcomplex(kind=4),External::\tcdotu\n 5376: \t\tcomplex(kind=8),External::\tzdotu1\n 5377  \t\tflag=10*A%classType+B%classType\n 5378  \t\tlength=A%totalData\n ....\n 5387  \t\t\t\tR%cdata=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)\n 5388  \t\t\tcase(15)\n 5389: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)\n 5390  \t\t\t\t\n 5391  \t\t\tcase(21)\n ....\n 5398  \t\t\t\tR%cdata=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)\n 5399  \t\t\tcase(25)\n 5400: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)\n 5401  \t\t\t\t\n 5402  \t\t\tcase(31)\n ....\n 5407  \t\t\t\tR%ddata=ddot(length,  A%ddata, 1, B%ddata, 1)\n 5408  \t\t\tcase(34)\n 5409: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)\n 5410  \t\t\tcase(35)\n 5411: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)\t\n 5412  \t\t\t\n 5413  \t\t\tcase(41)\n ....\n 5416  \t\t\t\tR%cdata=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)\n 5417  \t\t\tcase(43)\n 5418: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)\n 5419  \t\t\tcase(44)\n 5420  \t\t\t\tR%cdata=cdotu(length, A%cdata, 1, B%cdata, 1)\n 5421  \t\t\tcase(45)\n 5422: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)\t\n 5423  \t\t\t\t\n 5424  \t\t\tcase(51)\n 5425: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)\n 5426  \t\t\tcase(52)\n 5427: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)\n 5428  \t\t\tcase(53)\n 5429: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)\n 5430  \t\t\tcase(54)\n 5431: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)\n 5432  \t\t\tcase(55)\n 5433: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, B%zdata, 1)\t\n 5434  \t\tend select\n 5435  \t\treturn\n ....\n 5446  \t\treal*8,External::\tddot\n 5447  \t\tcomplex(kind=4),External::\tcdotu\n 5448: \t\tcomplex(kind=8),External::\tzdotu1\n 5449  \t\tflag=10*A%classType+B%classType\n 5450  \t\tlength=A%totalData\n ....\n 5459  \t\t\t\tR%cdata=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)*cselect(alpha)+(R%cdata*cselect(beta))\n 5460  \t\t\tcase(15)\n 5461: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5462  \t\t\t\t\n 5463  \t\t\tcase(21)\n ....\n 5470  \t\t\t\tR%cdata=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)*cselect(alpha)+(R%cdata*cselect(beta))\n 5471  \t\t\tcase(25)\n 5472: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5473  \t\t\t\t\n 5474  \t\t\tcase(31)\n ....\n 5479  \t\t\t\tR%ddata=ddot(length,  A%ddata, 1, B%ddata, 1)*dselect(alpha)+(R%ddata*dselect(beta))\n 5480  \t\t\tcase(34)\n 5481: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5482  \t\t\tcase(35)\n 5483: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5484  \t\t\t\n 5485  \t\t\tcase(41)\n ....\n 5488  \t\t\t\tR%cdata=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)*cselect(alpha)+(R%cdata*cselect(beta))\n 5489  \t\t\tcase(43)\n 5490: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5491  \t\t\tcase(44)\n 5492  \t\t\t\tR%cdata=cdotu(length, A%cdata, 1, B%cdata, 1)*cselect(alpha)+(R%cdata*cselect(beta))\n 5493  \t\t\tcase(45)\n 5494: \t\t\t\tR%zdata=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5495  \t\t\t\t\n 5496  \t\t\tcase(51)\n 5497: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5498  \t\t\tcase(52)\n 5499: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5500  \t\t\tcase(53)\n 5501: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5502  \t\t\tcase(54)\n 5503: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)*zselect(alpha)+(R%zdata*zselect(beta))\n 5504  \t\t\tcase(55)\n 5505: \t\t\t\tR%zdata=zdotu1(length, A%zdata, 1, B%zdata, 1)\t*zselect(alpha)+(R%zdata*zselect(beta))\n 5506  \t\tend select\n 5507  \t\treturn\n ....\n 8691  \t\treal*8,External::\tddot\n 8692  \t\tcomplex(kind=4),External::\tcdotu\n 8693: \t\tcomplex(kind=8),External::\tzdotu1\n 8694  \t\tflag=10*A%classType+B%classType\n 8695  \t\tlength=A%totalData\n ....\n 8704  \t\t\t\tR=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)\n 8705  \t\t\tcase(15)\n 8706: \t\t\t\tR=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)\n 8707  \t\t\t\t\n 8708  \t\t\tcase(21)\n ....\n 8715  \t\t\t\tR=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)\n 8716  \t\t\tcase(25)\n 8717: \t\t\t\tR=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)\n 8718  \t\t\t\t\n 8719  \t\t\tcase(31)\n ....\n 8724  \t\t\t\tR=ddot(length,  A%ddata, 1, B%ddata, 1)\n 8725  \t\t\tcase(34)\n 8726: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)\n 8727  \t\t\tcase(35)\n 8728: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)\t\n 8729  \t\t\t\n 8730  \t\t\tcase(41)\n ....\n 8733  \t\t\t\tR=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)\n 8734  \t\t\tcase(43)\n 8735: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)\n 8736  \t\t\tcase(44)\n 8737  \t\t\t\tR=cdotu(length, A%cdata, 1, B%cdata, 1)\n 8738  \t\t\tcase(45)\n 8739: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)\t\n 8740  \t\t\t\t\n 8741  \t\t\tcase(51)\n 8742: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)\n 8743  \t\t\tcase(52)\n 8744: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)\n 8745  \t\t\tcase(53)\n 8746: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)\n 8747  \t\t\tcase(54)\n 8748: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)\n 8749  \t\t\tcase(55)\n 8750: \t\t\t\tR=zdotu1(length, A%zdata, 1, B%zdata, 1)\t\n 8751  \t\tend select\n 8752  \t\treturn\n ....\n 8760  \t\treal*8,External::\tddot\n 8761  \t\tcomplex(kind=4),External::\tcdotu\n 8762: \t\tcomplex(kind=8),External::\tzdotu1\n 8763  \t\tflag=10*A%classType+B%classType\n 8764  \t\tlength=A%totalData\n ....\n 8773  \t\t\t\tR=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)\n 8774  \t\t\tcase(15)\n 8775: \t\t\t\tR=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)\n 8776  \t\t\t\t\n 8777  \t\t\tcase(21)\n ....\n 8784  \t\t\t\tR=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)\n 8785  \t\t\tcase(25)\n 8786: \t\t\t\tR=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)\n 8787  \t\t\t\t\n 8788  \t\t\tcase(31)\n ....\n 8793  \t\t\t\tR=ddot(length,  A%ddata, 1, B%ddata, 1)\n 8794  \t\t\tcase(34)\n 8795: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)\n 8796  \t\t\tcase(35)\n 8797: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)\t\n 8798  \t\t\t\n 8799  \t\t\tcase(41)\n ....\n 8802  \t\t\t\tR=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)\n 8803  \t\t\tcase(43)\n 8804: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)\n 8805  \t\t\tcase(44)\n 8806  \t\t\t\tR=cdotu(length, A%cdata, 1, B%cdata, 1)\n 8807  \t\t\tcase(45)\n 8808: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)\t\n 8809  \t\t\t\t\n 8810  \t\t\tcase(51)\n 8811: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)\n 8812  \t\t\tcase(52)\n 8813: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)\n 8814  \t\t\tcase(53)\n 8815: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)\n 8816  \t\t\tcase(54)\n 8817: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)\n 8818  \t\t\tcase(55)\n 8819: \t\t\t\tR=zdotu1(length, A%zdata, 1, B%zdata, 1)\t\n 8820  \t\tend select\n 8821  \t\treturn\n ....\n 8829  \t\treal*8,External::\tddot\n 8830  \t\tcomplex(kind=4),External::\tcdotu\n 8831: \t\tcomplex(kind=8),External::\tzdotu1\n 8832  \t\tflag=10*A%classType+B%classType\n 8833  \t\tlength=A%totalData\n ....\n 8842  \t\t\t\tR=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)\n 8843  \t\t\tcase(15)\n 8844: \t\t\t\tR=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)\n 8845  \t\t\t\t\n 8846  \t\t\tcase(21)\n ....\n 8853  \t\t\t\tR=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)\n 8854  \t\t\tcase(25)\n 8855: \t\t\t\tR=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)\n 8856  \t\t\t\t\n 8857  \t\t\tcase(31)\n ....\n 8862  \t\t\t\tR=ddot(length,  A%ddata, 1, B%ddata, 1)\n 8863  \t\t\tcase(34)\n 8864: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)\n 8865  \t\t\tcase(35)\n 8866: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)\t\n 8867  \t\t\t\n 8868  \t\t\tcase(41)\n ....\n 8871  \t\t\t\tR=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)\n 8872  \t\t\tcase(43)\n 8873: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)\n 8874  \t\t\tcase(44)\n 8875  \t\t\t\tR=cdotu(length, A%cdata, 1, B%cdata, 1)\n 8876  \t\t\tcase(45)\n 8877: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)\t\n 8878  \t\t\t\t\n 8879  \t\t\tcase(51)\n 8880: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)\n 8881  \t\t\tcase(52)\n 8882: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)\n 8883  \t\t\tcase(53)\n 8884: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)\n 8885  \t\t\tcase(54)\n 8886: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)\n 8887  \t\t\tcase(55)\n 8888: \t\t\t\tR=zdotu1(length, A%zdata, 1, B%zdata, 1)\t\n 8889  \t\tend select\n 8890  \t\treturn\n ....\n 8898  \t\treal*8,External::\tddot\n 8899  \t\tcomplex(kind=4),External::\tcdotu\n 8900: \t\tcomplex(kind=8),External::\tzdotu1\n 8901  \t\tflag=10*A%classType+B%classType\n 8902  \t\tlength=A%totalData\n ....\n 8911  \t\t\t\tR=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)\n 8912  \t\t\tcase(15)\n 8913: \t\t\t\tR=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)\n 8914  \t\t\t\t\n 8915  \t\t\tcase(21)\n ....\n 8922  \t\t\t\tR=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)\n 8923  \t\t\tcase(25)\n 8924: \t\t\t\tR=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)\n 8925  \t\t\t\t\n 8926  \t\t\tcase(31)\n ....\n 8931  \t\t\t\tR=ddot(length,  A%ddata, 1, B%ddata, 1)\n 8932  \t\t\tcase(34)\n 8933: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)\n 8934  \t\t\tcase(35)\n 8935: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)\t\n 8936  \t\t\t\n 8937  \t\t\tcase(41)\n ....\n 8940  \t\t\t\tR=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)\n 8941  \t\t\tcase(43)\n 8942: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)\n 8943  \t\t\tcase(44)\n 8944  \t\t\t\tR=cdotu(length, A%cdata, 1, B%cdata, 1)\n 8945  \t\t\tcase(45)\n 8946: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)\t\n 8947  \t\t\t\t\n 8948  \t\t\tcase(51)\n 8949: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)\n 8950  \t\t\tcase(52)\n 8951: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)\n 8952  \t\t\tcase(53)\n 8953: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)\n 8954  \t\t\tcase(54)\n 8955: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)\n 8956  \t\t\tcase(55)\n 8957: \t\t\t\tR=zdotu1(length, A%zdata, 1, B%zdata, 1)\t\n 8958  \t\tend select\n 8959  \t\treturn\n ....\n 8967  \t\treal*8,External::\tddot\n 8968  \t\tcomplex(kind=4),External::\tcdotu\n 8969: \t\tcomplex(kind=8),External::\tzdotu1\n 8970  \t\tflag=10*A%classType+B%classType\n 8971  \t\tlength=A%totalData\n ....\n 8980  \t\t\t\tR=cdotu(length, cmplx(A%idata(1:length),kind=4), 1, B%cdata, 1)\n 8981  \t\t\tcase(15)\n 8982: \t\t\t\tR=zdotu1(length, dcmplx(A%idata(1:length)), 1, B%zdata, 1)\n 8983  \t\t\t\t\n 8984  \t\t\tcase(21)\n ....\n 8991  \t\t\t\tR=cdotu(length, cmplx(A%sdata(1:length),kind=4), 1, B%cdata, 1)\n 8992  \t\t\tcase(25)\n 8993: \t\t\t\tR=zdotu1(length, dcmplx(A%sdata(1:length)), 1, B%zdata, 1)\n 8994  \t\t\t\t\n 8995  \t\t\tcase(31)\n ....\n 9000  \t\t\t\tR=ddot(length,  A%ddata, 1, B%ddata, 1)\n 9001  \t\t\tcase(34)\n 9002: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, dcmplx(B%cdata(1:length)), 1)\n 9003  \t\t\tcase(35)\n 9004: \t\t\t\tR=zdotu1(length, dcmplx(A%ddata(1:length)), 1, B%zdata, 1)\t\n 9005  \t\t\t\n 9006  \t\t\tcase(41)\n ....\n 9009  \t\t\t\tR=cdotu(length, A%cdata, 1, cmplx(B%sdata(1:length),kind=4), 1)\n 9010  \t\t\tcase(43)\n 9011: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, dcmplx(B%ddata(1:length)), 1)\n 9012  \t\t\tcase(44)\n 9013  \t\t\t\tR=cdotu(length, A%cdata, 1, B%cdata, 1)\n 9014  \t\t\tcase(45)\n 9015: \t\t\t\tR=zdotu1(length, dcmplx(A%cdata(1:length)), 1, B%zdata, 1)\t\n 9016  \t\t\t\t\n 9017  \t\t\tcase(51)\n 9018: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%idata(1:length)), 1)\n 9019  \t\t\tcase(52)\n 9020: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%sdata(1:length)), 1)\n 9021  \t\t\tcase(53)\n 9022: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%ddata(1:length)), 1)\n 9023  \t\t\tcase(54)\n 9024: \t\t\t\tR=zdotu1(length, A%zdata, 1, dcmplx(B%cdata(1:length)), 1)\n 9025  \t\t\tcase(55)\n 9026: \t\t\t\tR=zdotu1(length, A%zdata, 1, B%zdata, 1)\t\n 9027  \t\tend select\n 9028  \t\treturn\n\n/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tensor.f90:\n 1351  \tpublic::operator(.zdot.)\n 1352  \tinterface operator(.zdot.)\n 1353: \t\tmodule procedure zdotUTensor\n 1354  \tend interface\n 1355  \t\n ....\n 15918  \t\tRETURN\n 15919  \tend function\n 15920: \tcomplex(kind=8) function zdotUTensor(phi1,phi2)result(dotTensor)\n 15921  \t\tType(Tensor),intent(in)::phi1,phi2\n 15922  \t\tinteger::N1,N2,classtype\n .....\n 15956  \t\t\t\tdotTensor=cdotUTensor(phi1,phi2)\n 15957  \t\t\tcase(5)\n 15958: \t\t\t\tdotTensor=zdotUTensor(phi1,phi2)\n 15959  \t\t\tcase default\n 15960  \t\t\t\tcall writemess(\"ERROR in .dot.\",-1)\n\n/Users/chaowang/Desktop/program/pack/source/zdotu/makefile:\n    2  \n    3  file := \\\n    4: zdotu.o\n    5  \n    6  all:\t$(file)\n\n/Users/chaowang/Desktop/program/pack/source/zdotu/source/zdotu.f90:\n    1: COMPLEX(8) FUNCTION ZDOTU1(N,ZX,INCX,ZY,INCY)\n    2  implicit none\n    3        \n    4  \tINTEGER::INCX,INCY,N\n    5  \tCOMPLEX(8)::ZX((N-1)*INCX+1),ZY((N-1)*INCY+1)\n    6: \tCOMPLEX(8)::ZDOTU\n    7: \tEXTERNAL::ZDOTU\n    8  \tINTEGER I,IX,IY\n    9  \n   ..\n   11  \tIF (N<0) RETURN\n   12  \tIF (INCX==1 .AND. INCY==1) THEN\n   13: \t\tZDOTU1 = ZDOTU1 +sum(ZX(1:N)*ZY(1:N))\n   14  \tELSE\n   15: \t\tZDOTU1 = ZDOTU1 +sum(ZX(1:(N-1)*INCX+1:INCX)*ZY(1:(N-1)*INCY+1:INCY))\n   16  \tEND IF\n   17  #else\n   18: \tZDOTU1=ZDOTU(N,ZX,INCX,ZY,INCY)\n   19  #endif\n   20  \n\n97 matches across 4 files\n",
			"settings":
			{
				"buffer_size": 616482,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "source/tnsp/source/Tools.f90",
			"settings":
			{
				"buffer_size": 127718,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/timer/source/timer.f90",
			"settings":
			{
				"buffer_size": 2674,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/tenwork/source/lattice_clt.f90",
			"settings":
			{
				"buffer_size": 8801,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/tenwork/source/tn_tensor.f90",
			"settings":
			{
				"buffer_size": 12993,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"file": "source/tenwork/source/lattice.f90",
			"settings":
			{
				"buffer_size": 118040,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/statistics/source/statistics.f90",
			"settings":
			{
				"buffer_size": 7733,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/tnsp-extension/source/tensor_tools.f90",
			"settings":
			{
				"buffer_size": 16876,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/unidic/source/unidic.f90",
			"settings":
			{
				"buffer_size": 6335,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/paralist/source/paralist.f90",
			"settings":
			{
				"buffer_size": 10083,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "source/dictionary/source/dictionary.f90",
			"settings":
			{
				"buffer_size": 33764,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"instll",
				"Package Control: Install Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"dis",
				"Package Control: Disable Package"
			],
			[
				"lint",
				"SublimeLinter: Show Line Errors"
			],
			[
				"linter",
				"Preferences: SublimeLinter Settings"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pacak",
				"Package Control: Remove Package"
			],
			[
				"lin",
				"Colorsublime: Install Theme"
			],
			[
				"Pa",
				"Package Control: Install Package"
			],
			[
				"Linter",
				"SublimeLinter: Show Line Errors"
			],
			[
				"link",
				"Preferences: SublimeLinter Key Bindings"
			],
			[
				"P",
				"Package Control: Remove Package"
			],
			[
				"for",
				"Set Syntax: Fortran - Modern"
			],
			[
				"Pac",
				"Package Control: Remove Package"
			],
			[
				"Col",
				"Colorsublime: Install Theme"
			],
			[
				"Package Control: ",
				"Package Control: Enable Package"
			]
		],
		"width": 0.0
	},
	"console":
	{
		"height": 361.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/chaowang/Desktop/program/pack/source",
		"/Users/chaowang/Desktop/program/pack/source/cumulator",
		"/Users/chaowang/Desktop/program/pack/source/cumulator/source",
		"/Users/chaowang/Desktop/program/pack/source/error",
		"/Users/chaowang/Desktop/program/pack/source/error/source",
		"/Users/chaowang/Desktop/program/pack/source/mpi_info",
		"/Users/chaowang/Desktop/program/pack/source/mpi_info/source",
		"/Users/chaowang/Desktop/program/pack/source/paralist",
		"/Users/chaowang/Desktop/program/pack/source/paralist/source",
		"/Users/chaowang/Desktop/program/pack/source/percentage",
		"/Users/chaowang/Desktop/program/pack/source/percentage/source",
		"/Users/chaowang/Desktop/program/pack/source/random",
		"/Users/chaowang/Desktop/program/pack/source/random/source",
		"/Users/chaowang/Desktop/program/pack/source/stack",
		"/Users/chaowang/Desktop/program/pack/source/stack/source",
		"/Users/chaowang/Desktop/program/pack/source/statistics",
		"/Users/chaowang/Desktop/program/pack/source/statistics/source",
		"/Users/chaowang/Desktop/program/pack/source/string",
		"/Users/chaowang/Desktop/program/pack/source/string/source",
		"/Users/chaowang/Desktop/program/pack/source/tenwork",
		"/Users/chaowang/Desktop/program/pack/source/tenwork/source",
		"/Users/chaowang/Desktop/program/pack/source/time",
		"/Users/chaowang/Desktop/program/pack/source/time/source",
		"/Users/chaowang/Desktop/program/pack/source/timer",
		"/Users/chaowang/Desktop/program/pack/source/timer/source",
		"/Users/chaowang/Desktop/program/pack/source/tnsp-extension",
		"/Users/chaowang/Desktop/program/pack/source/tnsp-extension/source",
		"/Users/chaowang/Desktop/program/pack/source/unidic",
		"/Users/chaowang/Desktop/program/pack/source/unidic/source"
	],
	"file_history":
	[
		"/Users/chaowang/Desktop/program/pack/ford.md",
		"/Users/chaowang/Desktop/projects/kagome2_new/kagome_go/energyG8.py",
		"/Users/chaowang/Desktop/program/pack/source/zdotu/source/zdotu.f90",
		"/Users/chaowang/Desktop/program/pack/source/time/source/time.c",
		"/Users/chaowang/Desktop/program/peps/source/mainGM.f90",
		"/Users/chaowang/Desktop/program/pack/doc/css/bootstrap.min.css",
		"/Users/chaowang/Desktop/program/pack/doc/css/local.css",
		"/Users/chaowang/Desktop/program/pack/doc/index.html",
		"/Users/chaowang/Desktop/program/pack/doc_files/main.f90",
		"/Users/chaowang/Desktop/program/pack/doc/module/dimension_typede.html",
		"/Users/chaowang/Desktop/program/pack/docs/archive.js",
		"/Users/chaowang/Desktop/program/pack/docs/website",
		"/Users/chaowang/Desktop/program/pack/source/error/source/error.f90",
		"/Users/chaowang/Desktop/program/pack/source/timer/source/timer.f90",
		"/Users/chaowang/Desktop/program/pack/source/tnsp-extension/source/tensor_tools.f90",
		"/Users/chaowang/Desktop/program/pack/manual/installation.rst",
		"/Users/chaowang/Desktop/program/pack/source/tracer/source/main.f90",
		"/Users/chaowang/Desktop/program/pack/source/percentage/source/percentage.f90",
		"/Users/chaowang/Desktop/program/pack/source/ecp_handler/source/ecp_handler.f90",
		"/Users/chaowang/Desktop/program/pack/make.sh",
		"/Users/chaowang/Desktop/program/peps/source/gm_sampling.f90",
		"/Users/chaowang/Desktop/program/peps/source/gm_peps.f90",
		"/Users/chaowang/Desktop/program/peps/source/samplings/sample_square.f90",
		"/Users/chaowang/Desktop/program/peps/run/input/GM.dat",
		"/Users/chaowang/Desktop/program/pack/source/paralist/source/paralist.f90",
		"/Users/chaowang/Desktop/program/pack/source/cumulator/source/cumulator.f90",
		"/Users/chaowang/Desktop/program/pack/source/random/source/random.f90",
		"/Users/chaowang/Desktop/program/pack/source/tenwork/source/lattice.f90",
		"/Users/chaowang/Desktop/program/pack/source/tenwork/source/tn_tensor.f90",
		"/Users/chaowang/Desktop/program/pack/source/tenwork/source/lattice_clt.f90",
		"/Users/chaowang/Desktop/program/pack/source/string/source/string.f90",
		"/Users/chaowang/Desktop/program/pack/source/dictionary/source/dictionary.f90",
		"/Users/chaowang/Desktop/program/pack/source/unidic/source/unidic.f90",
		"/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tools.f90",
		"/Users/chaowang/Desktop/program/pack/source/stack/source/stack.f90",
		"/Users/chaowang/Desktop/program/pack/source/mpi_info/source/mpi_info.f90",
		"/Users/chaowang/Desktop/program/pack/manual/operations.rst",
		"/Users/chaowang/Desktop/program/pack/manual/objects.rst",
		"/Users/chaowang/Desktop/program/pack/manual/index.rst",
		"/Users/chaowang/Desktop/program/pack/manual/conf.py",
		"/Users/chaowang/Desktop/program/peps/source/gm_evolve.f90",
		"/Users/chaowang/Desktop/program/pack/manual/intro.rst",
		"/Users/chaowang/Desktop/program/pack/docs/reset_mob_menu.js",
		"/Users/chaowang/Desktop/projects/kagome2_new/kagome_su_v4_11/energyG8.py",
		"/Users/chaowang/Desktop/projects/kagome2_new/kagome_su_v4_11/energyG10.py",
		"/Users/chaowang/Desktop/program/pack/docs/mobile.css",
		"/Users/chaowang/Desktop/program/pack/docs/mob_view.js",
		"/Users/chaowang/Desktop/program/pack/docs/publications.html",
		"/Users/chaowang/Desktop/program/pack/docs/features.html",
		"/Users/chaowang/Desktop/program/pack/docs/team.html",
		"/Users/chaowang/Desktop/program/pack/docs/index.html",
		"/Users/chaowang/Desktop/program/pack/docs/download.html",
		"/Users/chaowang/Desktop/program/pack/docs/main.css",
		"/Users/chaowang/Desktop/program/python/pepslog/process.py",
		"/Users/chaowang/Desktop/program/python/pepslog/plot_plotly.py",
		"/Users/chaowang/Desktop/projects/kagome2_new/kagome_su_v4_11/energyL10D10.png",
		"/Users/chaowang/Desktop/program/python/process/plot_pyplot.py",
		"/Users/chaowang/Desktop/program/python/process/plot_plotly.py",
		"/Users/chaowang/Desktop/program/python/process/analysis.py",
		"/Users/chaowang/Desktop/program/python/plot/plot2.py",
		"/Users/chaowang/Desktop/program/python/process/process.py",
		"/usr/local/lib/python3.7/site-packages/plotly/graph_objs/graph_objs.py",
		"/usr/local/lib/python3.7/site-packages/plotly/graph_objects.py",
		"/usr/local/lib/python3.7/site-packages/plotly/__init__.py",
		"/Users/chaowang/Desktop/program/flask/fistdash.py",
		"/usr/local/lib/python3.7/site-packages/plotly/graph_objs/_figurewidget.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_renderers.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/orca.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_sg_scraper.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_json.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_base_renderers.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_orca.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_templates.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_utils.py",
		"/usr/local/lib/python3.7/site-packages/plotly/io/_html.py",
		"/usr/local/lib/python3.7/site-packages/plotly/basedatatypes.py",
		"/usr/local/lib/python3.7/site-packages/plotly/graph_objs/_figure.py",
		"/Users/chaowang/Desktop/未命名文件夹 2/a.pdf",
		"/Users/chaowang/Desktop/git/python-getting-started/hello/views.py",
		"/Users/chaowang/Desktop/git/python-getting-started/app.json",
		"/Users/chaowang/Desktop/git/python-getting-started/gettingstarted/wsgi.py",
		"/Users/chaowang/Desktop/git/python-getting-started/gettingstarted/urls.py",
		"/Users/chaowang/Desktop/git/python-getting-started/gettingstarted/settings.py",
		"/Users/chaowang/Desktop/git/python-getting-started/gettingstarted/__init__.py",
		"/Users/chaowang/Desktop/git/python-getting-started/manage.py",
		"/Users/chaowang/Desktop/program/python/process/plot.py",
		"/Users/chaowang/Desktop/git/python-getting-started/hello/models.py",
		"/Users/chaowang/Desktop/git/python-getting-started/hello/admin.py",
		"/Users/chaowang/.ShadowsocksX/gfwlist.js",
		"/Users/chaowang/Desktop/git/oh-my-zsh/lib/git.zsh",
		"/Users/chaowang/Desktop/git/oh-my-zsh/oh-my-zsh.sh",
		"/Users/chaowang/Desktop/program/python/plot/plot.py",
		"/Users/chaowang/Desktop/program/python/plot2D/plot.py",
		"/Users/chaowang/Desktop/未命名文件夹 2/plot.py",
		"/Users/chaowang/Desktop/未命名文件夹 2/process.py",
		"/Users/chaowang/Desktop/未命名文件夹 2/analysis.py",
		"/Users/chaowang/Desktop/projects/GB prize/j1j2-result/ms2-05-d8-(8-16).py",
		"/Users/chaowang/Desktop/projects/GB prize/j1j2-result/aaa.py",
		"/Users/chaowang/Desktop/program/peps/run/show.sh",
		"/Users/chaowang/Desktop/program/python/plot3D/plot.py",
		"/Users/chaowang/showq.sh",
		"/Users/chaowang/Desktop/program/pack/source/tnsp/source/Tensor.f90",
		"/Users/chaowang/Desktop/program/haskell/problem99.hs",
		"/Users/chaowang/Desktop/program/haskell/test.hs",
		"/Users/chaowang/Library/Application Support/Sublime Text 3/Packages/User/SublimeLinter.sublime-settings",
		"/Users/chaowang/Library/Application Support/Sublime Text 3/Packages/SublimeLinter/SublimeLinter.sublime-settings",
		"/Users/chaowang/Library/Application Support/Sublime Text 3/Packages/User/Package Control.sublime-settings",
		"/Users/chaowang/Library/Application Support/Sublime Text 3/Packages/Fortran/linter.py",
		"/Users/chaowang/Desktop/program/peps/source/su_run.f90",
		"/Users/chaowang/Library/Application Support/Sublime Text 3/Packages/Fortran/build-systems/GFortran.sublime-build",
		"/Users/chaowang/Library/Application Support/Sublime Text 3/Packages/SublimeFortran/InlineLatexHover.py",
		"/Users/chaowang/Desktop/program/peps/source/samplings/sample_square5.f90",
		"/Users/chaowang/Desktop/program/peps/source/samplings/sample_tools.f90",
		"/Users/chaowang/Desktop/my note/haskell/Haskell.tex",
		"/Users/chaowang/Desktop/program/peps_stable/source/samplings/sample_square.f90",
		"/Users/chaowang/Desktop/program/haskell/[shell_cmd",
		"/Users/chaowang/Desktop/program/peps_old/v4_9/gm_do_sampling.f90",
		"/Users/chaowang/Desktop/program/peps_old/v4_11/gm_do_sampling.f90",
		"/Users/chaowang/Desktop/program/peps_old/v4_11/gm_sampling.f90",
		"/Users/chaowang/Desktop/program/peps_old/v4_11/gm_evolve.f90",
		"/Users/chaowang/Desktop/program/peps_old/v4_11/su_run.f90",
		"/Users/chaowang/Desktop/program/pack_old/source/dictionary/v7/source/dictionary.f90",
		"/Users/chaowang/Desktop/program/peps_git/source/samplings/sample_square5.f90",
		"/Users/chaowang/Desktop/program/pack/tenwork/v35/source/lattice_clt.f90",
		"/Users/chaowang/Desktop/program/pack/tenwork/v35/source/lattice.f90",
		"/Users/chaowang/Desktop/program/peps_git/source/gm_peps.f90",
		"/Users/chaowang/Desktop/my note/quantum field theory/dbwell.py",
		"/Users/chaowang/Desktop/my note/quantum field theory/corr.py"
	],
	"find":
	{
		"height": 58.0
	},
	"find_in_files":
	{
		"height": 163.0,
		"where_history":
		[
			""
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"percent",
			"zdotu",
			"error_backtrace_Flag",
			"Set the error_backtrace",
			"+",
			"write",
			"+",
			"writemess",
			"+",
			"writemess",
			"+",
			"writemess",
			"+",
			"writemess",
			"+",
			"writemess"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"write_message"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "source/mpi_info/source/mpi_info.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2654,
						"regions":
						{
						},
						"selection":
						[
							[
								2613,
								2613
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1935.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/Users/chaowang/Desktop/program/peps/source/su_evolve.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 51901,
						"regions":
						{
						},
						"selection":
						[
							[
								53,
								55
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/Users/chaowang/Desktop/program/peps/source/su_run.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5986,
						"regions":
						{
						},
						"selection":
						[
							[
								3896,
								3903
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "doc.sh",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 696,
						"regions":
						{
						},
						"selection":
						[
							[
								224,
								224
							]
						],
						"settings":
						{
							"syntax": "Packages/ShellScript/Bash.sublime-syntax"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "docs/ford.md",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2797,
						"regions":
						{
						},
						"selection":
						[
							[
								59,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/MarkdownEditing/Markdown.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 1508.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "source/percentage/source/percentage.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1878,
						"regions":
						{
						},
						"selection":
						[
							[
								1513,
								1513
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2993.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "source/cumulator/source/cumulator.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8507,
						"regions":
						{
						},
						"selection":
						[
							[
								1637,
								1638
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 520.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "source/error/source/error.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10042,
						"regions":
						{
						},
						"selection":
						[
							[
								98,
								98
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 8,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 616482,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										159,
										168
									],
									[
										233,
										242
									],
									[
										462,
										471
									],
									[
										489,
										498
									],
									[
										574,
										583
									],
									[
										711,
										720
									],
									[
										795,
										804
									],
									[
										854,
										863
									],
									[
										1063,
										1072
									],
									[
										1091,
										1100
									],
									[
										1127,
										1136
									],
									[
										1252,
										1261
									],
									[
										1349,
										1358
									],
									[
										1497,
										1506
									],
									[
										1545,
										1554
									],
									[
										1730,
										1739
									],
									[
										1909,
										1918
									],
									[
										2102,
										2111
									],
									[
										2285,
										2294
									],
									[
										2418,
										2427
									],
									[
										2536,
										2545
									],
									[
										2636,
										2645
									],
									[
										2825,
										2834
									],
									[
										2995,
										3004
									],
									[
										3031,
										3040
									],
									[
										3109,
										3118
									],
									[
										3313,
										3322
									],
									[
										3360,
										3369
									],
									[
										3504,
										3513
									],
									[
										3705,
										3714
									],
									[
										3911,
										3920
									],
									[
										3993,
										4002
									],
									[
										4196,
										4205
									],
									[
										4278,
										4287
									],
									[
										4451,
										4460
									],
									[
										4664,
										4673
									],
									[
										4746,
										4755
									],
									[
										4910,
										4919
									],
									[
										5105,
										5114
									],
									[
										5187,
										5196
									],
									[
										5351,
										5360
									],
									[
										5546,
										5555
									],
									[
										5628,
										5637
									],
									[
										5792,
										5801
									],
									[
										5944,
										5953
									],
									[
										6128,
										6137
									],
									[
										6301,
										6310
									],
									[
										6459,
										6468
									],
									[
										6666,
										6675
									],
									[
										6853,
										6862
									],
									[
										7011,
										7020
									],
									[
										7218,
										7227
									],
									[
										7406,
										7415
									],
									[
										7492,
										7501
									],
									[
										7632,
										7641
									],
									[
										7811,
										7820
									],
									[
										7988,
										7997
									],
									[
										8160,
										8169
									],
									[
										8304,
										8313
									],
									[
										8437,
										8446
									],
									[
										8570,
										8579
									],
									[
										8726,
										8735
									],
									[
										8879,
										8888
									],
									[
										9066,
										9075
									],
									[
										9221,
										9230
									],
									[
										9416,
										9425
									],
									[
										9485,
										9494
									],
									[
										9564,
										9573
									],
									[
										9611,
										9620
									],
									[
										9642,
										9651
									],
									[
										9961,
										9970
									],
									[
										10172,
										10181
									],
									[
										10382,
										10391
									],
									[
										10592,
										10601
									],
									[
										10792,
										10801
									],
									[
										11006,
										11015
									],
									[
										11224,
										11233
									],
									[
										11442,
										11451
									],
									[
										11646,
										11655
									],
									[
										11864,
										11873
									],
									[
										12091,
										12100
									],
									[
										12325,
										12334
									],
									[
										12533,
										12542
									],
									[
										12755,
										12764
									],
									[
										12991,
										13000
									],
									[
										13234,
										13243
									],
									[
										13443,
										13452
									],
									[
										13656,
										13665
									],
									[
										13868,
										13877
									],
									[
										14087,
										14096
									],
									[
										14296,
										14305
									],
									[
										14512,
										14521
									],
									[
										14732,
										14741
									],
									[
										14959,
										14968
									],
									[
										15172,
										15181
									],
									[
										15392,
										15401
									],
									[
										15621,
										15630
									],
									[
										15857,
										15866
									],
									[
										16074,
										16083
									],
									[
										16298,
										16307
									],
									[
										16536,
										16545
									],
									[
										16774,
										16783
									],
									[
										16973,
										16982
									],
									[
										17186,
										17195
									],
									[
										17398,
										17407
									],
									[
										17617,
										17626
									],
									[
										17826,
										17835
									],
									[
										18042,
										18051
									],
									[
										18262,
										18271
									],
									[
										18489,
										18498
									],
									[
										18702,
										18711
									],
									[
										18922,
										18931
									],
									[
										19151,
										19160
									],
									[
										19387,
										19396
									],
									[
										19604,
										19613
									],
									[
										19828,
										19837
									],
									[
										20066,
										20075
									],
									[
										20304,
										20313
									],
									[
										20506,
										20515
									],
									[
										20725,
										20734
									],
									[
										20943,
										20952
									],
									[
										21168,
										21177
									],
									[
										21383,
										21392
									],
									[
										21605,
										21614
									],
									[
										21831,
										21840
									],
									[
										22064,
										22073
									],
									[
										22283,
										22292
									],
									[
										22509,
										22518
									],
									[
										22744,
										22753
									],
									[
										22986,
										22995
									],
									[
										23209,
										23218
									],
									[
										23439,
										23448
									],
									[
										23683,
										23692
									],
									[
										23927,
										23936
									],
									[
										24132,
										24141
									],
									[
										24351,
										24360
									],
									[
										24569,
										24578
									],
									[
										24794,
										24803
									],
									[
										25009,
										25018
									],
									[
										25231,
										25240
									],
									[
										25457,
										25466
									],
									[
										25690,
										25699
									],
									[
										25909,
										25918
									],
									[
										26135,
										26144
									],
									[
										26370,
										26379
									],
									[
										26612,
										26621
									],
									[
										26835,
										26844
									],
									[
										27065,
										27074
									],
									[
										27309,
										27318
									],
									[
										27553,
										27562
									],
									[
										27750,
										27759
									],
									[
										27956,
										27965
									],
									[
										28162,
										28171
									],
									[
										28371,
										28380
									],
									[
										28580,
										28589
									],
									[
										28790,
										28799
									],
									[
										29000,
										29009
									],
									[
										29212,
										29221
									],
									[
										29424,
										29433
									],
									[
										29639,
										29648
									],
									[
										29854,
										29863
									],
									[
										30070,
										30079
									],
									[
										30277,
										30286
									],
									[
										30486,
										30495
									],
									[
										30695,
										30704
									],
									[
										30907,
										30916
									],
									[
										31119,
										31128
									],
									[
										31332,
										31341
									],
									[
										31550,
										31559
									],
									[
										31770,
										31779
									],
									[
										31990,
										31999
									],
									[
										32213,
										32222
									],
									[
										32436,
										32445
									],
									[
										32660,
										32669
									],
									[
										32871,
										32880
									],
									[
										33084,
										33093
									],
									[
										33297,
										33306
									],
									[
										33513,
										33522
									],
									[
										33729,
										33738
									],
									[
										33946,
										33955
									],
									[
										34173,
										34182
									],
									[
										34402,
										34411
									],
									[
										34631,
										34640
									],
									[
										34863,
										34872
									],
									[
										35095,
										35104
									],
									[
										35328,
										35337
									],
									[
										35543,
										35552
									],
									[
										35760,
										35769
									],
									[
										35977,
										35986
									],
									[
										36197,
										36206
									],
									[
										36417,
										36426
									],
									[
										36638,
										36647
									],
									[
										36874,
										36883
									],
									[
										37112,
										37121
									],
									[
										37350,
										37359
									],
									[
										37591,
										37600
									],
									[
										37832,
										37841
									],
									[
										38074,
										38083
									],
									[
										38267,
										38276
									],
									[
										38474,
										38483
									],
									[
										38679,
										38688
									],
									[
										38888,
										38897
									],
									[
										39090,
										39099
									],
									[
										39299,
										39308
									],
									[
										39504,
										39513
									],
									[
										39719,
										39728
									],
									[
										39927,
										39936
									],
									[
										40142,
										40151
									],
									[
										40342,
										40351
									],
									[
										40544,
										40553
									],
									[
										40746,
										40755
									],
									[
										40951,
										40960
									],
									[
										41156,
										41165
									],
									[
										41362,
										41371
									],
									[
										41572,
										41581
									],
									[
										41789,
										41798
									],
									[
										42004,
										42013
									],
									[
										42223,
										42232
									],
									[
										42435,
										42444
									],
									[
										42654,
										42663
									],
									[
										42869,
										42878
									],
									[
										43094,
										43103
									],
									[
										43312,
										43321
									],
									[
										43537,
										43546
									],
									[
										43747,
										43756
									],
									[
										43953,
										43962
									],
									[
										44159,
										44168
									],
									[
										44368,
										44377
									],
									[
										44578,
										44587
									],
									[
										44794,
										44803
									],
									[
										45014,
										45023
									],
									[
										45241,
										45250
									],
									[
										45466,
										45475
									],
									[
										45695,
										45704
									],
									[
										45917,
										45926
									],
									[
										46146,
										46155
									],
									[
										46371,
										46380
									],
									[
										46606,
										46615
									],
									[
										46834,
										46843
									],
									[
										47069,
										47078
									],
									[
										47290,
										47299
									],
									[
										47514,
										47523
									],
									[
										47738,
										47747
									],
									[
										47965,
										47974
									],
									[
										48192,
										48201
									],
									[
										48420,
										48429
									],
									[
										48650,
										48659
									],
									[
										48887,
										48896
									],
									[
										49122,
										49131
									],
									[
										49361,
										49370
									],
									[
										49593,
										49602
									],
									[
										49832,
										49841
									],
									[
										50067,
										50076
									],
									[
										50312,
										50321
									],
									[
										50550,
										50559
									],
									[
										50795,
										50804
									],
									[
										51025,
										51034
									],
									[
										51258,
										51267
									],
									[
										51491,
										51500
									],
									[
										51726,
										51735
									],
									[
										51961,
										51970
									],
									[
										52197,
										52206
									],
									[
										52465,
										52474
									],
									[
										52643,
										52652
									],
									[
										52924,
										52933
									],
									[
										53188,
										53197
									],
									[
										53461,
										53470
									],
									[
										53665,
										53674
									],
									[
										53943,
										53952
									],
									[
										54204,
										54213
									],
									[
										54474,
										54483
									],
									[
										54710,
										54719
									],
									[
										54738,
										54747
									],
									[
										54908,
										54917
									],
									[
										55110,
										55119
									],
									[
										55284,
										55293
									],
									[
										55484,
										55493
									],
									[
										55568,
										55577
									],
									[
										55787,
										55796
									],
									[
										55935,
										55944
									],
									[
										56183,
										56192
									],
									[
										56378,
										56387
									],
									[
										56434,
										56443
									],
									[
										56608,
										56617
									],
									[
										56673,
										56682
									],
									[
										56832,
										56841
									],
									[
										56897,
										56906
									],
									[
										57056,
										57065
									],
									[
										57121,
										57130
									],
									[
										57280,
										57289
									],
									[
										57345,
										57354
									],
									[
										57504,
										57513
									],
									[
										57569,
										57578
									],
									[
										57728,
										57737
									],
									[
										57793,
										57802
									],
									[
										57952,
										57961
									],
									[
										58017,
										58026
									],
									[
										58176,
										58185
									],
									[
										58241,
										58250
									],
									[
										58376,
										58385
									],
									[
										58435,
										58444
									],
									[
										58608,
										58617
									],
									[
										58771,
										58780
									],
									[
										58934,
										58943
									],
									[
										59097,
										59106
									],
									[
										59260,
										59269
									],
									[
										59423,
										59432
									],
									[
										59586,
										59595
									],
									[
										59758,
										59767
									],
									[
										59947,
										59956
									],
									[
										60133,
										60142
									],
									[
										60331,
										60340
									],
									[
										60469,
										60478
									],
									[
										60646,
										60655
									],
									[
										60795,
										60804
									],
									[
										60857,
										60866
									],
									[
										61003,
										61012
									],
									[
										61161,
										61170
									],
									[
										61311,
										61320
									],
									[
										61376,
										61385
									],
									[
										61428,
										61437
									],
									[
										61575,
										61584
									],
									[
										61640,
										61649
									],
									[
										61804,
										61813
									],
									[
										61951,
										61960
									],
									[
										62016,
										62025
									],
									[
										62068,
										62077
									],
									[
										62215,
										62224
									],
									[
										62280,
										62289
									],
									[
										62444,
										62453
									],
									[
										62591,
										62600
									],
									[
										62656,
										62665
									],
									[
										62708,
										62717
									],
									[
										62855,
										62864
									],
									[
										62920,
										62929
									],
									[
										63084,
										63093
									],
									[
										63231,
										63240
									],
									[
										63296,
										63305
									],
									[
										63348,
										63357
									],
									[
										63495,
										63504
									],
									[
										63560,
										63569
									],
									[
										63724,
										63733
									],
									[
										63871,
										63880
									],
									[
										63936,
										63945
									],
									[
										63988,
										63997
									],
									[
										64135,
										64144
									],
									[
										64200,
										64209
									],
									[
										64364,
										64373
									],
									[
										64511,
										64520
									],
									[
										64576,
										64585
									],
									[
										64628,
										64637
									],
									[
										64775,
										64784
									],
									[
										64840,
										64849
									],
									[
										64999,
										65008
									],
									[
										65064,
										65073
									],
									[
										65228,
										65237
									],
									[
										65375,
										65384
									],
									[
										65440,
										65449
									],
									[
										65492,
										65501
									],
									[
										65639,
										65648
									],
									[
										65704,
										65713
									],
									[
										65851,
										65860
									],
									[
										65990,
										65999
									],
									[
										66129,
										66138
									],
									[
										66268,
										66277
									],
									[
										66407,
										66416
									],
									[
										66546,
										66555
									],
									[
										66685,
										66694
									],
									[
										66899,
										66908
									],
									[
										67082,
										67091
									],
									[
										67245,
										67254
									],
									[
										67438,
										67447
									],
									[
										67619,
										67628
									],
									[
										67800,
										67809
									],
									[
										67981,
										67990
									],
									[
										68162,
										68171
									],
									[
										68345,
										68354
									],
									[
										68528,
										68537
									],
									[
										68770,
										68779
									],
									[
										68932,
										68941
									],
									[
										69115,
										69124
									],
									[
										69180,
										69189
									],
									[
										69333,
										69342
									],
									[
										69398,
										69407
									],
									[
										69520,
										69529
									],
									[
										69596,
										69605
									],
									[
										69652,
										69661
									],
									[
										69701,
										69710
									],
									[
										69864,
										69873
									],
									[
										70064,
										70073
									],
									[
										70285,
										70294
									],
									[
										70506,
										70515
									],
									[
										70727,
										70736
									],
									[
										70948,
										70957
									],
									[
										71171,
										71180
									],
									[
										71394,
										71403
									],
									[
										71627,
										71636
									],
									[
										71813,
										71822
									],
									[
										72050,
										72059
									],
									[
										72143,
										72152
									],
									[
										72331,
										72340
									],
									[
										72537,
										72546
									],
									[
										72766,
										72775
									],
									[
										72995,
										73004
									],
									[
										73224,
										73233
									],
									[
										73453,
										73462
									],
									[
										73682,
										73691
									],
									[
										73911,
										73920
									],
									[
										74140,
										74149
									],
									[
										74386,
										74395
									],
									[
										74632,
										74641
									],
									[
										74878,
										74887
									],
									[
										75124,
										75133
									],
									[
										75370,
										75379
									],
									[
										75616,
										75625
									],
									[
										75862,
										75871
									],
									[
										76113,
										76122
									],
									[
										76370,
										76379
									],
									[
										76627,
										76636
									],
									[
										76883,
										76892
									],
									[
										77140,
										77149
									],
									[
										77397,
										77406
									],
									[
										77654,
										77663
									],
									[
										77822,
										77831
									],
									[
										78086,
										78095
									],
									[
										78350,
										78359
									],
									[
										78614,
										78623
									],
									[
										78878,
										78887
									],
									[
										79142,
										79151
									],
									[
										79406,
										79415
									],
									[
										79670,
										79679
									],
									[
										79952,
										79961
									],
									[
										80234,
										80243
									],
									[
										80516,
										80525
									],
									[
										80798,
										80807
									],
									[
										81080,
										81089
									],
									[
										81362,
										81371
									],
									[
										81644,
										81653
									],
									[
										81846,
										81855
									],
									[
										82045,
										82054
									],
									[
										82244,
										82253
									],
									[
										82443,
										82452
									],
									[
										82642,
										82651
									],
									[
										82807,
										82816
									],
									[
										82955,
										82964
									],
									[
										83129,
										83138
									],
									[
										83193,
										83202
									],
									[
										83307,
										83316
									],
									[
										83371,
										83380
									],
									[
										83525,
										83534
									],
									[
										83589,
										83598
									],
									[
										83703,
										83712
									],
									[
										83767,
										83776
									],
									[
										83961,
										83970
									],
									[
										84156,
										84165
									],
									[
										84330,
										84339
									],
									[
										84521,
										84530
									],
									[
										84684,
										84693
									],
									[
										84877,
										84886
									],
									[
										85071,
										85080
									],
									[
										85259,
										85268
									],
									[
										85496,
										85505
									],
									[
										85634,
										85643
									],
									[
										85807,
										85816
									],
									[
										85945,
										85954
									],
									[
										86126,
										86135
									],
									[
										86348,
										86357
									],
									[
										86486,
										86495
									],
									[
										86658,
										86667
									],
									[
										86796,
										86805
									],
									[
										86976,
										86985
									],
									[
										87197,
										87206
									],
									[
										87335,
										87344
									],
									[
										87507,
										87516
									],
									[
										87645,
										87654
									],
									[
										87825,
										87834
									],
									[
										88055,
										88064
									],
									[
										88193,
										88202
									],
									[
										88374,
										88383
									],
									[
										88512,
										88521
									],
									[
										88701,
										88710
									],
									[
										88940,
										88949
									],
									[
										89078,
										89087
									],
									[
										89259,
										89268
									],
									[
										89397,
										89406
									],
									[
										89586,
										89595
									],
									[
										89817,
										89826
									],
									[
										89955,
										89964
									],
									[
										90128,
										90137
									],
									[
										90266,
										90275
									],
									[
										90447,
										90456
									],
									[
										90702,
										90711
									],
									[
										90840,
										90849
									],
									[
										91074,
										91083
									],
									[
										91212,
										91221
									],
									[
										91415,
										91424
									],
									[
										91686,
										91695
									],
									[
										91897,
										91906
									],
									[
										92123,
										92132
									],
									[
										92151,
										92160
									],
									[
										92187,
										92196
									],
									[
										92230,
										92239
									],
									[
										92621,
										92630
									],
									[
										92702,
										92711
									],
									[
										92773,
										92782
									],
									[
										93101,
										93110
									],
									[
										93193,
										93202
									],
									[
										93254,
										93263
									],
									[
										93315,
										93324
									],
									[
										93376,
										93385
									],
									[
										93437,
										93446
									],
									[
										93498,
										93507
									],
									[
										93559,
										93568
									],
									[
										93703,
										93712
									],
									[
										93797,
										93806
									],
									[
										93826,
										93835
									],
									[
										93964,
										93973
									],
									[
										94231,
										94240
									],
									[
										94399,
										94408
									],
									[
										94567,
										94576
									],
									[
										94735,
										94744
									],
									[
										94903,
										94912
									],
									[
										95071,
										95080
									],
									[
										95239,
										95248
									],
									[
										95407,
										95416
									],
									[
										95575,
										95584
									],
									[
										95749,
										95758
									],
									[
										95964,
										95973
									],
									[
										96176,
										96185
									],
									[
										96386,
										96395
									],
									[
										96601,
										96610
									],
									[
										96848,
										96857
									],
									[
										96918,
										96927
									],
									[
										97020,
										97029
									],
									[
										97245,
										97254
									],
									[
										97315,
										97324
									],
									[
										97417,
										97426
									],
									[
										97616,
										97625
									],
									[
										97800,
										97809
									],
									[
										97991,
										98000
									],
									[
										98076,
										98085
									],
									[
										98227,
										98236
									],
									[
										98312,
										98321
									],
									[
										98455,
										98464
									],
									[
										98540,
										98549
									],
									[
										98758,
										98767
									],
									[
										98843,
										98852
									],
									[
										98994,
										99003
									],
									[
										99079,
										99088
									],
									[
										99213,
										99222
									],
									[
										99298,
										99307
									],
									[
										99519,
										99528
									],
									[
										99604,
										99613
									],
									[
										99686,
										99695
									],
									[
										99730,
										99739
									],
									[
										99774,
										99783
									],
									[
										99818,
										99827
									],
									[
										99967,
										99976
									],
									[
										100052,
										100061
									],
									[
										100144,
										100153
									],
									[
										100188,
										100197
									],
									[
										100232,
										100241
									],
									[
										100276,
										100285
									],
									[
										100320,
										100329
									],
									[
										100463,
										100472
									],
									[
										100548,
										100557
									],
									[
										100626,
										100635
									],
									[
										100670,
										100679
									],
									[
										100714,
										100723
									],
									[
										100874,
										100883
									],
									[
										100942,
										100951
									],
									[
										101124,
										101133
									],
									[
										101192,
										101201
									],
									[
										101374,
										101383
									],
									[
										101442,
										101451
									],
									[
										101624,
										101633
									],
									[
										101692,
										101701
									],
									[
										101874,
										101883
									],
									[
										101942,
										101951
									],
									[
										102124,
										102133
									],
									[
										102192,
										102201
									],
									[
										102374,
										102383
									],
									[
										102442,
										102451
									],
									[
										102624,
										102633
									],
									[
										102692,
										102701
									],
									[
										102834,
										102843
									],
									[
										102902,
										102911
									],
									[
										103102,
										103111
									],
									[
										103170,
										103179
									],
									[
										103415,
										103424
									],
									[
										103459,
										103468
									],
									[
										103629,
										103638
									],
									[
										103797,
										103806
									],
									[
										103958,
										103967
									],
									[
										104100,
										104109
									],
									[
										104264,
										104273
									],
									[
										104343,
										104352
									],
									[
										104511,
										104520
									],
									[
										104598,
										104607
									],
									[
										104742,
										104751
									],
									[
										104805,
										104814
									],
									[
										104855,
										104864
									],
									[
										104997,
										105006
									],
									[
										105139,
										105148
									],
									[
										105303,
										105312
									],
									[
										105382,
										105391
									],
									[
										105550,
										105559
									],
									[
										105637,
										105646
									],
									[
										105781,
										105790
									],
									[
										105844,
										105853
									],
									[
										105894,
										105903
									],
									[
										106036,
										106045
									],
									[
										106178,
										106187
									],
									[
										106342,
										106351
									],
									[
										106421,
										106430
									],
									[
										106589,
										106598
									],
									[
										106676,
										106685
									],
									[
										106820,
										106829
									],
									[
										106883,
										106892
									],
									[
										106933,
										106942
									],
									[
										107075,
										107084
									],
									[
										107217,
										107226
									],
									[
										107381,
										107390
									],
									[
										107460,
										107469
									],
									[
										107628,
										107637
									],
									[
										107715,
										107724
									],
									[
										107859,
										107868
									],
									[
										107922,
										107931
									],
									[
										107972,
										107981
									],
									[
										108114,
										108123
									],
									[
										108256,
										108265
									],
									[
										108420,
										108429
									],
									[
										108499,
										108508
									],
									[
										108667,
										108676
									],
									[
										108754,
										108763
									],
									[
										108898,
										108907
									],
									[
										108961,
										108970
									],
									[
										109011,
										109020
									],
									[
										109153,
										109162
									],
									[
										109295,
										109304
									],
									[
										109459,
										109468
									],
									[
										109538,
										109547
									],
									[
										109706,
										109715
									],
									[
										109793,
										109802
									],
									[
										109937,
										109946
									],
									[
										110000,
										110009
									],
									[
										110050,
										110059
									],
									[
										110196,
										110205
									],
									[
										110306,
										110315
									],
									[
										110360,
										110369
									],
									[
										110524,
										110533
									],
									[
										110692,
										110701
									],
									[
										110853,
										110862
									],
									[
										111000,
										111009
									],
									[
										111169,
										111178
									],
									[
										111248,
										111257
									],
									[
										111421,
										111430
									],
									[
										111508,
										111517
									],
									[
										111657,
										111666
									],
									[
										111720,
										111729
									],
									[
										111775,
										111784
									],
									[
										111917,
										111926
									],
									[
										112064,
										112073
									],
									[
										112233,
										112242
									],
									[
										112312,
										112321
									],
									[
										112485,
										112494
									],
									[
										112572,
										112581
									],
									[
										112721,
										112730
									],
									[
										112784,
										112793
									],
									[
										112839,
										112848
									],
									[
										112981,
										112990
									],
									[
										113128,
										113137
									],
									[
										113297,
										113306
									],
									[
										113376,
										113385
									],
									[
										113549,
										113558
									],
									[
										113636,
										113645
									],
									[
										113785,
										113794
									],
									[
										113848,
										113857
									],
									[
										113903,
										113912
									],
									[
										114045,
										114054
									],
									[
										114192,
										114201
									],
									[
										114361,
										114370
									],
									[
										114440,
										114449
									],
									[
										114613,
										114622
									],
									[
										114700,
										114709
									],
									[
										114849,
										114858
									],
									[
										114912,
										114921
									],
									[
										114967,
										114976
									],
									[
										115109,
										115118
									],
									[
										115256,
										115265
									],
									[
										115425,
										115434
									],
									[
										115504,
										115513
									],
									[
										115677,
										115686
									],
									[
										115764,
										115773
									],
									[
										115913,
										115922
									],
									[
										115976,
										115985
									],
									[
										116031,
										116040
									],
									[
										116173,
										116182
									],
									[
										116315,
										116324
									],
									[
										116479,
										116488
									],
									[
										116558,
										116567
									],
									[
										116726,
										116735
									],
									[
										116813,
										116822
									],
									[
										116957,
										116966
									],
									[
										117020,
										117029
									],
									[
										117070,
										117079
									],
									[
										117216,
										117225
									],
									[
										117364,
										117373
									],
									[
										117543,
										117552
									],
									[
										117724,
										117733
									],
									[
										117787,
										117796
									],
									[
										117857,
										117866
									],
									[
										117953,
										117962
									],
									[
										118025,
										118034
									],
									[
										118083,
										118092
									],
									[
										118141,
										118150
									],
									[
										118237,
										118246
									],
									[
										118300,
										118309
									],
									[
										118370,
										118379
									],
									[
										118466,
										118475
									],
									[
										118538,
										118547
									],
									[
										118596,
										118605
									],
									[
										118654,
										118663
									],
									[
										118800,
										118809
									],
									[
										118862,
										118871
									],
									[
										118931,
										118940
									],
									[
										119026,
										119035
									],
									[
										119097,
										119106
									],
									[
										119154,
										119163
									],
									[
										119211,
										119220
									],
									[
										119304,
										119313
									],
									[
										119366,
										119375
									],
									[
										119435,
										119444
									],
									[
										119530,
										119539
									],
									[
										119601,
										119610
									],
									[
										119658,
										119667
									],
									[
										119715,
										119724
									],
									[
										119908,
										119917
									],
									[
										119957,
										119966
									],
									[
										120006,
										120015
									],
									[
										120071,
										120080
									],
									[
										120188,
										120197
									],
									[
										120290,
										120299
									],
									[
										120392,
										120401
									],
									[
										120449,
										120458
									],
									[
										120485,
										120494
									],
									[
										120553,
										120562
									],
									[
										120633,
										120642
									],
									[
										120675,
										120684
									],
									[
										120725,
										120734
									],
									[
										120885,
										120894
									],
									[
										121099,
										121108
									],
									[
										121330,
										121339
									],
									[
										121545,
										121554
									],
									[
										121749,
										121758
									],
									[
										121966,
										121975
									],
									[
										122169,
										122178
									],
									[
										122386,
										122395
									],
									[
										122636,
										122645
									],
									[
										122913,
										122922
									],
									[
										123215,
										123224
									],
									[
										123442,
										123451
									],
									[
										123664,
										123673
									],
									[
										123914,
										123923
									],
									[
										124191,
										124200
									],
									[
										124493,
										124502
									],
									[
										124720,
										124729
									],
									[
										124942,
										124951
									],
									[
										125192,
										125201
									],
									[
										125469,
										125478
									],
									[
										125771,
										125780
									],
									[
										125998,
										126007
									],
									[
										126220,
										126229
									],
									[
										126470,
										126479
									],
									[
										126747,
										126756
									],
									[
										127049,
										127058
									],
									[
										127276,
										127285
									],
									[
										127498,
										127507
									],
									[
										127596,
										127605
									],
									[
										127801,
										127810
									],
									[
										127899,
										127908
									],
									[
										127969,
										127978
									],
									[
										128231,
										128240
									],
									[
										128533,
										128542
									],
									[
										128760,
										128769
									],
									[
										128982,
										128991
									],
									[
										129232,
										129241
									],
									[
										129509,
										129518
									],
									[
										129811,
										129820
									],
									[
										130038,
										130047
									],
									[
										130260,
										130269
									],
									[
										130510,
										130519
									],
									[
										130787,
										130796
									],
									[
										131089,
										131098
									],
									[
										131316,
										131325
									],
									[
										131517,
										131526
									],
									[
										131675,
										131684
									],
									[
										131843,
										131852
									],
									[
										132035,
										132044
									],
									[
										132249,
										132258
									],
									[
										132509,
										132518
									],
									[
										132800,
										132809
									],
									[
										133101,
										133110
									],
									[
										133337,
										133346
									],
									[
										133567,
										133576
									],
									[
										133827,
										133836
									],
									[
										134118,
										134127
									],
									[
										134419,
										134428
									],
									[
										134655,
										134664
									],
									[
										134885,
										134894
									],
									[
										135145,
										135154
									],
									[
										135436,
										135445
									],
									[
										135737,
										135746
									],
									[
										135973,
										135982
									],
									[
										136203,
										136212
									],
									[
										136463,
										136472
									],
									[
										136754,
										136763
									],
									[
										137055,
										137064
									],
									[
										137291,
										137300
									],
									[
										137521,
										137530
									],
									[
										137781,
										137790
									],
									[
										138072,
										138081
									],
									[
										138373,
										138382
									],
									[
										138609,
										138618
									],
									[
										138839,
										138848
									],
									[
										139099,
										139108
									],
									[
										139390,
										139399
									],
									[
										139691,
										139700
									],
									[
										139927,
										139936
									],
									[
										140157,
										140166
									],
									[
										140417,
										140426
									],
									[
										140708,
										140717
									],
									[
										141009,
										141018
									],
									[
										141245,
										141254
									],
									[
										141473,
										141482
									],
									[
										141634,
										141643
									],
									[
										141852,
										141861
									],
									[
										142048,
										142057
									],
									[
										142264,
										142273
									],
									[
										142468,
										142477
									],
									[
										142665,
										142674
									],
									[
										142744,
										142753
									],
									[
										142813,
										142822
									],
									[
										142979,
										142988
									],
									[
										143158,
										143167
									],
									[
										143337,
										143346
									],
									[
										143516,
										143525
									],
									[
										143695,
										143704
									],
									[
										143874,
										143883
									],
									[
										144053,
										144062
									],
									[
										144232,
										144241
									],
									[
										144411,
										144420
									],
									[
										144590,
										144599
									],
									[
										144769,
										144778
									],
									[
										144948,
										144957
									],
									[
										145152,
										145161
									],
									[
										145331,
										145340
									],
									[
										145410,
										145419
									],
									[
										145573,
										145582
									],
									[
										145749,
										145758
									],
									[
										145925,
										145934
									],
									[
										146101,
										146110
									],
									[
										146280,
										146289
									],
									[
										146459,
										146468
									],
									[
										146638,
										146647
									],
									[
										146817,
										146826
									],
									[
										146996,
										147005
									],
									[
										147175,
										147184
									],
									[
										147354,
										147363
									],
									[
										147533,
										147542
									],
									[
										147712,
										147721
									],
									[
										147891,
										147900
									],
									[
										148070,
										148079
									],
									[
										148249,
										148258
									],
									[
										148428,
										148437
									],
									[
										148607,
										148616
									],
									[
										148786,
										148795
									],
									[
										148965,
										148974
									],
									[
										149148,
										149157
									],
									[
										149344,
										149353
									],
									[
										149542,
										149551
									],
									[
										149740,
										149749
									],
									[
										149938,
										149947
									],
									[
										150136,
										150145
									],
									[
										150319,
										150328
									],
									[
										150498,
										150507
									],
									[
										150677,
										150686
									],
									[
										150856,
										150865
									],
									[
										151035,
										151044
									],
									[
										151233,
										151242
									],
									[
										151500,
										151509
									],
									[
										151758,
										151767
									],
									[
										152034,
										152043
									],
									[
										152253,
										152262
									],
									[
										152481,
										152490
									],
									[
										152709,
										152718
									],
									[
										152937,
										152946
									],
									[
										153164,
										153173
									],
									[
										153409,
										153418
									],
									[
										153483,
										153492
									],
									[
										153570,
										153579
									],
									[
										153782,
										153791
									],
									[
										154049,
										154058
									],
									[
										154307,
										154316
									],
									[
										154583,
										154592
									],
									[
										154802,
										154811
									],
									[
										155030,
										155039
									],
									[
										155258,
										155267
									],
									[
										155486,
										155495
									],
									[
										155713,
										155722
									],
									[
										155958,
										155967
									],
									[
										156032,
										156041
									],
									[
										156119,
										156128
									],
									[
										156331,
										156340
									],
									[
										156598,
										156607
									],
									[
										156856,
										156865
									],
									[
										157132,
										157141
									],
									[
										157351,
										157360
									],
									[
										157579,
										157588
									],
									[
										157807,
										157816
									],
									[
										158035,
										158044
									],
									[
										158262,
										158271
									],
									[
										158507,
										158516
									],
									[
										158581,
										158590
									],
									[
										158668,
										158677
									],
									[
										158880,
										158889
									],
									[
										159147,
										159156
									],
									[
										159405,
										159414
									],
									[
										159681,
										159690
									],
									[
										159900,
										159909
									],
									[
										160128,
										160137
									],
									[
										160356,
										160365
									],
									[
										160587,
										160596
									],
									[
										160820,
										160829
									],
									[
										161076,
										161085
									],
									[
										161208,
										161217
									],
									[
										161364,
										161373
									],
									[
										161560,
										161569
									],
									[
										161692,
										161701
									],
									[
										161848,
										161857
									],
									[
										162030,
										162039
									],
									[
										162191,
										162200
									],
									[
										162386,
										162395
									],
									[
										162566,
										162575
									],
									[
										162790,
										162799
									],
									[
										162841,
										162850
									],
									[
										162941,
										162950
									],
									[
										163129,
										163138
									],
									[
										163180,
										163189
									],
									[
										163278,
										163287
									],
									[
										163438,
										163447
									],
									[
										163638,
										163647
									],
									[
										163838,
										163847
									],
									[
										164038,
										164047
									],
									[
										164212,
										164221
									],
									[
										164417,
										164426
									],
									[
										164589,
										164598
									],
									[
										164803,
										164812
									],
									[
										164982,
										164991
									],
									[
										165201,
										165210
									],
									[
										165395,
										165404
									],
									[
										165455,
										165464
									],
									[
										165574,
										165583
									],
									[
										165634,
										165643
									],
									[
										165801,
										165810
									],
									[
										166012,
										166021
									],
									[
										166073,
										166082
									],
									[
										166196,
										166205
									],
									[
										166284,
										166293
									],
									[
										166420,
										166429
									],
									[
										166640,
										166649
									],
									[
										166814,
										166823
									],
									[
										167019,
										167028
									],
									[
										167220,
										167229
									],
									[
										167421,
										167430
									],
									[
										167600,
										167609
									],
									[
										167808,
										167817
									],
									[
										167987,
										167996
									],
									[
										168200,
										168209
									],
									[
										168405,
										168414
									],
									[
										168584,
										168593
									],
									[
										168792,
										168801
									],
									[
										168971,
										168980
									],
									[
										169187,
										169196
									],
									[
										169382,
										169391
									],
									[
										169563,
										169572
									],
									[
										169625,
										169634
									],
									[
										169737,
										169746
									],
									[
										169821,
										169830
									],
									[
										169991,
										170000
									],
									[
										170208,
										170217
									],
									[
										170384,
										170393
									],
									[
										170578,
										170587
									],
									[
										170800,
										170809
									],
									[
										171016,
										171025
									],
									[
										171084,
										171093
									],
									[
										171200,
										171209
									],
									[
										171290,
										171299
									],
									[
										171462,
										171471
									],
									[
										171681,
										171690
									],
									[
										171897,
										171906
									],
									[
										172074,
										172083
									],
									[
										172297,
										172306
									],
									[
										172474,
										172483
									],
									[
										172702,
										172711
									],
									[
										172879,
										172888
									],
									[
										173115,
										173124
									],
									[
										173292,
										173301
									],
									[
										173501,
										173510
									],
									[
										173608,
										173617
									],
									[
										173693,
										173702
									],
									[
										173919,
										173928
									],
									[
										174096,
										174105
									],
									[
										174324,
										174333
									],
									[
										174501,
										174510
									],
									[
										174713,
										174722
									],
									[
										174890,
										174899
									],
									[
										175118,
										175127
									],
									[
										175295,
										175304
									],
									[
										175513,
										175522
									],
									[
										175690,
										175699
									],
									[
										175918,
										175927
									],
									[
										176095,
										176104
									],
									[
										176304,
										176313
									],
									[
										176481,
										176490
									],
									[
										176709,
										176718
									],
									[
										176886,
										176895
									],
									[
										177104,
										177113
									],
									[
										177281,
										177290
									],
									[
										177509,
										177518
									],
									[
										177686,
										177695
									],
									[
										177895,
										177904
									],
									[
										178072,
										178081
									],
									[
										178316,
										178325
									],
									[
										178493,
										178502
									],
									[
										178721,
										178730
									],
									[
										178897,
										178906
									],
									[
										179122,
										179131
									],
									[
										179250,
										179259
									],
									[
										179440,
										179449
									],
									[
										179515,
										179524
									],
									[
										179590,
										179599
									],
									[
										179783,
										179792
									],
									[
										179959,
										179968
									],
									[
										180162,
										180171
									],
									[
										180237,
										180246
									],
									[
										180310,
										180319
									],
									[
										180501,
										180510
									],
									[
										180676,
										180685
									],
									[
										180879,
										180888
									],
									[
										180954,
										180963
									],
									[
										181027,
										181036
									],
									[
										181222,
										181231
									],
									[
										181398,
										181407
									],
									[
										181623,
										181632
									],
									[
										181751,
										181760
									],
									[
										181941,
										181950
									],
									[
										182016,
										182025
									],
									[
										182087,
										182096
									],
									[
										182280,
										182289
									],
									[
										182456,
										182465
									],
									[
										182650,
										182659
									],
									[
										182778,
										182787
									],
									[
										182923,
										182932
									],
									[
										182998,
										183007
									],
									[
										183067,
										183076
									],
									[
										183261,
										183270
									],
									[
										183436,
										183445
									],
									[
										183630,
										183639
									],
									[
										183758,
										183767
									],
									[
										183903,
										183912
									],
									[
										183978,
										183987
									],
									[
										184047,
										184056
									],
									[
										184255,
										184264
									],
									[
										184448,
										184457
									],
									[
										184576,
										184585
									],
									[
										184727,
										184736
									],
									[
										184894,
										184903
									],
									[
										185114,
										185123
									],
									[
										185323,
										185332
									],
									[
										185488,
										185497
									],
									[
										185710,
										185719
									],
									[
										185919,
										185928
									],
									[
										186084,
										186093
									],
									[
										186306,
										186315
									],
									[
										186501,
										186510
									],
									[
										186629,
										186638
									],
									[
										186780,
										186789
									],
									[
										186945,
										186954
									],
									[
										187144,
										187153
									],
									[
										187358,
										187367
									],
									[
										187574,
										187583
									],
									[
										187745,
										187754
									],
									[
										187831,
										187840
									],
									[
										188018,
										188027
									],
									[
										188103,
										188112
									],
									[
										188237,
										188246
									],
									[
										188410,
										188419
									],
									[
										188608,
										188617
									],
									[
										188693,
										188702
									],
									[
										188827,
										188836
									],
									[
										189000,
										189009
									],
									[
										189213,
										189222
									],
									[
										189298,
										189307
									],
									[
										189437,
										189446
									],
									[
										189615,
										189624
									],
									[
										189828,
										189837
									],
									[
										189913,
										189922
									],
									[
										190052,
										190061
									],
									[
										190230,
										190239
									],
									[
										190428,
										190437
									],
									[
										190513,
										190522
									],
									[
										190647,
										190656
									],
									[
										190820,
										190829
									],
									[
										191018,
										191027
									],
									[
										191103,
										191112
									],
									[
										191237,
										191246
									],
									[
										191410,
										191419
									],
									[
										191602,
										191611
									],
									[
										191687,
										191696
									],
									[
										191826,
										191835
									],
									[
										192004,
										192013
									],
									[
										192196,
										192205
									],
									[
										192281,
										192290
									],
									[
										192420,
										192429
									],
									[
										192598,
										192607
									],
									[
										192796,
										192805
									],
									[
										192881,
										192890
									],
									[
										193015,
										193024
									],
									[
										193188,
										193197
									],
									[
										193386,
										193395
									],
									[
										193471,
										193480
									],
									[
										193605,
										193614
									],
									[
										193778,
										193787
									],
									[
										193986,
										193995
									],
									[
										194071,
										194080
									],
									[
										194210,
										194219
									],
									[
										194388,
										194397
									],
									[
										194596,
										194605
									],
									[
										194681,
										194690
									],
									[
										194820,
										194829
									],
									[
										194998,
										195007
									],
									[
										195215,
										195224
									],
									[
										195357,
										195366
									],
									[
										195503,
										195512
									],
									[
										195713,
										195722
									],
									[
										195855,
										195864
									],
									[
										196001,
										196010
									],
									[
										196211,
										196220
									],
									[
										196353,
										196362
									],
									[
										196523,
										196532
									],
									[
										196733,
										196742
									],
									[
										196875,
										196884
									],
									[
										197020,
										197029
									],
									[
										197230,
										197239
									],
									[
										197372,
										197381
									],
									[
										197517,
										197526
									],
									[
										197727,
										197736
									],
									[
										197869,
										197878
									],
									[
										198014,
										198023
									],
									[
										198224,
										198233
									],
									[
										198366,
										198375
									],
									[
										198520,
										198529
									],
									[
										198730,
										198739
									],
									[
										198872,
										198881
									],
									[
										199026,
										199035
									],
									[
										199236,
										199245
									],
									[
										199378,
										199387
									],
									[
										199532,
										199541
									],
									[
										199742,
										199751
									],
									[
										199884,
										199893
									],
									[
										200038,
										200047
									],
									[
										200248,
										200257
									],
									[
										200390,
										200399
									],
									[
										200536,
										200545
									],
									[
										200746,
										200755
									],
									[
										200888,
										200897
									],
									[
										201034,
										201043
									],
									[
										201244,
										201253
									],
									[
										201386,
										201395
									],
									[
										201564,
										201573
									],
									[
										201774,
										201783
									],
									[
										201916,
										201925
									],
									[
										202094,
										202103
									],
									[
										202304,
										202313
									],
									[
										202446,
										202455
									],
									[
										202592,
										202601
									],
									[
										202802,
										202811
									],
									[
										202944,
										202953
									],
									[
										203090,
										203099
									],
									[
										203300,
										203309
									],
									[
										203442,
										203451
									],
									[
										203587,
										203596
									],
									[
										203797,
										203806
									],
									[
										203939,
										203948
									],
									[
										204084,
										204093
									],
									[
										204294,
										204303
									],
									[
										204436,
										204445
									],
									[
										204581,
										204590
									],
									[
										204791,
										204800
									],
									[
										204933,
										204942
									],
									[
										205078,
										205087
									],
									[
										205288,
										205297
									],
									[
										205430,
										205439
									],
									[
										205584,
										205593
									],
									[
										205794,
										205803
									],
									[
										205936,
										205945
									],
									[
										206090,
										206099
									],
									[
										206300,
										206309
									],
									[
										206442,
										206451
									],
									[
										206596,
										206605
									],
									[
										206806,
										206815
									],
									[
										206948,
										206957
									],
									[
										207102,
										207111
									],
									[
										207312,
										207321
									],
									[
										207454,
										207463
									],
									[
										207600,
										207609
									],
									[
										207810,
										207819
									],
									[
										207952,
										207961
									],
									[
										208098,
										208107
									],
									[
										208308,
										208317
									],
									[
										208450,
										208459
									],
									[
										208628,
										208637
									],
									[
										208838,
										208847
									],
									[
										208980,
										208989
									],
									[
										209158,
										209167
									],
									[
										209368,
										209377
									],
									[
										209510,
										209519
									],
									[
										209656,
										209665
									],
									[
										209866,
										209875
									],
									[
										210008,
										210017
									],
									[
										210154,
										210163
									],
									[
										210364,
										210373
									],
									[
										210506,
										210515
									],
									[
										210651,
										210660
									],
									[
										210861,
										210870
									],
									[
										211003,
										211012
									],
									[
										211148,
										211157
									],
									[
										211358,
										211367
									],
									[
										211500,
										211509
									],
									[
										211645,
										211654
									],
									[
										211855,
										211864
									],
									[
										211997,
										212006
									],
									[
										212142,
										212151
									],
									[
										212352,
										212361
									],
									[
										212494,
										212503
									],
									[
										212648,
										212657
									],
									[
										212858,
										212867
									],
									[
										213000,
										213009
									],
									[
										213154,
										213163
									],
									[
										213364,
										213373
									],
									[
										213506,
										213515
									],
									[
										213660,
										213669
									],
									[
										213870,
										213879
									],
									[
										214012,
										214021
									],
									[
										214166,
										214175
									],
									[
										214376,
										214385
									],
									[
										214518,
										214527
									],
									[
										214664,
										214673
									],
									[
										214874,
										214883
									],
									[
										215016,
										215025
									],
									[
										215162,
										215171
									],
									[
										215372,
										215381
									],
									[
										215514,
										215523
									],
									[
										215680,
										215689
									],
									[
										215890,
										215899
									],
									[
										216032,
										216041
									],
									[
										216198,
										216207
									],
									[
										216388,
										216397
									],
									[
										216569,
										216578
									],
									[
										216747,
										216756
									],
									[
										216927,
										216936
									],
									[
										217116,
										217125
									],
									[
										217305,
										217314
									],
									[
										217488,
										217497
									],
									[
										217701,
										217710
									],
									[
										217849,
										217858
									],
									[
										218033,
										218042
									],
									[
										218217,
										218226
									],
									[
										218361,
										218370
									],
									[
										218545,
										218554
									],
									[
										218721,
										218730
									],
									[
										218923,
										218932
									],
									[
										219099,
										219108
									],
									[
										219306,
										219315
									],
									[
										219482,
										219491
									],
									[
										219689,
										219698
									],
									[
										219865,
										219874
									],
									[
										220072,
										220081
									],
									[
										220248,
										220257
									],
									[
										220455,
										220464
									],
									[
										220631,
										220640
									],
									[
										220823,
										220832
									],
									[
										220967,
										220976
									],
									[
										221116,
										221125
									],
									[
										221277,
										221286
									],
									[
										221433,
										221442
									],
									[
										221590,
										221599
									],
									[
										221787,
										221796
									],
									[
										221935,
										221944
									],
									[
										222111,
										222120
									],
									[
										222313,
										222322
									],
									[
										222461,
										222470
									],
									[
										222637,
										222646
									],
									[
										222844,
										222853
									],
									[
										222992,
										223001
									],
									[
										223168,
										223177
									],
									[
										223375,
										223384
									],
									[
										223523,
										223532
									],
									[
										223699,
										223708
									],
									[
										223906,
										223915
									],
									[
										224054,
										224063
									],
									[
										224230,
										224239
									],
									[
										224437,
										224446
									],
									[
										224585,
										224594
									],
									[
										224761,
										224770
									],
									[
										224953,
										224962
									],
									[
										225097,
										225106
									],
									[
										225246,
										225255
									],
									[
										225407,
										225416
									],
									[
										225563,
										225572
									],
									[
										225720,
										225729
									],
									[
										225917,
										225926
									],
									[
										226065,
										226074
									],
									[
										226241,
										226250
									],
									[
										226443,
										226452
									],
									[
										226591,
										226600
									],
									[
										226767,
										226776
									],
									[
										226974,
										226983
									],
									[
										227122,
										227131
									],
									[
										227298,
										227307
									],
									[
										227505,
										227514
									],
									[
										227653,
										227662
									],
									[
										227829,
										227838
									],
									[
										228036,
										228045
									],
									[
										228184,
										228193
									],
									[
										228360,
										228369
									],
									[
										228567,
										228576
									],
									[
										228715,
										228724
									],
									[
										228891,
										228900
									],
									[
										229083,
										229092
									],
									[
										229227,
										229236
									],
									[
										229376,
										229385
									],
									[
										229537,
										229546
									],
									[
										229693,
										229702
									],
									[
										229850,
										229859
									],
									[
										230047,
										230056
									],
									[
										230195,
										230204
									],
									[
										230371,
										230380
									],
									[
										230573,
										230582
									],
									[
										230721,
										230730
									],
									[
										230897,
										230906
									],
									[
										231104,
										231113
									],
									[
										231252,
										231261
									],
									[
										231428,
										231437
									],
									[
										231635,
										231644
									],
									[
										231783,
										231792
									],
									[
										231959,
										231968
									],
									[
										232166,
										232175
									],
									[
										232314,
										232323
									],
									[
										232490,
										232499
									],
									[
										232697,
										232706
									],
									[
										232845,
										232854
									],
									[
										233021,
										233030
									],
									[
										233213,
										233222
									],
									[
										233357,
										233366
									],
									[
										233506,
										233515
									],
									[
										233667,
										233676
									],
									[
										233823,
										233832
									],
									[
										233980,
										233989
									],
									[
										234177,
										234186
									],
									[
										234325,
										234334
									],
									[
										234501,
										234510
									],
									[
										234703,
										234712
									],
									[
										234851,
										234860
									],
									[
										235027,
										235036
									],
									[
										235234,
										235243
									],
									[
										235382,
										235391
									],
									[
										235558,
										235567
									],
									[
										235765,
										235774
									],
									[
										235913,
										235922
									],
									[
										236089,
										236098
									],
									[
										236296,
										236305
									],
									[
										236444,
										236453
									],
									[
										236620,
										236629
									],
									[
										236827,
										236836
									],
									[
										236975,
										236984
									],
									[
										237151,
										237160
									],
									[
										237353,
										237362
									],
									[
										237526,
										237535
									],
									[
										237687,
										237696
									],
									[
										237846,
										237855
									],
									[
										237893,
										237902
									],
									[
										238045,
										238054
									],
									[
										238092,
										238101
									],
									[
										238156,
										238165
									],
									[
										238322,
										238331
									],
									[
										238491,
										238500
									],
									[
										238675,
										238684
									],
									[
										238928,
										238937
									],
									[
										239014,
										239023
									],
									[
										239074,
										239083
									],
									[
										239286,
										239295
									],
									[
										239486,
										239495
									],
									[
										239571,
										239580
									],
									[
										239630,
										239639
									],
									[
										239848,
										239857
									],
									[
										240030,
										240039
									],
									[
										240189,
										240198
									],
									[
										240430,
										240439
									],
									[
										240514,
										240523
									],
									[
										240569,
										240578
									],
									[
										240771,
										240780
									],
									[
										240951,
										240960
									],
									[
										241166,
										241175
									],
									[
										241250,
										241259
									],
									[
										241308,
										241317
									],
									[
										241521,
										241530
									],
									[
										241793,
										241802
									],
									[
										241868,
										241877
									],
									[
										241936,
										241945
									],
									[
										242174,
										242183
									],
									[
										242231,
										242240
									],
									[
										242538,
										242547
									],
									[
										242594,
										242603
									],
									[
										242972,
										242981
									],
									[
										243047,
										243056
									],
									[
										243127,
										243136
									],
									[
										243304,
										243313
									],
									[
										243360,
										243369
									],
									[
										243439,
										243448
									],
									[
										243570,
										243579
									],
									[
										243639,
										243648
									],
									[
										243751,
										243760
									],
									[
										243820,
										243829
									],
									[
										244026,
										244035
									],
									[
										244083,
										244092
									],
									[
										244390,
										244399
									],
									[
										244446,
										244455
									],
									[
										244743,
										244752
									],
									[
										244798,
										244807
									],
									[
										244954,
										244963
									],
									[
										245009,
										245018
									],
									[
										245179,
										245188
									],
									[
										245267,
										245276
									],
									[
										245310,
										245319
									],
									[
										245521,
										245530
									],
									[
										245609,
										245618
									],
									[
										245652,
										245661
									],
									[
										245884,
										245893
									],
									[
										245959,
										245968
									],
									[
										246018,
										246027
									],
									[
										246176,
										246185
									],
									[
										246246,
										246255
									],
									[
										246523,
										246532
									],
									[
										246594,
										246603
									],
									[
										246872,
										246881
									],
									[
										246927,
										246936
									],
									[
										247058,
										247067
									],
									[
										247126,
										247135
									],
									[
										247238,
										247247
									],
									[
										247306,
										247315
									],
									[
										247463,
										247472
									],
									[
										247517,
										247526
									],
									[
										247672,
										247681
									],
									[
										247726,
										247735
									],
									[
										247896,
										247905
									],
									[
										247984,
										247993
									],
									[
										248027,
										248036
									],
									[
										248238,
										248247
									],
									[
										248326,
										248335
									],
									[
										248369,
										248378
									],
									[
										248601,
										248610
									],
									[
										248676,
										248685
									],
									[
										248735,
										248744
									],
									[
										248934,
										248943
									],
									[
										249004,
										249013
									],
									[
										249281,
										249290
									],
									[
										249352,
										249361
									],
									[
										249630,
										249639
									],
									[
										249685,
										249694
									],
									[
										249816,
										249825
									],
									[
										249884,
										249893
									],
									[
										249996,
										250005
									],
									[
										250064,
										250073
									],
									[
										250221,
										250230
									],
									[
										250275,
										250284
									],
									[
										250430,
										250439
									],
									[
										250484,
										250493
									],
									[
										250654,
										250663
									],
									[
										250742,
										250751
									],
									[
										250785,
										250794
									],
									[
										250996,
										251005
									],
									[
										251084,
										251093
									],
									[
										251127,
										251136
									],
									[
										251369,
										251378
									],
									[
										251533,
										251542
									],
									[
										251827,
										251836
									],
									[
										251998,
										252007
									],
									[
										252155,
										252164
									],
									[
										252435,
										252444
									],
									[
										252602,
										252611
									],
									[
										252896,
										252905
									],
									[
										253067,
										253076
									],
									[
										253235,
										253244
									],
									[
										253518,
										253527
									],
									[
										253682,
										253691
									],
									[
										253976,
										253985
									],
									[
										254233,
										254242
									],
									[
										254390,
										254399
									],
									[
										254672,
										254681
									],
									[
										254839,
										254848
									],
									[
										255133,
										255142
									],
									[
										255390,
										255399
									],
									[
										255558,
										255567
									],
									[
										255843,
										255852
									],
									[
										256007,
										256016
									],
									[
										256301,
										256310
									],
									[
										256558,
										256567
									],
									[
										256726,
										256735
									],
									[
										257008,
										257017
									],
									[
										257175,
										257184
									],
									[
										257469,
										257478
									],
									[
										257726,
										257735
									],
									[
										257883,
										257892
									],
									[
										258120,
										258129
									],
									[
										258258,
										258267
									],
									[
										258317,
										258326
									],
									[
										258460,
										258469
									],
									[
										258598,
										258607
									],
									[
										258657,
										258666
									],
									[
										258802,
										258811
									],
									[
										258940,
										258949
									],
									[
										258999,
										259008
									],
									[
										259142,
										259151
									],
									[
										259280,
										259289
									],
									[
										259339,
										259348
									],
									[
										259484,
										259493
									],
									[
										259541,
										259550
									],
									[
										259720,
										259729
									],
									[
										259777,
										259786
									],
									[
										259956,
										259965
									],
									[
										260013,
										260022
									],
									[
										260195,
										260204
									],
									[
										260252,
										260261
									],
									[
										260463,
										260472
									],
									[
										260520,
										260529
									],
									[
										260578,
										260587
									],
									[
										260636,
										260645
									],
									[
										260694,
										260703
									],
									[
										260752,
										260761
									],
									[
										260810,
										260819
									],
									[
										260868,
										260877
									],
									[
										260926,
										260935
									],
									[
										260986,
										260995
									],
									[
										261176,
										261185
									],
									[
										261441,
										261450
									],
									[
										261469,
										261478
									],
									[
										261505,
										261514
									],
									[
										261546,
										261555
									],
									[
										261588,
										261597
									],
									[
										261634,
										261643
									],
									[
										261675,
										261684
									],
									[
										261717,
										261726
									],
									[
										261758,
										261767
									],
									[
										261798,
										261807
									],
									[
										261839,
										261848
									],
									[
										261880,
										261889
									],
									[
										261927,
										261936
									],
									[
										261975,
										261984
									],
									[
										262022,
										262031
									],
									[
										262068,
										262077
									],
									[
										262115,
										262124
									],
									[
										262162,
										262171
									],
									[
										262208,
										262217
									],
									[
										262255,
										262264
									],
									[
										262300,
										262309
									],
									[
										262346,
										262355
									],
									[
										262392,
										262401
									],
									[
										262444,
										262453
									],
									[
										262497,
										262506
									],
									[
										262548,
										262557
									],
									[
										262600,
										262609
									],
									[
										262755,
										262764
									],
									[
										262784,
										262793
									],
									[
										262871,
										262880
									],
									[
										262955,
										262964
									],
									[
										262998,
										263007
									],
									[
										263059,
										263068
									],
									[
										263114,
										263123
									],
									[
										263152,
										263161
									],
									[
										263237,
										263246
									],
									[
										263324,
										263333
									],
									[
										263473,
										263482
									],
									[
										263651,
										263660
									],
									[
										263824,
										263833
									],
									[
										264009,
										264018
									],
									[
										264189,
										264198
									],
									[
										264380,
										264389
									],
									[
										264572,
										264581
									],
									[
										264773,
										264782
									],
									[
										264882,
										264891
									],
									[
										264966,
										264975
									],
									[
										265023,
										265032
									],
									[
										265244,
										265253
									],
									[
										265328,
										265337
									],
									[
										265401,
										265410
									],
									[
										265485,
										265494
									],
									[
										265514,
										265523
									],
									[
										265543,
										265552
									],
									[
										265704,
										265713
									],
									[
										265783,
										265792
									],
									[
										265871,
										265880
									],
									[
										265948,
										265957
									],
									[
										266010,
										266019
									],
									[
										266144,
										266153
									],
									[
										266343,
										266352
									],
									[
										266542,
										266551
									],
									[
										266666,
										266675
									],
									[
										266697,
										266706
									],
									[
										266785,
										266794
									],
									[
										266885,
										266894
									],
									[
										267073,
										267082
									],
									[
										267259,
										267268
									],
									[
										267451,
										267460
									],
									[
										267629,
										267638
									],
									[
										267816,
										267825
									],
									[
										267998,
										268007
									],
									[
										268166,
										268175
									],
									[
										268345,
										268354
									],
									[
										268533,
										268542
									],
									[
										268716,
										268725
									],
									[
										268885,
										268894
									],
									[
										269063,
										269072
									],
									[
										269250,
										269259
									],
									[
										269432,
										269441
									],
									[
										269600,
										269609
									],
									[
										269781,
										269790
									],
									[
										269971,
										269980
									],
									[
										270156,
										270165
									],
									[
										270342,
										270351
									],
									[
										270524,
										270533
									],
									[
										270715,
										270724
									],
									[
										270901,
										270910
									],
									[
										271073,
										271082
									],
									[
										271252,
										271261
									],
									[
										271475,
										271484
									],
									[
										271612,
										271621
									],
									[
										271708,
										271717
									],
									[
										271915,
										271924
									],
									[
										272051,
										272060
									],
									[
										272309,
										272318
									],
									[
										272592,
										272601
									],
									[
										272867,
										272876
									],
									[
										273108,
										273117
									],
									[
										273309,
										273318
									],
									[
										273385,
										273394
									],
									[
										273515,
										273524
									],
									[
										273589,
										273598
									],
									[
										273843,
										273852
									],
									[
										274126,
										274135
									],
									[
										274401,
										274410
									],
									[
										274642,
										274651
									],
									[
										274843,
										274852
									],
									[
										274919,
										274928
									],
									[
										275089,
										275098
									],
									[
										275155,
										275164
									],
									[
										275376,
										275385
									],
									[
										275605,
										275614
									],
									[
										275830,
										275839
									],
									[
										276052,
										276061
									],
									[
										276108,
										276117
									],
									[
										276287,
										276296
									],
									[
										276326,
										276335
									],
									[
										276387,
										276396
									],
									[
										276449,
										276458
									],
									[
										276511,
										276520
									],
									[
										276573,
										276582
									],
									[
										276635,
										276644
									],
									[
										276701,
										276710
									],
									[
										276768,
										276777
									],
									[
										276836,
										276845
									],
									[
										276905,
										276914
									],
									[
										276974,
										276983
									],
									[
										277043,
										277052
									],
									[
										277112,
										277121
									],
									[
										277182,
										277191
									],
									[
										277255,
										277264
									],
									[
										277330,
										277339
									],
									[
										277405,
										277414
									],
									[
										277485,
										277494
									],
									[
										277566,
										277575
									],
									[
										277646,
										277655
									],
									[
										277744,
										277753
									],
									[
										277842,
										277851
									],
									[
										277883,
										277892
									],
									[
										277946,
										277955
									],
									[
										278008,
										278017
									],
									[
										278073,
										278082
									],
									[
										278139,
										278148
									],
									[
										278232,
										278241
									],
									[
										278326,
										278335
									],
									[
										278420,
										278429
									],
									[
										278514,
										278523
									],
									[
										278610,
										278619
									],
									[
										278704,
										278713
									],
									[
										278800,
										278809
									],
									[
										278894,
										278903
									],
									[
										278984,
										278993
									],
									[
										279077,
										279086
									],
									[
										279178,
										279187
									],
									[
										279332,
										279341
									],
									[
										279371,
										279380
									],
									[
										279440,
										279449
									],
									[
										279512,
										279521
									],
									[
										279586,
										279595
									],
									[
										279661,
										279670
									],
									[
										279736,
										279745
									],
									[
										279814,
										279823
									],
									[
										279891,
										279900
									],
									[
										279967,
										279976
									],
									[
										280045,
										280054
									],
									[
										280138,
										280147
									],
									[
										280229,
										280238
									],
									[
										280321,
										280330
									],
									[
										280420,
										280429
									],
									[
										280572,
										280581
									],
									[
										280611,
										280620
									],
									[
										280657,
										280666
									],
									[
										280743,
										280752
									],
									[
										280830,
										280839
									],
									[
										280915,
										280924
									],
									[
										281000,
										281009
									],
									[
										281085,
										281094
									],
									[
										281136,
										281145
									],
									[
										281188,
										281197
									],
									[
										281240,
										281249
									],
									[
										281351,
										281360
									],
									[
										281390,
										281399
									],
									[
										281437,
										281446
									],
									[
										281528,
										281537
									],
									[
										281622,
										281631
									],
									[
										281716,
										281725
									],
									[
										281809,
										281818
									],
									[
										281902,
										281911
									],
									[
										281953,
										281962
									],
									[
										282004,
										282013
									],
									[
										282051,
										282060
									],
									[
										282110,
										282119
									],
									[
										282171,
										282180
									],
									[
										282233,
										282242
									],
									[
										282293,
										282302
									],
									[
										282352,
										282361
									],
									[
										282470,
										282479
									],
									[
										282519,
										282528
									],
									[
										282567,
										282576
									],
									[
										282638,
										282647
									],
									[
										282710,
										282719
									],
									[
										282782,
										282791
									],
									[
										282854,
										282863
									],
									[
										282925,
										282934
									],
									[
										282992,
										283001
									],
									[
										283119,
										283128
									],
									[
										283158,
										283167
									],
									[
										283251,
										283260
									],
									[
										283345,
										283354
									],
									[
										283439,
										283448
									],
									[
										283533,
										283542
									],
									[
										283572,
										283581
									],
									[
										283620,
										283629
									],
									[
										283678,
										283687
									],
									[
										283727,
										283736
									],
									[
										283779,
										283788
									],
									[
										283832,
										283841
									],
									[
										283885,
										283894
									],
									[
										283937,
										283946
									],
									[
										283985,
										283994
									],
									[
										284030,
										284039
									],
									[
										284134,
										284143
									],
									[
										284173,
										284182
									],
									[
										284209,
										284218
									],
									[
										284253,
										284262
									],
									[
										284322,
										284331
									],
									[
										284392,
										284401
									],
									[
										284462,
										284471
									],
									[
										284531,
										284540
									],
									[
										284600,
										284609
									],
									[
										284671,
										284680
									],
									[
										284742,
										284751
									],
									[
										284813,
										284822
									],
									[
										284884,
										284893
									],
									[
										284955,
										284964
									],
									[
										285026,
										285035
									],
									[
										285096,
										285105
									],
									[
										285165,
										285174
									],
									[
										285234,
										285243
									],
									[
										285305,
										285314
									],
									[
										285377,
										285386
									],
									[
										285442,
										285451
									],
									[
										285495,
										285504
									],
									[
										285588,
										285597
									],
									[
										285684,
										285693
									],
									[
										285838,
										285847
									],
									[
										285867,
										285876
									],
									[
										285926,
										285935
									],
									[
										285987,
										285996
									],
									[
										286049,
										286058
									],
									[
										286112,
										286121
									],
									[
										286176,
										286185
									],
									[
										286243,
										286252
									],
									[
										286311,
										286320
									],
									[
										286380,
										286389
									],
									[
										286450,
										286459
									],
									[
										286521,
										286530
									],
									[
										286593,
										286602
									],
									[
										286666,
										286675
									],
									[
										286740,
										286749
									],
									[
										286813,
										286822
									],
									[
										286887,
										286896
									],
									[
										286962,
										286971
									],
									[
										287020,
										287029
									],
									[
										287079,
										287088
									],
									[
										287169,
										287178
									],
									[
										287259,
										287268
									],
									[
										287409,
										287418
									],
									[
										287438,
										287447
									],
									[
										287490,
										287499
									],
									[
										287544,
										287553
									],
									[
										287605,
										287614
									],
									[
										287662,
										287671
									],
									[
										287718,
										287727
									],
									[
										287777,
										287786
									],
									[
										287837,
										287846
									],
									[
										287895,
										287904
									],
									[
										287954,
										287963
									],
									[
										287999,
										288008
									],
									[
										288089,
										288098
									],
									[
										288179,
										288188
									],
									[
										288376,
										288385
									],
									[
										288537,
										288546
									],
									[
										288690,
										288699
									],
									[
										288852,
										288861
									],
									[
										289014,
										289023
									],
									[
										289176,
										289185
									],
									[
										289338,
										289347
									],
									[
										289531,
										289540
									],
									[
										289627,
										289636
									],
									[
										289682,
										289691
									],
									[
										289813,
										289822
									],
									[
										289942,
										289951
									],
									[
										290000,
										290009
									],
									[
										290137,
										290146
									],
									[
										290266,
										290275
									],
									[
										290324,
										290333
									],
									[
										290461,
										290470
									],
									[
										290590,
										290599
									],
									[
										290648,
										290657
									],
									[
										290785,
										290794
									],
									[
										290914,
										290923
									],
									[
										290972,
										290981
									],
									[
										291109,
										291118
									],
									[
										291238,
										291247
									],
									[
										291296,
										291305
									],
									[
										291433,
										291442
									],
									[
										291562,
										291571
									],
									[
										291620,
										291629
									],
									[
										291757,
										291766
									],
									[
										291886,
										291895
									],
									[
										291944,
										291953
									],
									[
										292081,
										292090
									],
									[
										292210,
										292219
									],
									[
										292268,
										292277
									],
									[
										292405,
										292414
									],
									[
										292534,
										292543
									],
									[
										292592,
										292601
									],
									[
										292729,
										292738
									],
									[
										292858,
										292867
									],
									[
										292916,
										292925
									],
									[
										293053,
										293062
									],
									[
										293182,
										293191
									],
									[
										293240,
										293249
									],
									[
										293377,
										293386
									],
									[
										293506,
										293515
									],
									[
										293564,
										293573
									],
									[
										293701,
										293710
									],
									[
										293830,
										293839
									],
									[
										293888,
										293897
									],
									[
										294025,
										294034
									],
									[
										294154,
										294163
									],
									[
										294212,
										294221
									],
									[
										294339,
										294348
									],
									[
										294509,
										294518
									],
									[
										294565,
										294574
									],
									[
										294739,
										294748
									],
									[
										294795,
										294804
									],
									[
										294969,
										294978
									],
									[
										295025,
										295034
									],
									[
										295198,
										295207
									],
									[
										295254,
										295263
									],
									[
										295427,
										295436
									],
									[
										295483,
										295492
									],
									[
										295656,
										295665
									],
									[
										295712,
										295721
									],
									[
										295885,
										295894
									],
									[
										295941,
										295950
									],
									[
										296117,
										296126
									],
									[
										296173,
										296182
									],
									[
										296349,
										296358
									],
									[
										296405,
										296414
									],
									[
										296582,
										296591
									],
									[
										296638,
										296647
									],
									[
										296815,
										296824
									],
									[
										296871,
										296880
									],
									[
										297045,
										297054
									],
									[
										297101,
										297110
									],
									[
										297289,
										297298
									],
									[
										297510,
										297519
									],
									[
										297566,
										297575
									],
									[
										297623,
										297632
									],
									[
										297680,
										297689
									],
									[
										297737,
										297746
									],
									[
										297794,
										297803
									],
									[
										297851,
										297860
									],
									[
										297908,
										297917
									],
									[
										298092,
										298101
									],
									[
										298293,
										298302
									],
									[
										298580,
										298589
									],
									[
										298651,
										298660
									],
									[
										298744,
										298753
									],
									[
										298773,
										298782
									],
									[
										298802,
										298811
									],
									[
										298885,
										298894
									],
									[
										298941,
										298950
									],
									[
										299016,
										299025
									],
									[
										299045,
										299054
									],
									[
										299172,
										299181
									],
									[
										299376,
										299385
									],
									[
										299476,
										299485
									],
									[
										299739,
										299748
									],
									[
										299970,
										299979
									],
									[
										300215,
										300224
									],
									[
										300446,
										300455
									],
									[
										300645,
										300654
									],
									[
										300873,
										300882
									],
									[
										301115,
										301124
									],
									[
										301464,
										301473
									],
									[
										301492,
										301501
									],
									[
										301528,
										301537
									],
									[
										301653,
										301662
									],
									[
										301750,
										301759
									],
									[
										301898,
										301907
									],
									[
										301946,
										301955
									],
									[
										302131,
										302140
									],
									[
										302310,
										302319
									],
									[
										302503,
										302512
									],
									[
										302686,
										302695
									],
									[
										302819,
										302828
									],
									[
										302937,
										302946
									],
									[
										303037,
										303046
									],
									[
										303226,
										303235
									],
									[
										303396,
										303405
									],
									[
										303432,
										303441
									],
									[
										303510,
										303519
									],
									[
										303714,
										303723
									],
									[
										303761,
										303770
									],
									[
										303905,
										303914
									],
									[
										304106,
										304115
									],
									[
										304312,
										304321
									],
									[
										304394,
										304403
									],
									[
										304597,
										304606
									],
									[
										304679,
										304688
									],
									[
										304852,
										304861
									],
									[
										305065,
										305074
									],
									[
										305147,
										305156
									],
									[
										305311,
										305320
									],
									[
										305506,
										305515
									],
									[
										305588,
										305597
									],
									[
										305752,
										305761
									],
									[
										305947,
										305956
									],
									[
										306029,
										306038
									],
									[
										306193,
										306202
									],
									[
										306345,
										306354
									],
									[
										306529,
										306538
									],
									[
										306702,
										306711
									],
									[
										306860,
										306869
									],
									[
										307067,
										307076
									],
									[
										307254,
										307263
									],
									[
										307412,
										307421
									],
									[
										307619,
										307628
									],
									[
										307807,
										307816
									],
									[
										307893,
										307902
									],
									[
										308033,
										308042
									],
									[
										308212,
										308221
									],
									[
										308389,
										308398
									],
									[
										308561,
										308570
									],
									[
										308705,
										308714
									],
									[
										308838,
										308847
									],
									[
										308971,
										308980
									],
									[
										309127,
										309136
									],
									[
										309280,
										309289
									],
									[
										309467,
										309476
									],
									[
										309622,
										309631
									],
									[
										309817,
										309826
									],
									[
										309886,
										309895
									],
									[
										309965,
										309974
									],
									[
										310012,
										310021
									],
									[
										310043,
										310052
									],
									[
										310362,
										310371
									],
									[
										310573,
										310582
									],
									[
										310783,
										310792
									],
									[
										310993,
										311002
									],
									[
										311193,
										311202
									],
									[
										311407,
										311416
									],
									[
										311625,
										311634
									],
									[
										311843,
										311852
									],
									[
										312047,
										312056
									],
									[
										312265,
										312274
									],
									[
										312492,
										312501
									],
									[
										312726,
										312735
									],
									[
										312934,
										312943
									],
									[
										313156,
										313165
									],
									[
										313392,
										313401
									],
									[
										313635,
										313644
									],
									[
										313844,
										313853
									],
									[
										314057,
										314066
									],
									[
										314269,
										314278
									],
									[
										314488,
										314497
									],
									[
										314697,
										314706
									],
									[
										314913,
										314922
									],
									[
										315133,
										315142
									],
									[
										315360,
										315369
									],
									[
										315573,
										315582
									],
									[
										315793,
										315802
									],
									[
										316022,
										316031
									],
									[
										316258,
										316267
									],
									[
										316475,
										316484
									],
									[
										316699,
										316708
									],
									[
										316937,
										316946
									],
									[
										317175,
										317184
									],
									[
										317374,
										317383
									],
									[
										317587,
										317596
									],
									[
										317799,
										317808
									],
									[
										318018,
										318027
									],
									[
										318227,
										318236
									],
									[
										318443,
										318452
									],
									[
										318663,
										318672
									],
									[
										318890,
										318899
									],
									[
										319103,
										319112
									],
									[
										319323,
										319332
									],
									[
										319552,
										319561
									],
									[
										319788,
										319797
									],
									[
										320005,
										320014
									],
									[
										320229,
										320238
									],
									[
										320467,
										320476
									],
									[
										320705,
										320714
									],
									[
										320907,
										320916
									],
									[
										321126,
										321135
									],
									[
										321344,
										321353
									],
									[
										321569,
										321578
									],
									[
										321784,
										321793
									],
									[
										322006,
										322015
									],
									[
										322232,
										322241
									],
									[
										322465,
										322474
									],
									[
										322684,
										322693
									],
									[
										322910,
										322919
									],
									[
										323145,
										323154
									],
									[
										323387,
										323396
									],
									[
										323610,
										323619
									],
									[
										323840,
										323849
									],
									[
										324084,
										324093
									],
									[
										324328,
										324337
									],
									[
										324533,
										324542
									],
									[
										324752,
										324761
									],
									[
										324970,
										324979
									],
									[
										325195,
										325204
									],
									[
										325410,
										325419
									],
									[
										325632,
										325641
									],
									[
										325858,
										325867
									],
									[
										326091,
										326100
									],
									[
										326310,
										326319
									],
									[
										326536,
										326545
									],
									[
										326771,
										326780
									],
									[
										327013,
										327022
									],
									[
										327236,
										327245
									],
									[
										327466,
										327475
									],
									[
										327710,
										327719
									],
									[
										327954,
										327963
									],
									[
										328151,
										328160
									],
									[
										328357,
										328366
									],
									[
										328563,
										328572
									],
									[
										328772,
										328781
									],
									[
										328981,
										328990
									],
									[
										329191,
										329200
									],
									[
										329401,
										329410
									],
									[
										329613,
										329622
									],
									[
										329825,
										329834
									],
									[
										330040,
										330049
									],
									[
										330255,
										330264
									],
									[
										330471,
										330480
									],
									[
										330678,
										330687
									],
									[
										330887,
										330896
									],
									[
										331096,
										331105
									],
									[
										331308,
										331317
									],
									[
										331520,
										331529
									],
									[
										331733,
										331742
									],
									[
										331951,
										331960
									],
									[
										332171,
										332180
									],
									[
										332391,
										332400
									],
									[
										332614,
										332623
									],
									[
										332837,
										332846
									],
									[
										333061,
										333070
									],
									[
										333272,
										333281
									],
									[
										333485,
										333494
									],
									[
										333698,
										333707
									],
									[
										333914,
										333923
									],
									[
										334130,
										334139
									],
									[
										334347,
										334356
									],
									[
										334574,
										334583
									],
									[
										334803,
										334812
									],
									[
										335032,
										335041
									],
									[
										335264,
										335273
									],
									[
										335496,
										335505
									],
									[
										335729,
										335738
									],
									[
										335944,
										335953
									],
									[
										336161,
										336170
									],
									[
										336378,
										336387
									],
									[
										336598,
										336607
									],
									[
										336818,
										336827
									],
									[
										337039,
										337048
									],
									[
										337275,
										337284
									],
									[
										337513,
										337522
									],
									[
										337751,
										337760
									],
									[
										337992,
										338001
									],
									[
										338233,
										338242
									],
									[
										338475,
										338484
									],
									[
										338668,
										338677
									],
									[
										338875,
										338884
									],
									[
										339080,
										339089
									],
									[
										339289,
										339298
									],
									[
										339491,
										339500
									],
									[
										339700,
										339709
									],
									[
										339905,
										339914
									],
									[
										340120,
										340129
									],
									[
										340328,
										340337
									],
									[
										340543,
										340552
									],
									[
										340743,
										340752
									],
									[
										340945,
										340954
									],
									[
										341147,
										341156
									],
									[
										341352,
										341361
									],
									[
										341557,
										341566
									],
									[
										341763,
										341772
									],
									[
										341973,
										341982
									],
									[
										342190,
										342199
									],
									[
										342405,
										342414
									],
									[
										342624,
										342633
									],
									[
										342836,
										342845
									],
									[
										343055,
										343064
									],
									[
										343270,
										343279
									],
									[
										343495,
										343504
									],
									[
										343713,
										343722
									],
									[
										343938,
										343947
									],
									[
										344148,
										344157
									],
									[
										344354,
										344363
									],
									[
										344560,
										344569
									],
									[
										344769,
										344778
									],
									[
										344979,
										344988
									],
									[
										345195,
										345204
									],
									[
										345415,
										345424
									],
									[
										345642,
										345651
									],
									[
										345867,
										345876
									],
									[
										346096,
										346105
									],
									[
										346318,
										346327
									],
									[
										346547,
										346556
									],
									[
										346772,
										346781
									],
									[
										347007,
										347016
									],
									[
										347235,
										347244
									],
									[
										347470,
										347479
									],
									[
										347691,
										347700
									],
									[
										347915,
										347924
									],
									[
										348139,
										348148
									],
									[
										348366,
										348375
									],
									[
										348593,
										348602
									],
									[
										348821,
										348830
									],
									[
										349051,
										349060
									],
									[
										349288,
										349297
									],
									[
										349523,
										349532
									],
									[
										349762,
										349771
									],
									[
										349994,
										350003
									],
									[
										350233,
										350242
									],
									[
										350468,
										350477
									],
									[
										350713,
										350722
									],
									[
										350951,
										350960
									],
									[
										351196,
										351205
									],
									[
										351426,
										351435
									],
									[
										351659,
										351668
									],
									[
										351892,
										351901
									],
									[
										352127,
										352136
									],
									[
										352362,
										352371
									],
									[
										352598,
										352607
									],
									[
										352866,
										352875
									],
									[
										353044,
										353053
									],
									[
										353325,
										353334
									],
									[
										353589,
										353598
									],
									[
										353862,
										353871
									],
									[
										354066,
										354075
									],
									[
										354344,
										354353
									],
									[
										354605,
										354614
									],
									[
										354875,
										354884
									],
									[
										355111,
										355120
									],
									[
										355139,
										355148
									],
									[
										355309,
										355318
									],
									[
										355511,
										355520
									],
									[
										355685,
										355694
									],
									[
										355885,
										355894
									],
									[
										355969,
										355978
									],
									[
										356188,
										356197
									],
									[
										356336,
										356345
									],
									[
										356584,
										356593
									],
									[
										356779,
										356788
									],
									[
										356835,
										356844
									],
									[
										357009,
										357018
									],
									[
										357074,
										357083
									],
									[
										357233,
										357242
									],
									[
										357298,
										357307
									],
									[
										357457,
										357466
									],
									[
										357522,
										357531
									],
									[
										357681,
										357690
									],
									[
										357746,
										357755
									],
									[
										357905,
										357914
									],
									[
										357970,
										357979
									],
									[
										358129,
										358138
									],
									[
										358194,
										358203
									],
									[
										358353,
										358362
									],
									[
										358418,
										358427
									],
									[
										358577,
										358586
									],
									[
										358642,
										358651
									],
									[
										358777,
										358786
									],
									[
										358836,
										358845
									],
									[
										359009,
										359018
									],
									[
										359172,
										359181
									],
									[
										359335,
										359344
									],
									[
										359498,
										359507
									],
									[
										359661,
										359670
									],
									[
										359824,
										359833
									],
									[
										359987,
										359996
									],
									[
										360159,
										360168
									],
									[
										360348,
										360357
									],
									[
										360534,
										360543
									],
									[
										360732,
										360741
									],
									[
										360870,
										360879
									],
									[
										361047,
										361056
									],
									[
										361196,
										361205
									],
									[
										361258,
										361267
									],
									[
										361404,
										361413
									],
									[
										361562,
										361571
									],
									[
										361712,
										361721
									],
									[
										361777,
										361786
									],
									[
										361829,
										361838
									],
									[
										361976,
										361985
									],
									[
										362041,
										362050
									],
									[
										362205,
										362214
									],
									[
										362352,
										362361
									],
									[
										362417,
										362426
									],
									[
										362469,
										362478
									],
									[
										362616,
										362625
									],
									[
										362681,
										362690
									],
									[
										362845,
										362854
									],
									[
										362992,
										363001
									],
									[
										363057,
										363066
									],
									[
										363109,
										363118
									],
									[
										363256,
										363265
									],
									[
										363321,
										363330
									],
									[
										363485,
										363494
									],
									[
										363632,
										363641
									],
									[
										363697,
										363706
									],
									[
										363749,
										363758
									],
									[
										363896,
										363905
									],
									[
										363961,
										363970
									],
									[
										364125,
										364134
									],
									[
										364272,
										364281
									],
									[
										364337,
										364346
									],
									[
										364389,
										364398
									],
									[
										364536,
										364545
									],
									[
										364601,
										364610
									],
									[
										364765,
										364774
									],
									[
										364912,
										364921
									],
									[
										364977,
										364986
									],
									[
										365029,
										365038
									],
									[
										365176,
										365185
									],
									[
										365241,
										365250
									],
									[
										365400,
										365409
									],
									[
										365465,
										365474
									],
									[
										365629,
										365638
									],
									[
										365776,
										365785
									],
									[
										365841,
										365850
									],
									[
										365893,
										365902
									],
									[
										366040,
										366049
									],
									[
										366105,
										366114
									],
									[
										366252,
										366261
									],
									[
										366391,
										366400
									],
									[
										366530,
										366539
									],
									[
										366669,
										366678
									],
									[
										366808,
										366817
									],
									[
										366947,
										366956
									],
									[
										367086,
										367095
									],
									[
										367300,
										367309
									],
									[
										367483,
										367492
									],
									[
										367646,
										367655
									],
									[
										367839,
										367848
									],
									[
										368020,
										368029
									],
									[
										368201,
										368210
									],
									[
										368382,
										368391
									],
									[
										368563,
										368572
									],
									[
										368746,
										368755
									],
									[
										368929,
										368938
									],
									[
										369171,
										369180
									],
									[
										369333,
										369342
									],
									[
										369516,
										369525
									],
									[
										369581,
										369590
									],
									[
										369734,
										369743
									],
									[
										369799,
										369808
									],
									[
										369921,
										369930
									],
									[
										369997,
										370006
									],
									[
										370053,
										370062
									],
									[
										370102,
										370111
									],
									[
										370265,
										370274
									],
									[
										370465,
										370474
									],
									[
										370686,
										370695
									],
									[
										370907,
										370916
									],
									[
										371128,
										371137
									],
									[
										371349,
										371358
									],
									[
										371572,
										371581
									],
									[
										371795,
										371804
									],
									[
										372028,
										372037
									],
									[
										372214,
										372223
									],
									[
										372451,
										372460
									],
									[
										372544,
										372553
									],
									[
										372732,
										372741
									],
									[
										372938,
										372947
									],
									[
										373167,
										373176
									],
									[
										373396,
										373405
									],
									[
										373625,
										373634
									],
									[
										373854,
										373863
									],
									[
										374083,
										374092
									],
									[
										374312,
										374321
									],
									[
										374541,
										374550
									],
									[
										374787,
										374796
									],
									[
										375033,
										375042
									],
									[
										375279,
										375288
									],
									[
										375525,
										375534
									],
									[
										375771,
										375780
									],
									[
										376017,
										376026
									],
									[
										376263,
										376272
									],
									[
										376514,
										376523
									],
									[
										376771,
										376780
									],
									[
										377028,
										377037
									],
									[
										377284,
										377293
									],
									[
										377541,
										377550
									],
									[
										377798,
										377807
									],
									[
										378055,
										378064
									],
									[
										378223,
										378232
									],
									[
										378487,
										378496
									],
									[
										378751,
										378760
									],
									[
										379015,
										379024
									],
									[
										379279,
										379288
									],
									[
										379543,
										379552
									],
									[
										379807,
										379816
									],
									[
										380071,
										380080
									],
									[
										380353,
										380362
									],
									[
										380635,
										380644
									],
									[
										380917,
										380926
									],
									[
										381199,
										381208
									],
									[
										381481,
										381490
									],
									[
										381763,
										381772
									],
									[
										382045,
										382054
									],
									[
										382247,
										382256
									],
									[
										382446,
										382455
									],
									[
										382645,
										382654
									],
									[
										382844,
										382853
									],
									[
										383043,
										383052
									],
									[
										383208,
										383217
									],
									[
										383356,
										383365
									],
									[
										383530,
										383539
									],
									[
										383594,
										383603
									],
									[
										383708,
										383717
									],
									[
										383772,
										383781
									],
									[
										383926,
										383935
									],
									[
										383990,
										383999
									],
									[
										384104,
										384113
									],
									[
										384168,
										384177
									],
									[
										384362,
										384371
									],
									[
										384557,
										384566
									],
									[
										384731,
										384740
									],
									[
										384922,
										384931
									],
									[
										385085,
										385094
									],
									[
										385278,
										385287
									],
									[
										385472,
										385481
									],
									[
										385660,
										385669
									],
									[
										385897,
										385906
									],
									[
										386035,
										386044
									],
									[
										386208,
										386217
									],
									[
										386346,
										386355
									],
									[
										386527,
										386536
									],
									[
										386749,
										386758
									],
									[
										386887,
										386896
									],
									[
										387059,
										387068
									],
									[
										387197,
										387206
									],
									[
										387377,
										387386
									],
									[
										387598,
										387607
									],
									[
										387736,
										387745
									],
									[
										387908,
										387917
									],
									[
										388046,
										388055
									],
									[
										388226,
										388235
									],
									[
										388456,
										388465
									],
									[
										388594,
										388603
									],
									[
										388775,
										388784
									],
									[
										388913,
										388922
									],
									[
										389102,
										389111
									],
									[
										389341,
										389350
									],
									[
										389479,
										389488
									],
									[
										389660,
										389669
									],
									[
										389798,
										389807
									],
									[
										389987,
										389996
									],
									[
										390218,
										390227
									],
									[
										390356,
										390365
									],
									[
										390529,
										390538
									],
									[
										390667,
										390676
									],
									[
										390848,
										390857
									],
									[
										391103,
										391112
									],
									[
										391241,
										391250
									],
									[
										391475,
										391484
									],
									[
										391613,
										391622
									],
									[
										391816,
										391825
									],
									[
										392087,
										392096
									],
									[
										392298,
										392307
									],
									[
										392524,
										392533
									],
									[
										392552,
										392561
									],
									[
										392588,
										392597
									],
									[
										392631,
										392640
									],
									[
										393022,
										393031
									],
									[
										393103,
										393112
									],
									[
										393174,
										393183
									],
									[
										393502,
										393511
									],
									[
										393594,
										393603
									],
									[
										393655,
										393664
									],
									[
										393716,
										393725
									],
									[
										393777,
										393786
									],
									[
										393838,
										393847
									],
									[
										393899,
										393908
									],
									[
										393960,
										393969
									],
									[
										394104,
										394113
									],
									[
										394198,
										394207
									],
									[
										394227,
										394236
									],
									[
										394365,
										394374
									],
									[
										394632,
										394641
									],
									[
										394800,
										394809
									],
									[
										394968,
										394977
									],
									[
										395136,
										395145
									],
									[
										395304,
										395313
									],
									[
										395472,
										395481
									],
									[
										395640,
										395649
									],
									[
										395808,
										395817
									],
									[
										395976,
										395985
									],
									[
										396150,
										396159
									],
									[
										396365,
										396374
									],
									[
										396577,
										396586
									],
									[
										396787,
										396796
									],
									[
										397002,
										397011
									],
									[
										397249,
										397258
									],
									[
										397319,
										397328
									],
									[
										397421,
										397430
									],
									[
										397646,
										397655
									],
									[
										397716,
										397725
									],
									[
										397818,
										397827
									],
									[
										398017,
										398026
									],
									[
										398201,
										398210
									],
									[
										398392,
										398401
									],
									[
										398477,
										398486
									],
									[
										398628,
										398637
									],
									[
										398713,
										398722
									],
									[
										398856,
										398865
									],
									[
										398941,
										398950
									],
									[
										399159,
										399168
									],
									[
										399244,
										399253
									],
									[
										399395,
										399404
									],
									[
										399480,
										399489
									],
									[
										399614,
										399623
									],
									[
										399699,
										399708
									],
									[
										399920,
										399929
									],
									[
										400005,
										400014
									],
									[
										400087,
										400096
									],
									[
										400131,
										400140
									],
									[
										400175,
										400184
									],
									[
										400219,
										400228
									],
									[
										400368,
										400377
									],
									[
										400453,
										400462
									],
									[
										400545,
										400554
									],
									[
										400589,
										400598
									],
									[
										400633,
										400642
									],
									[
										400677,
										400686
									],
									[
										400721,
										400730
									],
									[
										400864,
										400873
									],
									[
										400949,
										400958
									],
									[
										401027,
										401036
									],
									[
										401071,
										401080
									],
									[
										401115,
										401124
									],
									[
										401275,
										401284
									],
									[
										401343,
										401352
									],
									[
										401525,
										401534
									],
									[
										401593,
										401602
									],
									[
										401775,
										401784
									],
									[
										401843,
										401852
									],
									[
										402025,
										402034
									],
									[
										402093,
										402102
									],
									[
										402275,
										402284
									],
									[
										402343,
										402352
									],
									[
										402525,
										402534
									],
									[
										402593,
										402602
									],
									[
										402775,
										402784
									],
									[
										402843,
										402852
									],
									[
										403025,
										403034
									],
									[
										403093,
										403102
									],
									[
										403235,
										403244
									],
									[
										403303,
										403312
									],
									[
										403503,
										403512
									],
									[
										403571,
										403580
									],
									[
										403816,
										403825
									],
									[
										403860,
										403869
									],
									[
										404030,
										404039
									],
									[
										404198,
										404207
									],
									[
										404359,
										404368
									],
									[
										404501,
										404510
									],
									[
										404665,
										404674
									],
									[
										404744,
										404753
									],
									[
										404912,
										404921
									],
									[
										404999,
										405008
									],
									[
										405143,
										405152
									],
									[
										405206,
										405215
									],
									[
										405256,
										405265
									],
									[
										405398,
										405407
									],
									[
										405540,
										405549
									],
									[
										405704,
										405713
									],
									[
										405783,
										405792
									],
									[
										405951,
										405960
									],
									[
										406038,
										406047
									],
									[
										406182,
										406191
									],
									[
										406245,
										406254
									],
									[
										406295,
										406304
									],
									[
										406437,
										406446
									],
									[
										406579,
										406588
									],
									[
										406743,
										406752
									],
									[
										406822,
										406831
									],
									[
										406990,
										406999
									],
									[
										407077,
										407086
									],
									[
										407221,
										407230
									],
									[
										407284,
										407293
									],
									[
										407334,
										407343
									],
									[
										407476,
										407485
									],
									[
										407618,
										407627
									],
									[
										407782,
										407791
									],
									[
										407861,
										407870
									],
									[
										408029,
										408038
									],
									[
										408116,
										408125
									],
									[
										408260,
										408269
									],
									[
										408323,
										408332
									],
									[
										408373,
										408382
									],
									[
										408515,
										408524
									],
									[
										408657,
										408666
									],
									[
										408821,
										408830
									],
									[
										408900,
										408909
									],
									[
										409068,
										409077
									],
									[
										409155,
										409164
									],
									[
										409299,
										409308
									],
									[
										409362,
										409371
									],
									[
										409412,
										409421
									],
									[
										409554,
										409563
									],
									[
										409696,
										409705
									],
									[
										409860,
										409869
									],
									[
										409939,
										409948
									],
									[
										410107,
										410116
									],
									[
										410194,
										410203
									],
									[
										410338,
										410347
									],
									[
										410401,
										410410
									],
									[
										410451,
										410460
									],
									[
										410597,
										410606
									],
									[
										410707,
										410716
									],
									[
										410761,
										410770
									],
									[
										410925,
										410934
									],
									[
										411093,
										411102
									],
									[
										411254,
										411263
									],
									[
										411401,
										411410
									],
									[
										411570,
										411579
									],
									[
										411649,
										411658
									],
									[
										411822,
										411831
									],
									[
										411909,
										411918
									],
									[
										412058,
										412067
									],
									[
										412121,
										412130
									],
									[
										412176,
										412185
									],
									[
										412318,
										412327
									],
									[
										412465,
										412474
									],
									[
										412634,
										412643
									],
									[
										412713,
										412722
									],
									[
										412886,
										412895
									],
									[
										412973,
										412982
									],
									[
										413122,
										413131
									],
									[
										413185,
										413194
									],
									[
										413240,
										413249
									],
									[
										413382,
										413391
									],
									[
										413529,
										413538
									],
									[
										413698,
										413707
									],
									[
										413777,
										413786
									],
									[
										413950,
										413959
									],
									[
										414037,
										414046
									],
									[
										414186,
										414195
									],
									[
										414249,
										414258
									],
									[
										414304,
										414313
									],
									[
										414446,
										414455
									],
									[
										414593,
										414602
									],
									[
										414762,
										414771
									],
									[
										414841,
										414850
									],
									[
										415014,
										415023
									],
									[
										415101,
										415110
									],
									[
										415250,
										415259
									],
									[
										415313,
										415322
									],
									[
										415368,
										415377
									],
									[
										415510,
										415519
									],
									[
										415657,
										415666
									],
									[
										415826,
										415835
									],
									[
										415905,
										415914
									],
									[
										416078,
										416087
									],
									[
										416165,
										416174
									],
									[
										416314,
										416323
									],
									[
										416377,
										416386
									],
									[
										416432,
										416441
									],
									[
										416574,
										416583
									],
									[
										416716,
										416725
									],
									[
										416880,
										416889
									],
									[
										416959,
										416968
									],
									[
										417127,
										417136
									],
									[
										417214,
										417223
									],
									[
										417358,
										417367
									],
									[
										417421,
										417430
									],
									[
										417471,
										417480
									],
									[
										417617,
										417626
									],
									[
										417765,
										417774
									],
									[
										417944,
										417953
									],
									[
										418125,
										418134
									],
									[
										418188,
										418197
									],
									[
										418258,
										418267
									],
									[
										418354,
										418363
									],
									[
										418426,
										418435
									],
									[
										418484,
										418493
									],
									[
										418542,
										418551
									],
									[
										418638,
										418647
									],
									[
										418701,
										418710
									],
									[
										418771,
										418780
									],
									[
										418867,
										418876
									],
									[
										418939,
										418948
									],
									[
										418997,
										419006
									],
									[
										419055,
										419064
									],
									[
										419201,
										419210
									],
									[
										419263,
										419272
									],
									[
										419332,
										419341
									],
									[
										419427,
										419436
									],
									[
										419498,
										419507
									],
									[
										419555,
										419564
									],
									[
										419612,
										419621
									],
									[
										419705,
										419714
									],
									[
										419767,
										419776
									],
									[
										419836,
										419845
									],
									[
										419931,
										419940
									],
									[
										420002,
										420011
									],
									[
										420059,
										420068
									],
									[
										420116,
										420125
									],
									[
										420309,
										420318
									],
									[
										420358,
										420367
									],
									[
										420407,
										420416
									],
									[
										420472,
										420481
									],
									[
										420589,
										420598
									],
									[
										420691,
										420700
									],
									[
										420793,
										420802
									],
									[
										420850,
										420859
									],
									[
										420886,
										420895
									],
									[
										420954,
										420963
									],
									[
										421034,
										421043
									],
									[
										421076,
										421085
									],
									[
										421126,
										421135
									],
									[
										421286,
										421295
									],
									[
										421500,
										421509
									],
									[
										421731,
										421740
									],
									[
										421946,
										421955
									],
									[
										422150,
										422159
									],
									[
										422367,
										422376
									],
									[
										422570,
										422579
									],
									[
										422787,
										422796
									],
									[
										423037,
										423046
									],
									[
										423314,
										423323
									],
									[
										423616,
										423625
									],
									[
										423843,
										423852
									],
									[
										424065,
										424074
									],
									[
										424315,
										424324
									],
									[
										424592,
										424601
									],
									[
										424894,
										424903
									],
									[
										425121,
										425130
									],
									[
										425343,
										425352
									],
									[
										425593,
										425602
									],
									[
										425870,
										425879
									],
									[
										426172,
										426181
									],
									[
										426399,
										426408
									],
									[
										426621,
										426630
									],
									[
										426871,
										426880
									],
									[
										427148,
										427157
									],
									[
										427450,
										427459
									],
									[
										427677,
										427686
									],
									[
										427899,
										427908
									],
									[
										427997,
										428006
									],
									[
										428202,
										428211
									],
									[
										428300,
										428309
									],
									[
										428370,
										428379
									],
									[
										428632,
										428641
									],
									[
										428934,
										428943
									],
									[
										429161,
										429170
									],
									[
										429383,
										429392
									],
									[
										429633,
										429642
									],
									[
										429910,
										429919
									],
									[
										430212,
										430221
									],
									[
										430439,
										430448
									],
									[
										430661,
										430670
									],
									[
										430911,
										430920
									],
									[
										431188,
										431197
									],
									[
										431490,
										431499
									],
									[
										431717,
										431726
									],
									[
										431918,
										431927
									],
									[
										432076,
										432085
									],
									[
										432244,
										432253
									],
									[
										432436,
										432445
									],
									[
										432650,
										432659
									],
									[
										432910,
										432919
									],
									[
										433201,
										433210
									],
									[
										433502,
										433511
									],
									[
										433738,
										433747
									],
									[
										433968,
										433977
									],
									[
										434228,
										434237
									],
									[
										434519,
										434528
									],
									[
										434820,
										434829
									],
									[
										435056,
										435065
									],
									[
										435286,
										435295
									],
									[
										435546,
										435555
									],
									[
										435837,
										435846
									],
									[
										436138,
										436147
									],
									[
										436374,
										436383
									],
									[
										436604,
										436613
									],
									[
										436864,
										436873
									],
									[
										437155,
										437164
									],
									[
										437456,
										437465
									],
									[
										437692,
										437701
									],
									[
										437922,
										437931
									],
									[
										438182,
										438191
									],
									[
										438473,
										438482
									],
									[
										438774,
										438783
									],
									[
										439010,
										439019
									],
									[
										439240,
										439249
									],
									[
										439500,
										439509
									],
									[
										439791,
										439800
									],
									[
										440092,
										440101
									],
									[
										440328,
										440337
									],
									[
										440558,
										440567
									],
									[
										440818,
										440827
									],
									[
										441109,
										441118
									],
									[
										441410,
										441419
									],
									[
										441646,
										441655
									],
									[
										441874,
										441883
									],
									[
										442035,
										442044
									],
									[
										442253,
										442262
									],
									[
										442449,
										442458
									],
									[
										442665,
										442674
									],
									[
										442869,
										442878
									],
									[
										443066,
										443075
									],
									[
										443145,
										443154
									],
									[
										443214,
										443223
									],
									[
										443380,
										443389
									],
									[
										443559,
										443568
									],
									[
										443738,
										443747
									],
									[
										443917,
										443926
									],
									[
										444096,
										444105
									],
									[
										444275,
										444284
									],
									[
										444454,
										444463
									],
									[
										444633,
										444642
									],
									[
										444812,
										444821
									],
									[
										444991,
										445000
									],
									[
										445170,
										445179
									],
									[
										445349,
										445358
									],
									[
										445553,
										445562
									],
									[
										445732,
										445741
									],
									[
										445811,
										445820
									],
									[
										445974,
										445983
									],
									[
										446150,
										446159
									],
									[
										446326,
										446335
									],
									[
										446502,
										446511
									],
									[
										446681,
										446690
									],
									[
										446860,
										446869
									],
									[
										447039,
										447048
									],
									[
										447218,
										447227
									],
									[
										447397,
										447406
									],
									[
										447576,
										447585
									],
									[
										447755,
										447764
									],
									[
										447934,
										447943
									],
									[
										448113,
										448122
									],
									[
										448292,
										448301
									],
									[
										448471,
										448480
									],
									[
										448650,
										448659
									],
									[
										448829,
										448838
									],
									[
										449008,
										449017
									],
									[
										449187,
										449196
									],
									[
										449366,
										449375
									],
									[
										449549,
										449558
									],
									[
										449745,
										449754
									],
									[
										449943,
										449952
									],
									[
										450141,
										450150
									],
									[
										450339,
										450348
									],
									[
										450537,
										450546
									],
									[
										450720,
										450729
									],
									[
										450899,
										450908
									],
									[
										451078,
										451087
									],
									[
										451257,
										451266
									],
									[
										451436,
										451445
									],
									[
										451634,
										451643
									],
									[
										451901,
										451910
									],
									[
										452159,
										452168
									],
									[
										452435,
										452444
									],
									[
										452654,
										452663
									],
									[
										452882,
										452891
									],
									[
										453110,
										453119
									],
									[
										453338,
										453347
									],
									[
										453565,
										453574
									],
									[
										453810,
										453819
									],
									[
										453884,
										453893
									],
									[
										453971,
										453980
									],
									[
										454183,
										454192
									],
									[
										454450,
										454459
									],
									[
										454708,
										454717
									],
									[
										454984,
										454993
									],
									[
										455203,
										455212
									],
									[
										455431,
										455440
									],
									[
										455659,
										455668
									],
									[
										455887,
										455896
									],
									[
										456114,
										456123
									],
									[
										456359,
										456368
									],
									[
										456433,
										456442
									],
									[
										456520,
										456529
									],
									[
										456732,
										456741
									],
									[
										456999,
										457008
									],
									[
										457257,
										457266
									],
									[
										457533,
										457542
									],
									[
										457752,
										457761
									],
									[
										457980,
										457989
									],
									[
										458208,
										458217
									],
									[
										458436,
										458445
									],
									[
										458663,
										458672
									],
									[
										458908,
										458917
									],
									[
										458982,
										458991
									],
									[
										459069,
										459078
									],
									[
										459281,
										459290
									],
									[
										459548,
										459557
									],
									[
										459806,
										459815
									],
									[
										460082,
										460091
									],
									[
										460301,
										460310
									],
									[
										460529,
										460538
									],
									[
										460757,
										460766
									],
									[
										460988,
										460997
									],
									[
										461221,
										461230
									],
									[
										461477,
										461486
									],
									[
										461609,
										461618
									],
									[
										461765,
										461774
									],
									[
										461961,
										461970
									],
									[
										462093,
										462102
									],
									[
										462249,
										462258
									],
									[
										462431,
										462440
									],
									[
										462592,
										462601
									],
									[
										462787,
										462796
									],
									[
										462967,
										462976
									],
									[
										463191,
										463200
									],
									[
										463242,
										463251
									],
									[
										463342,
										463351
									],
									[
										463530,
										463539
									],
									[
										463581,
										463590
									],
									[
										463679,
										463688
									],
									[
										463839,
										463848
									],
									[
										464039,
										464048
									],
									[
										464239,
										464248
									],
									[
										464439,
										464448
									],
									[
										464613,
										464622
									],
									[
										464818,
										464827
									],
									[
										464990,
										464999
									],
									[
										465204,
										465213
									],
									[
										465383,
										465392
									],
									[
										465602,
										465611
									],
									[
										465796,
										465805
									],
									[
										465856,
										465865
									],
									[
										465975,
										465984
									],
									[
										466035,
										466044
									],
									[
										466202,
										466211
									],
									[
										466413,
										466422
									],
									[
										466474,
										466483
									],
									[
										466597,
										466606
									],
									[
										466685,
										466694
									],
									[
										466821,
										466830
									],
									[
										467041,
										467050
									],
									[
										467215,
										467224
									],
									[
										467420,
										467429
									],
									[
										467621,
										467630
									],
									[
										467822,
										467831
									],
									[
										468001,
										468010
									],
									[
										468209,
										468218
									],
									[
										468388,
										468397
									],
									[
										468601,
										468610
									],
									[
										468806,
										468815
									],
									[
										468985,
										468994
									],
									[
										469193,
										469202
									],
									[
										469372,
										469381
									],
									[
										469588,
										469597
									],
									[
										469783,
										469792
									],
									[
										469964,
										469973
									],
									[
										470026,
										470035
									],
									[
										470138,
										470147
									],
									[
										470222,
										470231
									],
									[
										470392,
										470401
									],
									[
										470609,
										470618
									],
									[
										470785,
										470794
									],
									[
										470979,
										470988
									],
									[
										471201,
										471210
									],
									[
										471417,
										471426
									],
									[
										471485,
										471494
									],
									[
										471601,
										471610
									],
									[
										471691,
										471700
									],
									[
										471863,
										471872
									],
									[
										472082,
										472091
									],
									[
										472298,
										472307
									],
									[
										472475,
										472484
									],
									[
										472698,
										472707
									],
									[
										472875,
										472884
									],
									[
										473103,
										473112
									],
									[
										473280,
										473289
									],
									[
										473516,
										473525
									],
									[
										473693,
										473702
									],
									[
										473902,
										473911
									],
									[
										474009,
										474018
									],
									[
										474094,
										474103
									],
									[
										474320,
										474329
									],
									[
										474497,
										474506
									],
									[
										474725,
										474734
									],
									[
										474902,
										474911
									],
									[
										475114,
										475123
									],
									[
										475291,
										475300
									],
									[
										475519,
										475528
									],
									[
										475696,
										475705
									],
									[
										475914,
										475923
									],
									[
										476091,
										476100
									],
									[
										476319,
										476328
									],
									[
										476496,
										476505
									],
									[
										476705,
										476714
									],
									[
										476882,
										476891
									],
									[
										477110,
										477119
									],
									[
										477287,
										477296
									],
									[
										477505,
										477514
									],
									[
										477682,
										477691
									],
									[
										477910,
										477919
									],
									[
										478087,
										478096
									],
									[
										478296,
										478305
									],
									[
										478473,
										478482
									],
									[
										478717,
										478726
									],
									[
										478894,
										478903
									],
									[
										479122,
										479131
									],
									[
										479298,
										479307
									],
									[
										479523,
										479532
									],
									[
										479651,
										479660
									],
									[
										479841,
										479850
									],
									[
										479916,
										479925
									],
									[
										479991,
										480000
									],
									[
										480184,
										480193
									],
									[
										480360,
										480369
									],
									[
										480563,
										480572
									],
									[
										480638,
										480647
									],
									[
										480711,
										480720
									],
									[
										480902,
										480911
									],
									[
										481077,
										481086
									],
									[
										481280,
										481289
									],
									[
										481355,
										481364
									],
									[
										481428,
										481437
									],
									[
										481623,
										481632
									],
									[
										481799,
										481808
									],
									[
										482024,
										482033
									],
									[
										482152,
										482161
									],
									[
										482342,
										482351
									],
									[
										482417,
										482426
									],
									[
										482488,
										482497
									],
									[
										482681,
										482690
									],
									[
										482857,
										482866
									],
									[
										483051,
										483060
									],
									[
										483179,
										483188
									],
									[
										483324,
										483333
									],
									[
										483399,
										483408
									],
									[
										483468,
										483477
									],
									[
										483662,
										483671
									],
									[
										483837,
										483846
									],
									[
										484031,
										484040
									],
									[
										484159,
										484168
									],
									[
										484304,
										484313
									],
									[
										484379,
										484388
									],
									[
										484448,
										484457
									],
									[
										484656,
										484665
									],
									[
										484849,
										484858
									],
									[
										484977,
										484986
									],
									[
										485128,
										485137
									],
									[
										485295,
										485304
									],
									[
										485515,
										485524
									],
									[
										485724,
										485733
									],
									[
										485889,
										485898
									],
									[
										486111,
										486120
									],
									[
										486320,
										486329
									],
									[
										486485,
										486494
									],
									[
										486707,
										486716
									],
									[
										486902,
										486911
									],
									[
										487030,
										487039
									],
									[
										487181,
										487190
									],
									[
										487346,
										487355
									],
									[
										487545,
										487554
									],
									[
										487759,
										487768
									],
									[
										487975,
										487984
									],
									[
										488146,
										488155
									],
									[
										488232,
										488241
									],
									[
										488419,
										488428
									],
									[
										488504,
										488513
									],
									[
										488638,
										488647
									],
									[
										488811,
										488820
									],
									[
										489009,
										489018
									],
									[
										489094,
										489103
									],
									[
										489228,
										489237
									],
									[
										489401,
										489410
									],
									[
										489614,
										489623
									],
									[
										489699,
										489708
									],
									[
										489838,
										489847
									],
									[
										490016,
										490025
									],
									[
										490229,
										490238
									],
									[
										490314,
										490323
									],
									[
										490453,
										490462
									],
									[
										490631,
										490640
									],
									[
										490829,
										490838
									],
									[
										490914,
										490923
									],
									[
										491048,
										491057
									],
									[
										491221,
										491230
									],
									[
										491419,
										491428
									],
									[
										491504,
										491513
									],
									[
										491638,
										491647
									],
									[
										491811,
										491820
									],
									[
										492003,
										492012
									],
									[
										492088,
										492097
									],
									[
										492227,
										492236
									],
									[
										492405,
										492414
									],
									[
										492597,
										492606
									],
									[
										492682,
										492691
									],
									[
										492821,
										492830
									],
									[
										492999,
										493008
									],
									[
										493197,
										493206
									],
									[
										493282,
										493291
									],
									[
										493416,
										493425
									],
									[
										493589,
										493598
									],
									[
										493787,
										493796
									],
									[
										493872,
										493881
									],
									[
										494006,
										494015
									],
									[
										494179,
										494188
									],
									[
										494387,
										494396
									],
									[
										494472,
										494481
									],
									[
										494611,
										494620
									],
									[
										494789,
										494798
									],
									[
										494997,
										495006
									],
									[
										495082,
										495091
									],
									[
										495221,
										495230
									],
									[
										495399,
										495408
									],
									[
										495616,
										495625
									],
									[
										495758,
										495767
									],
									[
										495904,
										495913
									],
									[
										496114,
										496123
									],
									[
										496256,
										496265
									],
									[
										496402,
										496411
									],
									[
										496612,
										496621
									],
									[
										496754,
										496763
									],
									[
										496924,
										496933
									],
									[
										497134,
										497143
									],
									[
										497276,
										497285
									],
									[
										497421,
										497430
									],
									[
										497631,
										497640
									],
									[
										497773,
										497782
									],
									[
										497918,
										497927
									],
									[
										498128,
										498137
									],
									[
										498270,
										498279
									],
									[
										498415,
										498424
									],
									[
										498625,
										498634
									],
									[
										498767,
										498776
									],
									[
										498921,
										498930
									],
									[
										499131,
										499140
									],
									[
										499273,
										499282
									],
									[
										499427,
										499436
									],
									[
										499637,
										499646
									],
									[
										499779,
										499788
									],
									[
										499933,
										499942
									],
									[
										500143,
										500152
									],
									[
										500285,
										500294
									],
									[
										500439,
										500448
									],
									[
										500649,
										500658
									],
									[
										500791,
										500800
									],
									[
										500937,
										500946
									],
									[
										501147,
										501156
									],
									[
										501289,
										501298
									],
									[
										501435,
										501444
									],
									[
										501645,
										501654
									],
									[
										501787,
										501796
									],
									[
										501965,
										501974
									],
									[
										502175,
										502184
									],
									[
										502317,
										502326
									],
									[
										502495,
										502504
									],
									[
										502705,
										502714
									],
									[
										502847,
										502856
									],
									[
										502993,
										503002
									],
									[
										503203,
										503212
									],
									[
										503345,
										503354
									],
									[
										503491,
										503500
									],
									[
										503701,
										503710
									],
									[
										503843,
										503852
									],
									[
										503988,
										503997
									],
									[
										504198,
										504207
									],
									[
										504340,
										504349
									],
									[
										504485,
										504494
									],
									[
										504695,
										504704
									],
									[
										504837,
										504846
									],
									[
										504982,
										504991
									],
									[
										505192,
										505201
									],
									[
										505334,
										505343
									],
									[
										505479,
										505488
									],
									[
										505689,
										505698
									],
									[
										505831,
										505840
									],
									[
										505985,
										505994
									],
									[
										506195,
										506204
									],
									[
										506337,
										506346
									],
									[
										506491,
										506500
									],
									[
										506701,
										506710
									],
									[
										506843,
										506852
									],
									[
										506997,
										507006
									],
									[
										507207,
										507216
									],
									[
										507349,
										507358
									],
									[
										507503,
										507512
									],
									[
										507713,
										507722
									],
									[
										507855,
										507864
									],
									[
										508001,
										508010
									],
									[
										508211,
										508220
									],
									[
										508353,
										508362
									],
									[
										508499,
										508508
									],
									[
										508709,
										508718
									],
									[
										508851,
										508860
									],
									[
										509029,
										509038
									],
									[
										509239,
										509248
									],
									[
										509381,
										509390
									],
									[
										509559,
										509568
									],
									[
										509769,
										509778
									],
									[
										509911,
										509920
									],
									[
										510057,
										510066
									],
									[
										510267,
										510276
									],
									[
										510409,
										510418
									],
									[
										510555,
										510564
									],
									[
										510765,
										510774
									],
									[
										510907,
										510916
									],
									[
										511052,
										511061
									],
									[
										511262,
										511271
									],
									[
										511404,
										511413
									],
									[
										511549,
										511558
									],
									[
										511759,
										511768
									],
									[
										511901,
										511910
									],
									[
										512046,
										512055
									],
									[
										512256,
										512265
									],
									[
										512398,
										512407
									],
									[
										512543,
										512552
									],
									[
										512753,
										512762
									],
									[
										512895,
										512904
									],
									[
										513049,
										513058
									],
									[
										513259,
										513268
									],
									[
										513401,
										513410
									],
									[
										513555,
										513564
									],
									[
										513765,
										513774
									],
									[
										513907,
										513916
									],
									[
										514061,
										514070
									],
									[
										514271,
										514280
									],
									[
										514413,
										514422
									],
									[
										514567,
										514576
									],
									[
										514777,
										514786
									],
									[
										514919,
										514928
									],
									[
										515065,
										515074
									],
									[
										515275,
										515284
									],
									[
										515417,
										515426
									],
									[
										515563,
										515572
									],
									[
										515773,
										515782
									],
									[
										515915,
										515924
									],
									[
										516081,
										516090
									],
									[
										516291,
										516300
									],
									[
										516433,
										516442
									],
									[
										516599,
										516608
									],
									[
										516789,
										516798
									],
									[
										516970,
										516979
									],
									[
										517148,
										517157
									],
									[
										517328,
										517337
									],
									[
										517517,
										517526
									],
									[
										517706,
										517715
									],
									[
										517889,
										517898
									],
									[
										518102,
										518111
									],
									[
										518250,
										518259
									],
									[
										518434,
										518443
									],
									[
										518618,
										518627
									],
									[
										518762,
										518771
									],
									[
										518946,
										518955
									],
									[
										519122,
										519131
									],
									[
										519324,
										519333
									],
									[
										519500,
										519509
									],
									[
										519707,
										519716
									],
									[
										519883,
										519892
									],
									[
										520090,
										520099
									],
									[
										520266,
										520275
									],
									[
										520473,
										520482
									],
									[
										520649,
										520658
									],
									[
										520856,
										520865
									],
									[
										521032,
										521041
									],
									[
										521224,
										521233
									],
									[
										521368,
										521377
									],
									[
										521517,
										521526
									],
									[
										521678,
										521687
									],
									[
										521834,
										521843
									],
									[
										521991,
										522000
									],
									[
										522188,
										522197
									],
									[
										522336,
										522345
									],
									[
										522512,
										522521
									],
									[
										522714,
										522723
									],
									[
										522862,
										522871
									],
									[
										523038,
										523047
									],
									[
										523245,
										523254
									],
									[
										523393,
										523402
									],
									[
										523569,
										523578
									],
									[
										523776,
										523785
									],
									[
										523924,
										523933
									],
									[
										524100,
										524109
									],
									[
										524307,
										524316
									],
									[
										524455,
										524464
									],
									[
										524631,
										524640
									],
									[
										524838,
										524847
									],
									[
										524986,
										524995
									],
									[
										525162,
										525171
									],
									[
										525354,
										525363
									],
									[
										525498,
										525507
									],
									[
										525647,
										525656
									],
									[
										525808,
										525817
									],
									[
										525964,
										525973
									],
									[
										526121,
										526130
									],
									[
										526318,
										526327
									],
									[
										526466,
										526475
									],
									[
										526642,
										526651
									],
									[
										526844,
										526853
									],
									[
										526992,
										527001
									],
									[
										527168,
										527177
									],
									[
										527375,
										527384
									],
									[
										527523,
										527532
									],
									[
										527699,
										527708
									],
									[
										527906,
										527915
									],
									[
										528054,
										528063
									],
									[
										528230,
										528239
									],
									[
										528437,
										528446
									],
									[
										528585,
										528594
									],
									[
										528761,
										528770
									],
									[
										528968,
										528977
									],
									[
										529116,
										529125
									],
									[
										529292,
										529301
									],
									[
										529484,
										529493
									],
									[
										529628,
										529637
									],
									[
										529777,
										529786
									],
									[
										529938,
										529947
									],
									[
										530094,
										530103
									],
									[
										530251,
										530260
									],
									[
										530448,
										530457
									],
									[
										530596,
										530605
									],
									[
										530772,
										530781
									],
									[
										530974,
										530983
									],
									[
										531122,
										531131
									],
									[
										531298,
										531307
									],
									[
										531505,
										531514
									],
									[
										531653,
										531662
									],
									[
										531829,
										531838
									],
									[
										532036,
										532045
									],
									[
										532184,
										532193
									],
									[
										532360,
										532369
									],
									[
										532567,
										532576
									],
									[
										532715,
										532724
									],
									[
										532891,
										532900
									],
									[
										533098,
										533107
									],
									[
										533246,
										533255
									],
									[
										533422,
										533431
									],
									[
										533614,
										533623
									],
									[
										533758,
										533767
									],
									[
										533907,
										533916
									],
									[
										534068,
										534077
									],
									[
										534224,
										534233
									],
									[
										534381,
										534390
									],
									[
										534578,
										534587
									],
									[
										534726,
										534735
									],
									[
										534902,
										534911
									],
									[
										535104,
										535113
									],
									[
										535252,
										535261
									],
									[
										535428,
										535437
									],
									[
										535635,
										535644
									],
									[
										535783,
										535792
									],
									[
										535959,
										535968
									],
									[
										536166,
										536175
									],
									[
										536314,
										536323
									],
									[
										536490,
										536499
									],
									[
										536697,
										536706
									],
									[
										536845,
										536854
									],
									[
										537021,
										537030
									],
									[
										537228,
										537237
									],
									[
										537376,
										537385
									],
									[
										537552,
										537561
									],
									[
										537754,
										537763
									],
									[
										537927,
										537936
									],
									[
										538088,
										538097
									],
									[
										538247,
										538256
									],
									[
										538294,
										538303
									],
									[
										538446,
										538455
									],
									[
										538493,
										538502
									],
									[
										538557,
										538566
									],
									[
										538723,
										538732
									],
									[
										538892,
										538901
									],
									[
										539076,
										539085
									],
									[
										539329,
										539338
									],
									[
										539415,
										539424
									],
									[
										539475,
										539484
									],
									[
										539687,
										539696
									],
									[
										539887,
										539896
									],
									[
										539972,
										539981
									],
									[
										540031,
										540040
									],
									[
										540249,
										540258
									],
									[
										540431,
										540440
									],
									[
										540590,
										540599
									],
									[
										540831,
										540840
									],
									[
										540915,
										540924
									],
									[
										540970,
										540979
									],
									[
										541172,
										541181
									],
									[
										541352,
										541361
									],
									[
										541567,
										541576
									],
									[
										541651,
										541660
									],
									[
										541709,
										541718
									],
									[
										541922,
										541931
									],
									[
										542194,
										542203
									],
									[
										542269,
										542278
									],
									[
										542337,
										542346
									],
									[
										542575,
										542584
									],
									[
										542632,
										542641
									],
									[
										542939,
										542948
									],
									[
										542995,
										543004
									],
									[
										543373,
										543382
									],
									[
										543448,
										543457
									],
									[
										543528,
										543537
									],
									[
										543705,
										543714
									],
									[
										543761,
										543770
									],
									[
										543840,
										543849
									],
									[
										543971,
										543980
									],
									[
										544040,
										544049
									],
									[
										544152,
										544161
									],
									[
										544221,
										544230
									],
									[
										544427,
										544436
									],
									[
										544484,
										544493
									],
									[
										544791,
										544800
									],
									[
										544847,
										544856
									],
									[
										545144,
										545153
									],
									[
										545199,
										545208
									],
									[
										545355,
										545364
									],
									[
										545410,
										545419
									],
									[
										545580,
										545589
									],
									[
										545668,
										545677
									],
									[
										545711,
										545720
									],
									[
										545922,
										545931
									],
									[
										546010,
										546019
									],
									[
										546053,
										546062
									],
									[
										546285,
										546294
									],
									[
										546360,
										546369
									],
									[
										546419,
										546428
									],
									[
										546577,
										546586
									],
									[
										546647,
										546656
									],
									[
										546924,
										546933
									],
									[
										546995,
										547004
									],
									[
										547273,
										547282
									],
									[
										547328,
										547337
									],
									[
										547459,
										547468
									],
									[
										547527,
										547536
									],
									[
										547639,
										547648
									],
									[
										547707,
										547716
									],
									[
										547864,
										547873
									],
									[
										547918,
										547927
									],
									[
										548073,
										548082
									],
									[
										548127,
										548136
									],
									[
										548297,
										548306
									],
									[
										548385,
										548394
									],
									[
										548428,
										548437
									],
									[
										548639,
										548648
									],
									[
										548727,
										548736
									],
									[
										548770,
										548779
									],
									[
										549002,
										549011
									],
									[
										549077,
										549086
									],
									[
										549136,
										549145
									],
									[
										549335,
										549344
									],
									[
										549405,
										549414
									],
									[
										549682,
										549691
									],
									[
										549753,
										549762
									],
									[
										550031,
										550040
									],
									[
										550086,
										550095
									],
									[
										550217,
										550226
									],
									[
										550285,
										550294
									],
									[
										550397,
										550406
									],
									[
										550465,
										550474
									],
									[
										550622,
										550631
									],
									[
										550676,
										550685
									],
									[
										550831,
										550840
									],
									[
										550885,
										550894
									],
									[
										551055,
										551064
									],
									[
										551143,
										551152
									],
									[
										551186,
										551195
									],
									[
										551397,
										551406
									],
									[
										551485,
										551494
									],
									[
										551528,
										551537
									],
									[
										551770,
										551779
									],
									[
										551934,
										551943
									],
									[
										552228,
										552237
									],
									[
										552399,
										552408
									],
									[
										552556,
										552565
									],
									[
										552836,
										552845
									],
									[
										553003,
										553012
									],
									[
										553297,
										553306
									],
									[
										553468,
										553477
									],
									[
										553636,
										553645
									],
									[
										553919,
										553928
									],
									[
										554083,
										554092
									],
									[
										554377,
										554386
									],
									[
										554634,
										554643
									],
									[
										554791,
										554800
									],
									[
										555073,
										555082
									],
									[
										555240,
										555249
									],
									[
										555534,
										555543
									],
									[
										555791,
										555800
									],
									[
										555959,
										555968
									],
									[
										556244,
										556253
									],
									[
										556408,
										556417
									],
									[
										556702,
										556711
									],
									[
										556959,
										556968
									],
									[
										557127,
										557136
									],
									[
										557409,
										557418
									],
									[
										557576,
										557585
									],
									[
										557870,
										557879
									],
									[
										558127,
										558136
									],
									[
										558284,
										558293
									],
									[
										558521,
										558530
									],
									[
										558659,
										558668
									],
									[
										558718,
										558727
									],
									[
										558861,
										558870
									],
									[
										558999,
										559008
									],
									[
										559058,
										559067
									],
									[
										559203,
										559212
									],
									[
										559341,
										559350
									],
									[
										559400,
										559409
									],
									[
										559543,
										559552
									],
									[
										559681,
										559690
									],
									[
										559740,
										559749
									],
									[
										559885,
										559894
									],
									[
										559942,
										559951
									],
									[
										560121,
										560130
									],
									[
										560178,
										560187
									],
									[
										560357,
										560366
									],
									[
										560414,
										560423
									],
									[
										560596,
										560605
									],
									[
										560653,
										560662
									],
									[
										560864,
										560873
									],
									[
										560921,
										560930
									],
									[
										560979,
										560988
									],
									[
										561037,
										561046
									],
									[
										561095,
										561104
									],
									[
										561153,
										561162
									],
									[
										561211,
										561220
									],
									[
										561269,
										561278
									],
									[
										561327,
										561336
									],
									[
										561387,
										561396
									],
									[
										561577,
										561586
									],
									[
										561842,
										561851
									],
									[
										561870,
										561879
									],
									[
										561906,
										561915
									],
									[
										561947,
										561956
									],
									[
										561989,
										561998
									],
									[
										562035,
										562044
									],
									[
										562076,
										562085
									],
									[
										562118,
										562127
									],
									[
										562159,
										562168
									],
									[
										562199,
										562208
									],
									[
										562240,
										562249
									],
									[
										562281,
										562290
									],
									[
										562328,
										562337
									],
									[
										562376,
										562385
									],
									[
										562423,
										562432
									],
									[
										562469,
										562478
									],
									[
										562516,
										562525
									],
									[
										562563,
										562572
									],
									[
										562609,
										562618
									],
									[
										562656,
										562665
									],
									[
										562701,
										562710
									],
									[
										562747,
										562756
									],
									[
										562793,
										562802
									],
									[
										562845,
										562854
									],
									[
										562898,
										562907
									],
									[
										562949,
										562958
									],
									[
										563001,
										563010
									],
									[
										563156,
										563165
									],
									[
										563185,
										563194
									],
									[
										563272,
										563281
									],
									[
										563356,
										563365
									],
									[
										563399,
										563408
									],
									[
										563460,
										563469
									],
									[
										563515,
										563524
									],
									[
										563553,
										563562
									],
									[
										563638,
										563647
									],
									[
										563725,
										563734
									],
									[
										563874,
										563883
									],
									[
										564052,
										564061
									],
									[
										564225,
										564234
									],
									[
										564410,
										564419
									],
									[
										564590,
										564599
									],
									[
										564781,
										564790
									],
									[
										564973,
										564982
									],
									[
										565174,
										565183
									],
									[
										565283,
										565292
									],
									[
										565367,
										565376
									],
									[
										565424,
										565433
									],
									[
										565645,
										565654
									],
									[
										565729,
										565738
									],
									[
										565802,
										565811
									],
									[
										565886,
										565895
									],
									[
										565915,
										565924
									],
									[
										565944,
										565953
									],
									[
										566105,
										566114
									],
									[
										566184,
										566193
									],
									[
										566272,
										566281
									],
									[
										566349,
										566358
									],
									[
										566411,
										566420
									],
									[
										566545,
										566554
									],
									[
										566744,
										566753
									],
									[
										566943,
										566952
									],
									[
										567067,
										567076
									],
									[
										567098,
										567107
									],
									[
										567186,
										567195
									],
									[
										567286,
										567295
									],
									[
										567474,
										567483
									],
									[
										567660,
										567669
									],
									[
										567852,
										567861
									],
									[
										568030,
										568039
									],
									[
										568217,
										568226
									],
									[
										568399,
										568408
									],
									[
										568567,
										568576
									],
									[
										568746,
										568755
									],
									[
										568934,
										568943
									],
									[
										569117,
										569126
									],
									[
										569286,
										569295
									],
									[
										569464,
										569473
									],
									[
										569651,
										569660
									],
									[
										569833,
										569842
									],
									[
										570001,
										570010
									],
									[
										570182,
										570191
									],
									[
										570372,
										570381
									],
									[
										570557,
										570566
									],
									[
										570743,
										570752
									],
									[
										570925,
										570934
									],
									[
										571116,
										571125
									],
									[
										571302,
										571311
									],
									[
										571474,
										571483
									],
									[
										571653,
										571662
									],
									[
										571876,
										571885
									],
									[
										572013,
										572022
									],
									[
										572109,
										572118
									],
									[
										572316,
										572325
									],
									[
										572452,
										572461
									],
									[
										572710,
										572719
									],
									[
										572993,
										573002
									],
									[
										573268,
										573277
									],
									[
										573509,
										573518
									],
									[
										573710,
										573719
									],
									[
										573786,
										573795
									],
									[
										573916,
										573925
									],
									[
										573990,
										573999
									],
									[
										574244,
										574253
									],
									[
										574527,
										574536
									],
									[
										574802,
										574811
									],
									[
										575043,
										575052
									],
									[
										575244,
										575253
									],
									[
										575320,
										575329
									],
									[
										575490,
										575499
									],
									[
										575556,
										575565
									],
									[
										575777,
										575786
									],
									[
										576006,
										576015
									],
									[
										576231,
										576240
									],
									[
										576453,
										576462
									],
									[
										576509,
										576518
									],
									[
										576688,
										576697
									],
									[
										576727,
										576736
									],
									[
										576788,
										576797
									],
									[
										576850,
										576859
									],
									[
										576912,
										576921
									],
									[
										576974,
										576983
									],
									[
										577036,
										577045
									],
									[
										577102,
										577111
									],
									[
										577169,
										577178
									],
									[
										577237,
										577246
									],
									[
										577306,
										577315
									],
									[
										577375,
										577384
									],
									[
										577444,
										577453
									],
									[
										577513,
										577522
									],
									[
										577583,
										577592
									],
									[
										577656,
										577665
									],
									[
										577731,
										577740
									],
									[
										577806,
										577815
									],
									[
										577886,
										577895
									],
									[
										577967,
										577976
									],
									[
										578047,
										578056
									],
									[
										578145,
										578154
									],
									[
										578243,
										578252
									],
									[
										578284,
										578293
									],
									[
										578347,
										578356
									],
									[
										578409,
										578418
									],
									[
										578474,
										578483
									],
									[
										578540,
										578549
									],
									[
										578633,
										578642
									],
									[
										578727,
										578736
									],
									[
										578821,
										578830
									],
									[
										578915,
										578924
									],
									[
										579011,
										579020
									],
									[
										579105,
										579114
									],
									[
										579201,
										579210
									],
									[
										579295,
										579304
									],
									[
										579385,
										579394
									],
									[
										579478,
										579487
									],
									[
										579579,
										579588
									],
									[
										579733,
										579742
									],
									[
										579772,
										579781
									],
									[
										579841,
										579850
									],
									[
										579913,
										579922
									],
									[
										579987,
										579996
									],
									[
										580062,
										580071
									],
									[
										580137,
										580146
									],
									[
										580215,
										580224
									],
									[
										580292,
										580301
									],
									[
										580368,
										580377
									],
									[
										580446,
										580455
									],
									[
										580539,
										580548
									],
									[
										580630,
										580639
									],
									[
										580722,
										580731
									],
									[
										580821,
										580830
									],
									[
										580973,
										580982
									],
									[
										581012,
										581021
									],
									[
										581058,
										581067
									],
									[
										581144,
										581153
									],
									[
										581231,
										581240
									],
									[
										581316,
										581325
									],
									[
										581401,
										581410
									],
									[
										581486,
										581495
									],
									[
										581537,
										581546
									],
									[
										581589,
										581598
									],
									[
										581641,
										581650
									],
									[
										581752,
										581761
									],
									[
										581791,
										581800
									],
									[
										581838,
										581847
									],
									[
										581929,
										581938
									],
									[
										582023,
										582032
									],
									[
										582117,
										582126
									],
									[
										582210,
										582219
									],
									[
										582303,
										582312
									],
									[
										582354,
										582363
									],
									[
										582405,
										582414
									],
									[
										582452,
										582461
									],
									[
										582511,
										582520
									],
									[
										582572,
										582581
									],
									[
										582634,
										582643
									],
									[
										582694,
										582703
									],
									[
										582753,
										582762
									],
									[
										582871,
										582880
									],
									[
										582920,
										582929
									],
									[
										582968,
										582977
									],
									[
										583039,
										583048
									],
									[
										583111,
										583120
									],
									[
										583183,
										583192
									],
									[
										583255,
										583264
									],
									[
										583326,
										583335
									],
									[
										583393,
										583402
									],
									[
										583520,
										583529
									],
									[
										583559,
										583568
									],
									[
										583652,
										583661
									],
									[
										583746,
										583755
									],
									[
										583840,
										583849
									],
									[
										583934,
										583943
									],
									[
										583973,
										583982
									],
									[
										584021,
										584030
									],
									[
										584079,
										584088
									],
									[
										584128,
										584137
									],
									[
										584180,
										584189
									],
									[
										584233,
										584242
									],
									[
										584286,
										584295
									],
									[
										584338,
										584347
									],
									[
										584386,
										584395
									],
									[
										584431,
										584440
									],
									[
										584535,
										584544
									],
									[
										584574,
										584583
									],
									[
										584610,
										584619
									],
									[
										584654,
										584663
									],
									[
										584723,
										584732
									],
									[
										584793,
										584802
									],
									[
										584863,
										584872
									],
									[
										584932,
										584941
									],
									[
										585001,
										585010
									],
									[
										585072,
										585081
									],
									[
										585143,
										585152
									],
									[
										585214,
										585223
									],
									[
										585285,
										585294
									],
									[
										585356,
										585365
									],
									[
										585427,
										585436
									],
									[
										585497,
										585506
									],
									[
										585566,
										585575
									],
									[
										585635,
										585644
									],
									[
										585706,
										585715
									],
									[
										585778,
										585787
									],
									[
										585843,
										585852
									],
									[
										585896,
										585905
									],
									[
										585989,
										585998
									],
									[
										586085,
										586094
									],
									[
										586239,
										586248
									],
									[
										586268,
										586277
									],
									[
										586327,
										586336
									],
									[
										586388,
										586397
									],
									[
										586450,
										586459
									],
									[
										586513,
										586522
									],
									[
										586577,
										586586
									],
									[
										586644,
										586653
									],
									[
										586712,
										586721
									],
									[
										586781,
										586790
									],
									[
										586851,
										586860
									],
									[
										586922,
										586931
									],
									[
										586994,
										587003
									],
									[
										587067,
										587076
									],
									[
										587141,
										587150
									],
									[
										587214,
										587223
									],
									[
										587288,
										587297
									],
									[
										587363,
										587372
									],
									[
										587421,
										587430
									],
									[
										587480,
										587489
									],
									[
										587570,
										587579
									],
									[
										587660,
										587669
									],
									[
										587810,
										587819
									],
									[
										587839,
										587848
									],
									[
										587891,
										587900
									],
									[
										587945,
										587954
									],
									[
										588006,
										588015
									],
									[
										588063,
										588072
									],
									[
										588119,
										588128
									],
									[
										588178,
										588187
									],
									[
										588238,
										588247
									],
									[
										588296,
										588305
									],
									[
										588355,
										588364
									],
									[
										588400,
										588409
									],
									[
										588490,
										588499
									],
									[
										588580,
										588589
									],
									[
										588777,
										588786
									],
									[
										588938,
										588947
									],
									[
										589091,
										589100
									],
									[
										589253,
										589262
									],
									[
										589415,
										589424
									],
									[
										589577,
										589586
									],
									[
										589739,
										589748
									],
									[
										589932,
										589941
									],
									[
										590028,
										590037
									],
									[
										590083,
										590092
									],
									[
										590214,
										590223
									],
									[
										590343,
										590352
									],
									[
										590401,
										590410
									],
									[
										590538,
										590547
									],
									[
										590667,
										590676
									],
									[
										590725,
										590734
									],
									[
										590862,
										590871
									],
									[
										590991,
										591000
									],
									[
										591049,
										591058
									],
									[
										591186,
										591195
									],
									[
										591315,
										591324
									],
									[
										591373,
										591382
									],
									[
										591510,
										591519
									],
									[
										591639,
										591648
									],
									[
										591697,
										591706
									],
									[
										591834,
										591843
									],
									[
										591963,
										591972
									],
									[
										592021,
										592030
									],
									[
										592158,
										592167
									],
									[
										592287,
										592296
									],
									[
										592345,
										592354
									],
									[
										592482,
										592491
									],
									[
										592611,
										592620
									],
									[
										592669,
										592678
									],
									[
										592806,
										592815
									],
									[
										592935,
										592944
									],
									[
										592993,
										593002
									],
									[
										593130,
										593139
									],
									[
										593259,
										593268
									],
									[
										593317,
										593326
									],
									[
										593454,
										593463
									],
									[
										593583,
										593592
									],
									[
										593641,
										593650
									],
									[
										593778,
										593787
									],
									[
										593907,
										593916
									],
									[
										593965,
										593974
									],
									[
										594102,
										594111
									],
									[
										594231,
										594240
									],
									[
										594289,
										594298
									],
									[
										594426,
										594435
									],
									[
										594555,
										594564
									],
									[
										594613,
										594622
									],
									[
										594740,
										594749
									],
									[
										594910,
										594919
									],
									[
										594966,
										594975
									],
									[
										595140,
										595149
									],
									[
										595196,
										595205
									],
									[
										595370,
										595379
									],
									[
										595426,
										595435
									],
									[
										595599,
										595608
									],
									[
										595655,
										595664
									],
									[
										595828,
										595837
									],
									[
										595884,
										595893
									],
									[
										596057,
										596066
									],
									[
										596113,
										596122
									],
									[
										596286,
										596295
									],
									[
										596342,
										596351
									],
									[
										596518,
										596527
									],
									[
										596574,
										596583
									],
									[
										596750,
										596759
									],
									[
										596806,
										596815
									],
									[
										596983,
										596992
									],
									[
										597039,
										597048
									],
									[
										597216,
										597225
									],
									[
										597272,
										597281
									],
									[
										597446,
										597455
									],
									[
										597502,
										597511
									],
									[
										597690,
										597699
									],
									[
										597911,
										597920
									],
									[
										597967,
										597976
									],
									[
										598024,
										598033
									],
									[
										598081,
										598090
									],
									[
										598138,
										598147
									],
									[
										598195,
										598204
									],
									[
										598252,
										598261
									],
									[
										598309,
										598318
									],
									[
										598493,
										598502
									],
									[
										598694,
										598703
									],
									[
										598981,
										598990
									],
									[
										599052,
										599061
									],
									[
										599145,
										599154
									],
									[
										599174,
										599183
									],
									[
										599203,
										599212
									],
									[
										599286,
										599295
									],
									[
										599342,
										599351
									],
									[
										599417,
										599426
									],
									[
										599446,
										599455
									],
									[
										599573,
										599582
									],
									[
										599777,
										599786
									],
									[
										599877,
										599886
									],
									[
										600140,
										600149
									],
									[
										600371,
										600380
									],
									[
										600616,
										600625
									],
									[
										600847,
										600856
									],
									[
										601046,
										601055
									],
									[
										601274,
										601283
									],
									[
										601516,
										601525
									],
									[
										601888,
										601911
									],
									[
										602176,
										602199
									],
									[
										602500,
										602505
									],
									[
										602701,
										602706
									],
									[
										602914,
										602919
									],
									[
										603103,
										603108
									],
									[
										603216,
										603221
									],
									[
										603429,
										603434
									],
									[
										603618,
										603623
									],
									[
										603726,
										603731
									],
									[
										603821,
										603826
									],
									[
										603916,
										603921
									],
									[
										604011,
										604016
									],
									[
										604106,
										604111
									],
									[
										604298,
										604303
									],
									[
										604538,
										604543
									],
									[
										604829,
										604834
									],
									[
										605096,
										605101
									],
									[
										605248,
										605253
									],
									[
										605538,
										605543
									],
									[
										605805,
										605810
									],
									[
										605951,
										605956
									],
									[
										606085,
										606090
									],
									[
										606219,
										606224
									],
									[
										606353,
										606358
									],
									[
										606487,
										606492
									],
									[
										606718,
										606723
									],
									[
										606907,
										606912
									],
									[
										607108,
										607113
									],
									[
										607285,
										607290
									],
									[
										607392,
										607397
									],
									[
										607593,
										607598
									],
									[
										607770,
										607775
									],
									[
										607872,
										607877
									],
									[
										607961,
										607966
									],
									[
										608050,
										608055
									],
									[
										608139,
										608144
									],
									[
										608228,
										608233
									],
									[
										608420,
										608425
									],
									[
										608609,
										608614
									],
									[
										608810,
										608815
									],
									[
										608987,
										608992
									],
									[
										609094,
										609099
									],
									[
										609295,
										609300
									],
									[
										609472,
										609477
									],
									[
										609574,
										609579
									],
									[
										609663,
										609668
									],
									[
										609752,
										609757
									],
									[
										609841,
										609846
									],
									[
										609930,
										609935
									],
									[
										610122,
										610127
									],
									[
										610311,
										610316
									],
									[
										610512,
										610517
									],
									[
										610689,
										610694
									],
									[
										610796,
										610801
									],
									[
										610997,
										611002
									],
									[
										611174,
										611179
									],
									[
										611276,
										611281
									],
									[
										611365,
										611370
									],
									[
										611454,
										611459
									],
									[
										611543,
										611548
									],
									[
										611632,
										611637
									],
									[
										611824,
										611829
									],
									[
										612013,
										612018
									],
									[
										612214,
										612219
									],
									[
										612391,
										612396
									],
									[
										612498,
										612503
									],
									[
										612699,
										612704
									],
									[
										612876,
										612881
									],
									[
										612978,
										612983
									],
									[
										613067,
										613072
									],
									[
										613156,
										613161
									],
									[
										613245,
										613250
									],
									[
										613334,
										613339
									],
									[
										613526,
										613531
									],
									[
										613715,
										613720
									],
									[
										613916,
										613921
									],
									[
										614093,
										614098
									],
									[
										614200,
										614205
									],
									[
										614401,
										614406
									],
									[
										614578,
										614583
									],
									[
										614680,
										614685
									],
									[
										614769,
										614774
									],
									[
										614858,
										614863
									],
									[
										614947,
										614952
									],
									[
										615036,
										615041
									],
									[
										615275,
										615280
									],
									[
										615397,
										615402
									],
									[
										615610,
										615615
									],
									[
										615798,
										615803
									],
									[
										615930,
										615935
									],
									[
										616094,
										616099
									],
									[
										616118,
										616123
									],
									[
										616235,
										616240
									],
									[
										616244,
										616249
									],
									[
										616295,
										616300
									],
									[
										616304,
										616309
									],
									[
										616401,
										616406
									],
									[
										616408,
										616413
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								602291,
								602291
							]
						],
						"settings":
						{
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 4,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 599483.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "source/tnsp/source/Tools.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 127718,
						"regions":
						{
						},
						"selection":
						[
							[
								10757,
								10757
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 11668.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "source/timer/source/timer.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2674,
						"regions":
						{
						},
						"selection":
						[
							[
								1897,
								1902
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "source/tenwork/source/lattice_clt.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 8801,
						"regions":
						{
						},
						"selection":
						[
							[
								94,
								100
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "source/tenwork/source/tn_tensor.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 12993,
						"regions":
						{
						},
						"selection":
						[
							[
								1231,
								1231
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "source/tenwork/source/lattice.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 118040,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "source/statistics/source/statistics.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7733,
						"regions":
						{
						},
						"selection":
						[
							[
								5206,
								5207
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "source/tnsp-extension/source/tensor_tools.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 16876,
						"regions":
						{
						},
						"selection":
						[
							[
								2882,
								2883
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 3.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "source/unidic/source/unidic.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6335,
						"regions":
						{
						},
						"selection":
						[
							[
								28,
								28
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "source/paralist/source/paralist.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10083,
						"regions":
						{
						},
						"selection":
						[
							[
								47,
								59
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				},
				{
					"buffer": 18,
					"file": "source/dictionary/source/dictionary.f90",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 33764,
						"regions":
						{
						},
						"selection":
						[
							[
								48,
								48
							]
						],
						"settings":
						{
							"syntax": "Packages/Fortran/grammars/FortranModern.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 18,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 45.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 281.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 234.0
	},
	"output.exec":
	{
		"height": 83.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 177.0
	},
	"pinned_build_system": "Packages/User/python3.sublime-build",
	"project": "pack.sublime-project",
	"replace":
	{
		"height": 86.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Desktop/my note/adv quan/corr.py"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 221.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
